
PwmServo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097f4  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  080099d8  080099d8  0000a9d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bb0  08009bb0  0000b074  2**0
                  CONTENTS
  4 .ARM          00000000  08009bb0  08009bb0  0000b074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009bb0  08009bb0  0000b074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bb0  08009bb0  0000abb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009bb4  08009bb4  0000abb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009bb8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fb4  20000074  08009c2c  0000b074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002028  08009c2c  0000c028  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013cb3  00000000  00000000  0000b09d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038f6  00000000  00000000  0001ed50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001300  00000000  00000000  00022648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eb3  00000000  00000000  00023948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d888  00000000  00000000  000247fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019a93  00000000  00000000  00042083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009dd12  00000000  00000000  0005bb16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f9828  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056c0  00000000  00000000  000f986c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000fef2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000074 	.word	0x20000074
 8000200:	00000000 	.word	0x00000000
 8000204:	080099c0 	.word	0x080099c0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000078 	.word	0x20000078
 8000220:	080099c0 	.word	0x080099c0

08000224 <__aeabi_drsub>:
 8000224:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000228:	e002      	b.n	8000230 <__adddf3>
 800022a:	bf00      	nop

0800022c <__aeabi_dsub>:
 800022c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000230 <__adddf3>:
 8000230:	b530      	push	{r4, r5, lr}
 8000232:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000236:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023a:	ea94 0f05 	teq	r4, r5
 800023e:	bf08      	it	eq
 8000240:	ea90 0f02 	teqeq	r0, r2
 8000244:	bf1f      	itttt	ne
 8000246:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000252:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000256:	f000 80e2 	beq.w	800041e <__adddf3+0x1ee>
 800025a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000262:	bfb8      	it	lt
 8000264:	426d      	neglt	r5, r5
 8000266:	dd0c      	ble.n	8000282 <__adddf3+0x52>
 8000268:	442c      	add	r4, r5
 800026a:	ea80 0202 	eor.w	r2, r0, r2
 800026e:	ea81 0303 	eor.w	r3, r1, r3
 8000272:	ea82 0000 	eor.w	r0, r2, r0
 8000276:	ea83 0101 	eor.w	r1, r3, r1
 800027a:	ea80 0202 	eor.w	r2, r0, r2
 800027e:	ea81 0303 	eor.w	r3, r1, r3
 8000282:	2d36      	cmp	r5, #54	@ 0x36
 8000284:	bf88      	it	hi
 8000286:	bd30      	pophi	{r4, r5, pc}
 8000288:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800028c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000290:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000294:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x70>
 800029a:	4240      	negs	r0, r0
 800029c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x84>
 80002ae:	4252      	negs	r2, r2
 80002b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b4:	ea94 0f05 	teq	r4, r5
 80002b8:	f000 80a7 	beq.w	800040a <__adddf3+0x1da>
 80002bc:	f1a4 0401 	sub.w	r4, r4, #1
 80002c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c4:	db0d      	blt.n	80002e2 <__adddf3+0xb2>
 80002c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ca:	fa22 f205 	lsr.w	r2, r2, r5
 80002ce:	1880      	adds	r0, r0, r2
 80002d0:	f141 0100 	adc.w	r1, r1, #0
 80002d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d8:	1880      	adds	r0, r0, r2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	4159      	adcs	r1, r3
 80002e0:	e00e      	b.n	8000300 <__adddf3+0xd0>
 80002e2:	f1a5 0520 	sub.w	r5, r5, #32
 80002e6:	f10e 0e20 	add.w	lr, lr, #32
 80002ea:	2a01      	cmp	r2, #1
 80002ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f0:	bf28      	it	cs
 80002f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	18c0      	adds	r0, r0, r3
 80002fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000300:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000304:	d507      	bpl.n	8000316 <__adddf3+0xe6>
 8000306:	f04f 0e00 	mov.w	lr, #0
 800030a:	f1dc 0c00 	rsbs	ip, ip, #0
 800030e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000312:	eb6e 0101 	sbc.w	r1, lr, r1
 8000316:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800031a:	d31b      	bcc.n	8000354 <__adddf3+0x124>
 800031c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000320:	d30c      	bcc.n	800033c <__adddf3+0x10c>
 8000322:	0849      	lsrs	r1, r1, #1
 8000324:	ea5f 0030 	movs.w	r0, r0, rrx
 8000328:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800032c:	f104 0401 	add.w	r4, r4, #1
 8000330:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000334:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000338:	f080 809a 	bcs.w	8000470 <__adddf3+0x240>
 800033c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000340:	bf08      	it	eq
 8000342:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000346:	f150 0000 	adcs.w	r0, r0, #0
 800034a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034e:	ea41 0105 	orr.w	r1, r1, r5
 8000352:	bd30      	pop	{r4, r5, pc}
 8000354:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000358:	4140      	adcs	r0, r0
 800035a:	eb41 0101 	adc.w	r1, r1, r1
 800035e:	3c01      	subs	r4, #1
 8000360:	bf28      	it	cs
 8000362:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000366:	d2e9      	bcs.n	800033c <__adddf3+0x10c>
 8000368:	f091 0f00 	teq	r1, #0
 800036c:	bf04      	itt	eq
 800036e:	4601      	moveq	r1, r0
 8000370:	2000      	moveq	r0, #0
 8000372:	fab1 f381 	clz	r3, r1
 8000376:	bf08      	it	eq
 8000378:	3320      	addeq	r3, #32
 800037a:	f1a3 030b 	sub.w	r3, r3, #11
 800037e:	f1b3 0220 	subs.w	r2, r3, #32
 8000382:	da0c      	bge.n	800039e <__adddf3+0x16e>
 8000384:	320c      	adds	r2, #12
 8000386:	dd08      	ble.n	800039a <__adddf3+0x16a>
 8000388:	f102 0c14 	add.w	ip, r2, #20
 800038c:	f1c2 020c 	rsb	r2, r2, #12
 8000390:	fa01 f00c 	lsl.w	r0, r1, ip
 8000394:	fa21 f102 	lsr.w	r1, r1, r2
 8000398:	e00c      	b.n	80003b4 <__adddf3+0x184>
 800039a:	f102 0214 	add.w	r2, r2, #20
 800039e:	bfd8      	it	le
 80003a0:	f1c2 0c20 	rsble	ip, r2, #32
 80003a4:	fa01 f102 	lsl.w	r1, r1, r2
 80003a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003ac:	bfdc      	itt	le
 80003ae:	ea41 010c 	orrle.w	r1, r1, ip
 80003b2:	4090      	lslle	r0, r2
 80003b4:	1ae4      	subs	r4, r4, r3
 80003b6:	bfa2      	ittt	ge
 80003b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003bc:	4329      	orrge	r1, r5
 80003be:	bd30      	popge	{r4, r5, pc}
 80003c0:	ea6f 0404 	mvn.w	r4, r4
 80003c4:	3c1f      	subs	r4, #31
 80003c6:	da1c      	bge.n	8000402 <__adddf3+0x1d2>
 80003c8:	340c      	adds	r4, #12
 80003ca:	dc0e      	bgt.n	80003ea <__adddf3+0x1ba>
 80003cc:	f104 0414 	add.w	r4, r4, #20
 80003d0:	f1c4 0220 	rsb	r2, r4, #32
 80003d4:	fa20 f004 	lsr.w	r0, r0, r4
 80003d8:	fa01 f302 	lsl.w	r3, r1, r2
 80003dc:	ea40 0003 	orr.w	r0, r0, r3
 80003e0:	fa21 f304 	lsr.w	r3, r1, r4
 80003e4:	ea45 0103 	orr.w	r1, r5, r3
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f1c4 040c 	rsb	r4, r4, #12
 80003ee:	f1c4 0220 	rsb	r2, r4, #32
 80003f2:	fa20 f002 	lsr.w	r0, r0, r2
 80003f6:	fa01 f304 	lsl.w	r3, r1, r4
 80003fa:	ea40 0003 	orr.w	r0, r0, r3
 80003fe:	4629      	mov	r1, r5
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	fa21 f004 	lsr.w	r0, r1, r4
 8000406:	4629      	mov	r1, r5
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	f094 0f00 	teq	r4, #0
 800040e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000412:	bf06      	itte	eq
 8000414:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000418:	3401      	addeq	r4, #1
 800041a:	3d01      	subne	r5, #1
 800041c:	e74e      	b.n	80002bc <__adddf3+0x8c>
 800041e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000422:	bf18      	it	ne
 8000424:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000428:	d029      	beq.n	800047e <__adddf3+0x24e>
 800042a:	ea94 0f05 	teq	r4, r5
 800042e:	bf08      	it	eq
 8000430:	ea90 0f02 	teqeq	r0, r2
 8000434:	d005      	beq.n	8000442 <__adddf3+0x212>
 8000436:	ea54 0c00 	orrs.w	ip, r4, r0
 800043a:	bf04      	itt	eq
 800043c:	4619      	moveq	r1, r3
 800043e:	4610      	moveq	r0, r2
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea91 0f03 	teq	r1, r3
 8000446:	bf1e      	ittt	ne
 8000448:	2100      	movne	r1, #0
 800044a:	2000      	movne	r0, #0
 800044c:	bd30      	popne	{r4, r5, pc}
 800044e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000452:	d105      	bne.n	8000460 <__adddf3+0x230>
 8000454:	0040      	lsls	r0, r0, #1
 8000456:	4149      	adcs	r1, r1
 8000458:	bf28      	it	cs
 800045a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800045e:	bd30      	pop	{r4, r5, pc}
 8000460:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000464:	bf3c      	itt	cc
 8000466:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800046a:	bd30      	popcc	{r4, r5, pc}
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000474:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000478:	f04f 0000 	mov.w	r0, #0
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000482:	bf1a      	itte	ne
 8000484:	4619      	movne	r1, r3
 8000486:	4610      	movne	r0, r2
 8000488:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800048c:	bf1c      	itt	ne
 800048e:	460b      	movne	r3, r1
 8000490:	4602      	movne	r2, r0
 8000492:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000496:	bf06      	itte	eq
 8000498:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800049c:	ea91 0f03 	teqeq	r1, r3
 80004a0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	bf00      	nop

080004a8 <__aeabi_ui2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004bc:	f04f 0500 	mov.w	r5, #0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e750      	b.n	8000368 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_i2d>:
 80004c8:	f090 0f00 	teq	r0, #0
 80004cc:	bf04      	itt	eq
 80004ce:	2100      	moveq	r1, #0
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004d8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004dc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004e0:	bf48      	it	mi
 80004e2:	4240      	negmi	r0, r0
 80004e4:	f04f 0100 	mov.w	r1, #0
 80004e8:	e73e      	b.n	8000368 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_f2d>:
 80004ec:	0042      	lsls	r2, r0, #1
 80004ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fa:	bf1f      	itttt	ne
 80004fc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000500:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000504:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000508:	4770      	bxne	lr
 800050a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800050e:	bf08      	it	eq
 8000510:	4770      	bxeq	lr
 8000512:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000516:	bf04      	itt	eq
 8000518:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000524:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000528:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800052c:	e71c      	b.n	8000368 <__adddf3+0x138>
 800052e:	bf00      	nop

08000530 <__aeabi_ul2d>:
 8000530:	ea50 0201 	orrs.w	r2, r0, r1
 8000534:	bf08      	it	eq
 8000536:	4770      	bxeq	lr
 8000538:	b530      	push	{r4, r5, lr}
 800053a:	f04f 0500 	mov.w	r5, #0
 800053e:	e00a      	b.n	8000556 <__aeabi_l2d+0x16>

08000540 <__aeabi_l2d>:
 8000540:	ea50 0201 	orrs.w	r2, r0, r1
 8000544:	bf08      	it	eq
 8000546:	4770      	bxeq	lr
 8000548:	b530      	push	{r4, r5, lr}
 800054a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800054e:	d502      	bpl.n	8000556 <__aeabi_l2d+0x16>
 8000550:	4240      	negs	r0, r0
 8000552:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000556:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800055e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000562:	f43f aed8 	beq.w	8000316 <__adddf3+0xe6>
 8000566:	f04f 0203 	mov.w	r2, #3
 800056a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056e:	bf18      	it	ne
 8000570:	3203      	addne	r2, #3
 8000572:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000576:	bf18      	it	ne
 8000578:	3203      	addne	r2, #3
 800057a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057e:	f1c2 0320 	rsb	r3, r2, #32
 8000582:	fa00 fc03 	lsl.w	ip, r0, r3
 8000586:	fa20 f002 	lsr.w	r0, r0, r2
 800058a:	fa01 fe03 	lsl.w	lr, r1, r3
 800058e:	ea40 000e 	orr.w	r0, r0, lr
 8000592:	fa21 f102 	lsr.w	r1, r1, r2
 8000596:	4414      	add	r4, r2
 8000598:	e6bd      	b.n	8000316 <__adddf3+0xe6>
 800059a:	bf00      	nop

0800059c <__aeabi_d2f>:
 800059c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80005a4:	bf24      	itt	cs
 80005a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80005aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80005ae:	d90d      	bls.n	80005cc <__aeabi_d2f+0x30>
 80005b0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80005b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80005bc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80005c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80005c4:	bf08      	it	eq
 80005c6:	f020 0001 	biceq.w	r0, r0, #1
 80005ca:	4770      	bx	lr
 80005cc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80005d0:	d121      	bne.n	8000616 <__aeabi_d2f+0x7a>
 80005d2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80005d6:	bfbc      	itt	lt
 80005d8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80005dc:	4770      	bxlt	lr
 80005de:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005e6:	f1c2 0218 	rsb	r2, r2, #24
 80005ea:	f1c2 0c20 	rsb	ip, r2, #32
 80005ee:	fa10 f30c 	lsls.w	r3, r0, ip
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	bf18      	it	ne
 80005f8:	f040 0001 	orrne.w	r0, r0, #1
 80005fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000600:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000604:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000608:	ea40 000c 	orr.w	r0, r0, ip
 800060c:	fa23 f302 	lsr.w	r3, r3, r2
 8000610:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000614:	e7cc      	b.n	80005b0 <__aeabi_d2f+0x14>
 8000616:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800061a:	d107      	bne.n	800062c <__aeabi_d2f+0x90>
 800061c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000620:	bf1e      	ittt	ne
 8000622:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000626:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800062a:	4770      	bxne	lr
 800062c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000630:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000634:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop

0800063c <__aeabi_frsub>:
 800063c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000640:	e002      	b.n	8000648 <__addsf3>
 8000642:	bf00      	nop

08000644 <__aeabi_fsub>:
 8000644:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000648 <__addsf3>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	bf1f      	itttt	ne
 800064c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000650:	ea92 0f03 	teqne	r2, r3
 8000654:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000658:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800065c:	d06a      	beq.n	8000734 <__addsf3+0xec>
 800065e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000662:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000666:	bfc1      	itttt	gt
 8000668:	18d2      	addgt	r2, r2, r3
 800066a:	4041      	eorgt	r1, r0
 800066c:	4048      	eorgt	r0, r1
 800066e:	4041      	eorgt	r1, r0
 8000670:	bfb8      	it	lt
 8000672:	425b      	neglt	r3, r3
 8000674:	2b19      	cmp	r3, #25
 8000676:	bf88      	it	hi
 8000678:	4770      	bxhi	lr
 800067a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800067e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000682:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000686:	bf18      	it	ne
 8000688:	4240      	negne	r0, r0
 800068a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800068e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000692:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000696:	bf18      	it	ne
 8000698:	4249      	negne	r1, r1
 800069a:	ea92 0f03 	teq	r2, r3
 800069e:	d03f      	beq.n	8000720 <__addsf3+0xd8>
 80006a0:	f1a2 0201 	sub.w	r2, r2, #1
 80006a4:	fa41 fc03 	asr.w	ip, r1, r3
 80006a8:	eb10 000c 	adds.w	r0, r0, ip
 80006ac:	f1c3 0320 	rsb	r3, r3, #32
 80006b0:	fa01 f103 	lsl.w	r1, r1, r3
 80006b4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80006b8:	d502      	bpl.n	80006c0 <__addsf3+0x78>
 80006ba:	4249      	negs	r1, r1
 80006bc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006c0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80006c4:	d313      	bcc.n	80006ee <__addsf3+0xa6>
 80006c6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80006ca:	d306      	bcc.n	80006da <__addsf3+0x92>
 80006cc:	0840      	lsrs	r0, r0, #1
 80006ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80006d2:	f102 0201 	add.w	r2, r2, #1
 80006d6:	2afe      	cmp	r2, #254	@ 0xfe
 80006d8:	d251      	bcs.n	800077e <__addsf3+0x136>
 80006da:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80006de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80006e2:	bf08      	it	eq
 80006e4:	f020 0001 	biceq.w	r0, r0, #1
 80006e8:	ea40 0003 	orr.w	r0, r0, r3
 80006ec:	4770      	bx	lr
 80006ee:	0049      	lsls	r1, r1, #1
 80006f0:	eb40 0000 	adc.w	r0, r0, r0
 80006f4:	3a01      	subs	r2, #1
 80006f6:	bf28      	it	cs
 80006f8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80006fc:	d2ed      	bcs.n	80006da <__addsf3+0x92>
 80006fe:	fab0 fc80 	clz	ip, r0
 8000702:	f1ac 0c08 	sub.w	ip, ip, #8
 8000706:	ebb2 020c 	subs.w	r2, r2, ip
 800070a:	fa00 f00c 	lsl.w	r0, r0, ip
 800070e:	bfaa      	itet	ge
 8000710:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000714:	4252      	neglt	r2, r2
 8000716:	4318      	orrge	r0, r3
 8000718:	bfbc      	itt	lt
 800071a:	40d0      	lsrlt	r0, r2
 800071c:	4318      	orrlt	r0, r3
 800071e:	4770      	bx	lr
 8000720:	f092 0f00 	teq	r2, #0
 8000724:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000728:	bf06      	itte	eq
 800072a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800072e:	3201      	addeq	r2, #1
 8000730:	3b01      	subne	r3, #1
 8000732:	e7b5      	b.n	80006a0 <__addsf3+0x58>
 8000734:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000738:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800073c:	bf18      	it	ne
 800073e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000742:	d021      	beq.n	8000788 <__addsf3+0x140>
 8000744:	ea92 0f03 	teq	r2, r3
 8000748:	d004      	beq.n	8000754 <__addsf3+0x10c>
 800074a:	f092 0f00 	teq	r2, #0
 800074e:	bf08      	it	eq
 8000750:	4608      	moveq	r0, r1
 8000752:	4770      	bx	lr
 8000754:	ea90 0f01 	teq	r0, r1
 8000758:	bf1c      	itt	ne
 800075a:	2000      	movne	r0, #0
 800075c:	4770      	bxne	lr
 800075e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000762:	d104      	bne.n	800076e <__addsf3+0x126>
 8000764:	0040      	lsls	r0, r0, #1
 8000766:	bf28      	it	cs
 8000768:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800076c:	4770      	bx	lr
 800076e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000772:	bf3c      	itt	cc
 8000774:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000778:	4770      	bxcc	lr
 800077a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800077e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000782:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000786:	4770      	bx	lr
 8000788:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800078c:	bf16      	itet	ne
 800078e:	4608      	movne	r0, r1
 8000790:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000794:	4601      	movne	r1, r0
 8000796:	0242      	lsls	r2, r0, #9
 8000798:	bf06      	itte	eq
 800079a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800079e:	ea90 0f01 	teqeq	r0, r1
 80007a2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80007a6:	4770      	bx	lr

080007a8 <__aeabi_ui2f>:
 80007a8:	f04f 0300 	mov.w	r3, #0
 80007ac:	e004      	b.n	80007b8 <__aeabi_i2f+0x8>
 80007ae:	bf00      	nop

080007b0 <__aeabi_i2f>:
 80007b0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80007b4:	bf48      	it	mi
 80007b6:	4240      	negmi	r0, r0
 80007b8:	ea5f 0c00 	movs.w	ip, r0
 80007bc:	bf08      	it	eq
 80007be:	4770      	bxeq	lr
 80007c0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80007c4:	4601      	mov	r1, r0
 80007c6:	f04f 0000 	mov.w	r0, #0
 80007ca:	e01c      	b.n	8000806 <__aeabi_l2f+0x2a>

080007cc <__aeabi_ul2f>:
 80007cc:	ea50 0201 	orrs.w	r2, r0, r1
 80007d0:	bf08      	it	eq
 80007d2:	4770      	bxeq	lr
 80007d4:	f04f 0300 	mov.w	r3, #0
 80007d8:	e00a      	b.n	80007f0 <__aeabi_l2f+0x14>
 80007da:	bf00      	nop

080007dc <__aeabi_l2f>:
 80007dc:	ea50 0201 	orrs.w	r2, r0, r1
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80007e8:	d502      	bpl.n	80007f0 <__aeabi_l2f+0x14>
 80007ea:	4240      	negs	r0, r0
 80007ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f0:	ea5f 0c01 	movs.w	ip, r1
 80007f4:	bf02      	ittt	eq
 80007f6:	4684      	moveq	ip, r0
 80007f8:	4601      	moveq	r1, r0
 80007fa:	2000      	moveq	r0, #0
 80007fc:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000800:	bf08      	it	eq
 8000802:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000806:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800080a:	fabc f28c 	clz	r2, ip
 800080e:	3a08      	subs	r2, #8
 8000810:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000814:	db10      	blt.n	8000838 <__aeabi_l2f+0x5c>
 8000816:	fa01 fc02 	lsl.w	ip, r1, r2
 800081a:	4463      	add	r3, ip
 800081c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000820:	f1c2 0220 	rsb	r2, r2, #32
 8000824:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000828:	fa20 f202 	lsr.w	r2, r0, r2
 800082c:	eb43 0002 	adc.w	r0, r3, r2
 8000830:	bf08      	it	eq
 8000832:	f020 0001 	biceq.w	r0, r0, #1
 8000836:	4770      	bx	lr
 8000838:	f102 0220 	add.w	r2, r2, #32
 800083c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000840:	f1c2 0220 	rsb	r2, r2, #32
 8000844:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000848:	fa21 f202 	lsr.w	r2, r1, r2
 800084c:	eb43 0002 	adc.w	r0, r3, r2
 8000850:	bf08      	it	eq
 8000852:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000856:	4770      	bx	lr

08000858 <__aeabi_fmul>:
 8000858:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800085c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000860:	bf1e      	ittt	ne
 8000862:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000866:	ea92 0f0c 	teqne	r2, ip
 800086a:	ea93 0f0c 	teqne	r3, ip
 800086e:	d06f      	beq.n	8000950 <__aeabi_fmul+0xf8>
 8000870:	441a      	add	r2, r3
 8000872:	ea80 0c01 	eor.w	ip, r0, r1
 8000876:	0240      	lsls	r0, r0, #9
 8000878:	bf18      	it	ne
 800087a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800087e:	d01e      	beq.n	80008be <__aeabi_fmul+0x66>
 8000880:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000884:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000888:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800088c:	fba0 3101 	umull	r3, r1, r0, r1
 8000890:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000894:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000898:	bf3e      	ittt	cc
 800089a:	0049      	lslcc	r1, r1, #1
 800089c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008a0:	005b      	lslcc	r3, r3, #1
 80008a2:	ea40 0001 	orr.w	r0, r0, r1
 80008a6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80008aa:	2afd      	cmp	r2, #253	@ 0xfd
 80008ac:	d81d      	bhi.n	80008ea <__aeabi_fmul+0x92>
 80008ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80008b2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008b6:	bf08      	it	eq
 80008b8:	f020 0001 	biceq.w	r0, r0, #1
 80008bc:	4770      	bx	lr
 80008be:	f090 0f00 	teq	r0, #0
 80008c2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80008c6:	bf08      	it	eq
 80008c8:	0249      	lsleq	r1, r1, #9
 80008ca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008ce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008d2:	3a7f      	subs	r2, #127	@ 0x7f
 80008d4:	bfc2      	ittt	gt
 80008d6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80008da:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80008de:	4770      	bxgt	lr
 80008e0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008e4:	f04f 0300 	mov.w	r3, #0
 80008e8:	3a01      	subs	r2, #1
 80008ea:	dc5d      	bgt.n	80009a8 <__aeabi_fmul+0x150>
 80008ec:	f112 0f19 	cmn.w	r2, #25
 80008f0:	bfdc      	itt	le
 80008f2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80008f6:	4770      	bxle	lr
 80008f8:	f1c2 0200 	rsb	r2, r2, #0
 80008fc:	0041      	lsls	r1, r0, #1
 80008fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000902:	f1c2 0220 	rsb	r2, r2, #32
 8000906:	fa00 fc02 	lsl.w	ip, r0, r2
 800090a:	ea5f 0031 	movs.w	r0, r1, rrx
 800090e:	f140 0000 	adc.w	r0, r0, #0
 8000912:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000916:	bf08      	it	eq
 8000918:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800091c:	4770      	bx	lr
 800091e:	f092 0f00 	teq	r2, #0
 8000922:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000926:	bf02      	ittt	eq
 8000928:	0040      	lsleq	r0, r0, #1
 800092a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800092e:	3a01      	subeq	r2, #1
 8000930:	d0f9      	beq.n	8000926 <__aeabi_fmul+0xce>
 8000932:	ea40 000c 	orr.w	r0, r0, ip
 8000936:	f093 0f00 	teq	r3, #0
 800093a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800093e:	bf02      	ittt	eq
 8000940:	0049      	lsleq	r1, r1, #1
 8000942:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000946:	3b01      	subeq	r3, #1
 8000948:	d0f9      	beq.n	800093e <__aeabi_fmul+0xe6>
 800094a:	ea41 010c 	orr.w	r1, r1, ip
 800094e:	e78f      	b.n	8000870 <__aeabi_fmul+0x18>
 8000950:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000954:	ea92 0f0c 	teq	r2, ip
 8000958:	bf18      	it	ne
 800095a:	ea93 0f0c 	teqne	r3, ip
 800095e:	d00a      	beq.n	8000976 <__aeabi_fmul+0x11e>
 8000960:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000964:	bf18      	it	ne
 8000966:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800096a:	d1d8      	bne.n	800091e <__aeabi_fmul+0xc6>
 800096c:	ea80 0001 	eor.w	r0, r0, r1
 8000970:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000974:	4770      	bx	lr
 8000976:	f090 0f00 	teq	r0, #0
 800097a:	bf17      	itett	ne
 800097c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000980:	4608      	moveq	r0, r1
 8000982:	f091 0f00 	teqne	r1, #0
 8000986:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800098a:	d014      	beq.n	80009b6 <__aeabi_fmul+0x15e>
 800098c:	ea92 0f0c 	teq	r2, ip
 8000990:	d101      	bne.n	8000996 <__aeabi_fmul+0x13e>
 8000992:	0242      	lsls	r2, r0, #9
 8000994:	d10f      	bne.n	80009b6 <__aeabi_fmul+0x15e>
 8000996:	ea93 0f0c 	teq	r3, ip
 800099a:	d103      	bne.n	80009a4 <__aeabi_fmul+0x14c>
 800099c:	024b      	lsls	r3, r1, #9
 800099e:	bf18      	it	ne
 80009a0:	4608      	movne	r0, r1
 80009a2:	d108      	bne.n	80009b6 <__aeabi_fmul+0x15e>
 80009a4:	ea80 0001 	eor.w	r0, r0, r1
 80009a8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80009ac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009b0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009b4:	4770      	bx	lr
 80009b6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009ba:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80009be:	4770      	bx	lr

080009c0 <__aeabi_fdiv>:
 80009c0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80009c4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009c8:	bf1e      	ittt	ne
 80009ca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009ce:	ea92 0f0c 	teqne	r2, ip
 80009d2:	ea93 0f0c 	teqne	r3, ip
 80009d6:	d069      	beq.n	8000aac <__aeabi_fdiv+0xec>
 80009d8:	eba2 0203 	sub.w	r2, r2, r3
 80009dc:	ea80 0c01 	eor.w	ip, r0, r1
 80009e0:	0249      	lsls	r1, r1, #9
 80009e2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80009e6:	d037      	beq.n	8000a58 <__aeabi_fdiv+0x98>
 80009e8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80009ec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80009f0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80009f4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80009f8:	428b      	cmp	r3, r1
 80009fa:	bf38      	it	cc
 80009fc:	005b      	lslcc	r3, r3, #1
 80009fe:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000a02:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000a06:	428b      	cmp	r3, r1
 8000a08:	bf24      	itt	cs
 8000a0a:	1a5b      	subcs	r3, r3, r1
 8000a0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a14:	bf24      	itt	cs
 8000a16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a22:	bf24      	itt	cs
 8000a24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a30:	bf24      	itt	cs
 8000a32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a3a:	011b      	lsls	r3, r3, #4
 8000a3c:	bf18      	it	ne
 8000a3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a42:	d1e0      	bne.n	8000a06 <__aeabi_fdiv+0x46>
 8000a44:	2afd      	cmp	r2, #253	@ 0xfd
 8000a46:	f63f af50 	bhi.w	80008ea <__aeabi_fmul+0x92>
 8000a4a:	428b      	cmp	r3, r1
 8000a4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000a5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a60:	327f      	adds	r2, #127	@ 0x7f
 8000a62:	bfc2      	ittt	gt
 8000a64:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000a68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a6c:	4770      	bxgt	lr
 8000a6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a72:	f04f 0300 	mov.w	r3, #0
 8000a76:	3a01      	subs	r2, #1
 8000a78:	e737      	b.n	80008ea <__aeabi_fmul+0x92>
 8000a7a:	f092 0f00 	teq	r2, #0
 8000a7e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000a82:	bf02      	ittt	eq
 8000a84:	0040      	lsleq	r0, r0, #1
 8000a86:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000a8a:	3a01      	subeq	r2, #1
 8000a8c:	d0f9      	beq.n	8000a82 <__aeabi_fdiv+0xc2>
 8000a8e:	ea40 000c 	orr.w	r0, r0, ip
 8000a92:	f093 0f00 	teq	r3, #0
 8000a96:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a9a:	bf02      	ittt	eq
 8000a9c:	0049      	lsleq	r1, r1, #1
 8000a9e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000aa2:	3b01      	subeq	r3, #1
 8000aa4:	d0f9      	beq.n	8000a9a <__aeabi_fdiv+0xda>
 8000aa6:	ea41 010c 	orr.w	r1, r1, ip
 8000aaa:	e795      	b.n	80009d8 <__aeabi_fdiv+0x18>
 8000aac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ab0:	ea92 0f0c 	teq	r2, ip
 8000ab4:	d108      	bne.n	8000ac8 <__aeabi_fdiv+0x108>
 8000ab6:	0242      	lsls	r2, r0, #9
 8000ab8:	f47f af7d 	bne.w	80009b6 <__aeabi_fmul+0x15e>
 8000abc:	ea93 0f0c 	teq	r3, ip
 8000ac0:	f47f af70 	bne.w	80009a4 <__aeabi_fmul+0x14c>
 8000ac4:	4608      	mov	r0, r1
 8000ac6:	e776      	b.n	80009b6 <__aeabi_fmul+0x15e>
 8000ac8:	ea93 0f0c 	teq	r3, ip
 8000acc:	d104      	bne.n	8000ad8 <__aeabi_fdiv+0x118>
 8000ace:	024b      	lsls	r3, r1, #9
 8000ad0:	f43f af4c 	beq.w	800096c <__aeabi_fmul+0x114>
 8000ad4:	4608      	mov	r0, r1
 8000ad6:	e76e      	b.n	80009b6 <__aeabi_fmul+0x15e>
 8000ad8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000adc:	bf18      	it	ne
 8000ade:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ae2:	d1ca      	bne.n	8000a7a <__aeabi_fdiv+0xba>
 8000ae4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000ae8:	f47f af5c 	bne.w	80009a4 <__aeabi_fmul+0x14c>
 8000aec:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000af0:	f47f af3c 	bne.w	800096c <__aeabi_fmul+0x114>
 8000af4:	e75f      	b.n	80009b6 <__aeabi_fmul+0x15e>
 8000af6:	bf00      	nop

08000af8 <__gesf2>:
 8000af8:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000afc:	e006      	b.n	8000b0c <__cmpsf2+0x4>
 8000afe:	bf00      	nop

08000b00 <__lesf2>:
 8000b00:	f04f 0c01 	mov.w	ip, #1
 8000b04:	e002      	b.n	8000b0c <__cmpsf2+0x4>
 8000b06:	bf00      	nop

08000b08 <__cmpsf2>:
 8000b08:	f04f 0c01 	mov.w	ip, #1
 8000b0c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b10:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b14:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b1c:	bf18      	it	ne
 8000b1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b22:	d011      	beq.n	8000b48 <__cmpsf2+0x40>
 8000b24:	b001      	add	sp, #4
 8000b26:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b2a:	bf18      	it	ne
 8000b2c:	ea90 0f01 	teqne	r0, r1
 8000b30:	bf58      	it	pl
 8000b32:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b36:	bf88      	it	hi
 8000b38:	17c8      	asrhi	r0, r1, #31
 8000b3a:	bf38      	it	cc
 8000b3c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b40:	bf18      	it	ne
 8000b42:	f040 0001 	orrne.w	r0, r0, #1
 8000b46:	4770      	bx	lr
 8000b48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b4c:	d102      	bne.n	8000b54 <__cmpsf2+0x4c>
 8000b4e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b52:	d105      	bne.n	8000b60 <__cmpsf2+0x58>
 8000b54:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b58:	d1e4      	bne.n	8000b24 <__cmpsf2+0x1c>
 8000b5a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b5e:	d0e1      	beq.n	8000b24 <__cmpsf2+0x1c>
 8000b60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_cfrcmple>:
 8000b68:	4684      	mov	ip, r0
 8000b6a:	4608      	mov	r0, r1
 8000b6c:	4661      	mov	r1, ip
 8000b6e:	e7ff      	b.n	8000b70 <__aeabi_cfcmpeq>

08000b70 <__aeabi_cfcmpeq>:
 8000b70:	b50f      	push	{r0, r1, r2, r3, lr}
 8000b72:	f7ff ffc9 	bl	8000b08 <__cmpsf2>
 8000b76:	2800      	cmp	r0, #0
 8000b78:	bf48      	it	mi
 8000b7a:	f110 0f00 	cmnmi.w	r0, #0
 8000b7e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000b80 <__aeabi_fcmpeq>:
 8000b80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b84:	f7ff fff4 	bl	8000b70 <__aeabi_cfcmpeq>
 8000b88:	bf0c      	ite	eq
 8000b8a:	2001      	moveq	r0, #1
 8000b8c:	2000      	movne	r0, #0
 8000b8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b92:	bf00      	nop

08000b94 <__aeabi_fcmplt>:
 8000b94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b98:	f7ff ffea 	bl	8000b70 <__aeabi_cfcmpeq>
 8000b9c:	bf34      	ite	cc
 8000b9e:	2001      	movcc	r0, #1
 8000ba0:	2000      	movcs	r0, #0
 8000ba2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_fcmple>:
 8000ba8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bac:	f7ff ffe0 	bl	8000b70 <__aeabi_cfcmpeq>
 8000bb0:	bf94      	ite	ls
 8000bb2:	2001      	movls	r0, #1
 8000bb4:	2000      	movhi	r0, #0
 8000bb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bba:	bf00      	nop

08000bbc <__aeabi_fcmpge>:
 8000bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc0:	f7ff ffd2 	bl	8000b68 <__aeabi_cfrcmple>
 8000bc4:	bf94      	ite	ls
 8000bc6:	2001      	movls	r0, #1
 8000bc8:	2000      	movhi	r0, #0
 8000bca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bce:	bf00      	nop

08000bd0 <__aeabi_fcmpgt>:
 8000bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd4:	f7ff ffc8 	bl	8000b68 <__aeabi_cfrcmple>
 8000bd8:	bf34      	ite	cc
 8000bda:	2001      	movcc	r0, #1
 8000bdc:	2000      	movcs	r0, #0
 8000bde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be2:	bf00      	nop

08000be4 <__aeabi_f2iz>:
 8000be4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000be8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000bec:	d30f      	bcc.n	8000c0e <__aeabi_f2iz+0x2a>
 8000bee:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000bf2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000bf6:	d90d      	bls.n	8000c14 <__aeabi_f2iz+0x30>
 8000bf8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000bfc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c00:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c04:	fa23 f002 	lsr.w	r0, r3, r2
 8000c08:	bf18      	it	ne
 8000c0a:	4240      	negne	r0, r0
 8000c0c:	4770      	bx	lr
 8000c0e:	f04f 0000 	mov.w	r0, #0
 8000c12:	4770      	bx	lr
 8000c14:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000c18:	d101      	bne.n	8000c1e <__aeabi_f2iz+0x3a>
 8000c1a:	0242      	lsls	r2, r0, #9
 8000c1c:	d105      	bne.n	8000c2a <__aeabi_f2iz+0x46>
 8000c1e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000c22:	bf08      	it	eq
 8000c24:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <Bsp_Led_Show_State_Handle>:

/**
 * @brief Toggles LED to show status, called every 10ms, blinks every 200ms.
 */
void Bsp_Led_Show_State_Handle(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
    static uint8_t led_count = 0;
    led_count++;
 8000c34:	4b09      	ldr	r3, [pc, #36]	@ (8000c5c <Bsp_Led_Show_State_Handle+0x2c>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	4b07      	ldr	r3, [pc, #28]	@ (8000c5c <Bsp_Led_Show_State_Handle+0x2c>)
 8000c3e:	701a      	strb	r2, [r3, #0]
    if (led_count > 20)
 8000c40:	4b06      	ldr	r3, [pc, #24]	@ (8000c5c <Bsp_Led_Show_State_Handle+0x2c>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b14      	cmp	r3, #20
 8000c46:	d907      	bls.n	8000c58 <Bsp_Led_Show_State_Handle+0x28>
    {
        led_count = 0;
 8000c48:	4b04      	ldr	r3, [pc, #16]	@ (8000c5c <Bsp_Led_Show_State_Handle+0x2c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]
        LED_TOGGLE();
 8000c4e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c52:	4803      	ldr	r0, [pc, #12]	@ (8000c60 <Bsp_Led_Show_State_Handle+0x30>)
 8000c54:	f003 fb61 	bl	800431a <HAL_GPIO_TogglePin>
    }
}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000090 	.word	0x20000090
 8000c60:	40011000 	.word	0x40011000

08000c64 <Bsp_Init>:

/**
 * @brief Initialize peripherals (servos, motors, I2C slave, buzzer).
 */
void Bsp_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
    I2C_Slave_Init();
 8000c68:	f001 f9dc 	bl	8002024 <I2C_Slave_Init>
    PwmServo_Init();
 8000c6c:	f001 f8e0 	bl	8001e30 <PwmServo_Init>
    Motor_Init();
 8000c70:	f000 fd7a 	bl	8001768 <Motor_Init>
    Encoder_Init();
 8000c74:	f000 fa2a 	bl	80010cc <Encoder_Init>
    PID_Param_Init();
 8000c78:	f000 fe7e 	bl	8001978 <PID_Param_Init>
    USART1_Init();
 8000c7c:	f001 f98a 	bl	8001f94 <USART1_Init>
    Beep_On_Time(50);
 8000c80:	2032      	movs	r0, #50	@ 0x32
 8000c82:	f000 f927 	bl	8000ed4 <Beep_On_Time>
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <Bsp_Loop>:
/**
 * @brief Main loop function, called repeatedly in main.c.
 * Handles button events, I2C commands, LED, and buzzer timeout.
 */
void Bsp_Loop(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
	Motion_Handle();
 8000c92:	f000 fd17 	bl	80016c4 <Motion_Handle>
    static uint8_t key_state = 0;
    static uint8_t empty_buffer_count = 0;  // Counter for consecutive empty buffer occurrences
    const uint8_t EMPTY_BUFFER_THRESHOLD = 16;  // Threshold for connection loss (10 consecutive empties ~100ms)
 8000c96:	2310      	movs	r3, #16
 8000c98:	73fb      	strb	r3, [r7, #15]

    // Detect button down events
    if (Key1_State(KEY_MODE_ONE_TIME))
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f000 fa42 	bl	8001124 <Key1_State>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d047      	beq.n	8000d36 <Bsp_Loop+0xaa>
    {
        Beep_On_Time(50);
 8000ca6:	2032      	movs	r0, #50	@ 0x32
 8000ca8:	f000 f914 	bl	8000ed4 <Beep_On_Time>
        if (key_state)
 8000cac:	4b66      	ldr	r3, [pc, #408]	@ (8000e48 <Bsp_Loop+0x1bc>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d031      	beq.n	8000d18 <Bsp_Loop+0x8c>
        {
            key_state = 0;
 8000cb4:	4b64      	ldr	r3, [pc, #400]	@ (8000e48 <Bsp_Loop+0x1bc>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
            PwmServo_Set_Angle_All(50, 50, 50, 50);
 8000cba:	2332      	movs	r3, #50	@ 0x32
 8000cbc:	2232      	movs	r2, #50	@ 0x32
 8000cbe:	2132      	movs	r1, #50	@ 0x32
 8000cc0:	2032      	movs	r0, #50	@ 0x32
 8000cc2:	f001 f905 	bl	8001ed0 <PwmServo_Set_Angle_All>
            Motion_Ctrl(500,0,0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2100      	movs	r1, #0
 8000cca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000cce:	f000 fc3b 	bl	8001548 <Motion_Ctrl>
            HAL_Delay(500);
 8000cd2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000cd6:	f002 fc27 	bl	8003528 <HAL_Delay>
            Motion_Ctrl(0,500,0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	f000 fc31 	bl	8001548 <Motion_Ctrl>
            HAL_Delay(500);
 8000ce6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000cea:	f002 fc1d 	bl	8003528 <HAL_Delay>
            Motion_Ctrl(0,-500,0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	4956      	ldr	r1, [pc, #344]	@ (8000e4c <Bsp_Loop+0x1c0>)
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f000 fc28 	bl	8001548 <Motion_Ctrl>
            HAL_Delay(500);
 8000cf8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000cfc:	f002 fc14 	bl	8003528 <HAL_Delay>
            Motion_Ctrl(-500,	0,0);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2100      	movs	r1, #0
 8000d04:	4851      	ldr	r0, [pc, #324]	@ (8000e4c <Bsp_Loop+0x1c0>)
 8000d06:	f000 fc1f 	bl	8001548 <Motion_Ctrl>
            printf("key state: %d\n", key_state );
 8000d0a:	4b4f      	ldr	r3, [pc, #316]	@ (8000e48 <Bsp_Loop+0x1bc>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	4619      	mov	r1, r3
 8000d10:	484f      	ldr	r0, [pc, #316]	@ (8000e50 <Bsp_Loop+0x1c4>)
 8000d12:	f007 ff45 	bl	8008ba0 <iprintf>
 8000d16:	e00e      	b.n	8000d36 <Bsp_Loop+0xaa>
        }
        else
        {
            key_state = 1;
 8000d18:	4b4b      	ldr	r3, [pc, #300]	@ (8000e48 <Bsp_Loop+0x1bc>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	701a      	strb	r2, [r3, #0]
            PwmServo_Set_Angle_All(90, 90, 90, 90);
 8000d1e:	235a      	movs	r3, #90	@ 0x5a
 8000d20:	225a      	movs	r2, #90	@ 0x5a
 8000d22:	215a      	movs	r1, #90	@ 0x5a
 8000d24:	205a      	movs	r0, #90	@ 0x5a
 8000d26:	f001 f8d3 	bl	8001ed0 <PwmServo_Set_Angle_All>

            printf("key state: %d\n", key_state );
 8000d2a:	4b47      	ldr	r3, [pc, #284]	@ (8000e48 <Bsp_Loop+0x1bc>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4847      	ldr	r0, [pc, #284]	@ (8000e50 <Bsp_Loop+0x1c4>)
 8000d32:	f007 ff35 	bl	8008ba0 <iprintf>
        }
    }

    // Process I2C commands
    Command_t cmd;
    if (I2C_Get_Next_Command(&cmd))
 8000d36:	463b      	mov	r3, r7
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f001 f991 	bl	8002060 <I2C_Get_Next_Command>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d053      	beq.n	8000dec <Bsp_Loop+0x160>
    {
        empty_buffer_count = 0;  // Reset counter on successful command
 8000d44:	4b43      	ldr	r3, [pc, #268]	@ (8000e54 <Bsp_Loop+0x1c8>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	701a      	strb	r2, [r3, #0]
        if (cmd.kill)
 8000d4a:	783b      	ldrb	r3, [r7, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d00c      	beq.n	8000d6a <Bsp_Loop+0xde>
        {
            printf("KILL SWITCH ACTIVATED - Stopping all motors and servos\n");
 8000d50:	4841      	ldr	r0, [pc, #260]	@ (8000e58 <Bsp_Loop+0x1cc>)
 8000d52:	f007 ff95 	bl	8008c80 <puts>
            Motion_Stop(STOP_BRAKE);
 8000d56:	2001      	movs	r0, #1
 8000d58:	f000 fa70 	bl	800123c <Motion_Stop>
            PwmServo_Set_Angle_All(90, 90, 90, 90);  // Safe values
 8000d5c:	235a      	movs	r3, #90	@ 0x5a
 8000d5e:	225a      	movs	r2, #90	@ 0x5a
 8000d60:	215a      	movs	r1, #90	@ 0x5a
 8000d62:	205a      	movs	r0, #90	@ 0x5a
 8000d64:	f001 f8b4 	bl	8001ed0 <PwmServo_Set_Angle_All>
 8000d68:	e062      	b.n	8000e30 <Bsp_Loop+0x1a4>
        }
        else
        {
            // TODO: If all motor values are 0, stop immediately (brake/coast all motors)
            if (cmd.m1 == 0 && cmd.m2 == 0 && cmd.m3 == 0 && cmd.m4 == 0) {
 8000d6a:	f9b7 3001 	ldrsh.w	r3, [r7, #1]
 8000d6e:	b21b      	sxth	r3, r3
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d115      	bne.n	8000da0 <Bsp_Loop+0x114>
 8000d74:	f9b7 3003 	ldrsh.w	r3, [r7, #3]
 8000d78:	b21b      	sxth	r3, r3
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d110      	bne.n	8000da0 <Bsp_Loop+0x114>
 8000d7e:	f9b7 3005 	ldrsh.w	r3, [r7, #5]
 8000d82:	b21b      	sxth	r3, r3
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d10b      	bne.n	8000da0 <Bsp_Loop+0x114>
 8000d88:	f9b7 3007 	ldrsh.w	r3, [r7, #7]
 8000d8c:	b21b      	sxth	r3, r3
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d106      	bne.n	8000da0 <Bsp_Loop+0x114>
            	Motion_Stop(STOP_BRAKE);
 8000d92:	2001      	movs	r0, #1
 8000d94:	f000 fa52 	bl	800123c <Motion_Stop>
                printf("All motors stopped (zero PWM command)\n");
 8000d98:	4830      	ldr	r0, [pc, #192]	@ (8000e5c <Bsp_Loop+0x1d0>)
 8000d9a:	f007 ff71 	bl	8008c80 <puts>
 8000d9e:	e047      	b.n	8000e30 <Bsp_Loop+0x1a4>
            } else {
            	printf("Got command:\n");
 8000da0:	482f      	ldr	r0, [pc, #188]	@ (8000e60 <Bsp_Loop+0x1d4>)
 8000da2:	f007 ff6d 	bl	8008c80 <puts>
            	Motion_Set_Speed(cmd.m1, cmd.m2, cmd.m3, cmd.m4);
 8000da6:	f9b7 3001 	ldrsh.w	r3, [r7, #1]
 8000daa:	b218      	sxth	r0, r3
 8000dac:	f9b7 3003 	ldrsh.w	r3, [r7, #3]
 8000db0:	b219      	sxth	r1, r3
 8000db2:	f9b7 3005 	ldrsh.w	r3, [r7, #5]
 8000db6:	b21a      	sxth	r2, r3
 8000db8:	f9b7 3007 	ldrsh.w	r3, [r7, #7]
 8000dbc:	b21b      	sxth	r3, r3
 8000dbe:	f000 fa59 	bl	8001274 <Motion_Set_Speed>
                PwmServo_Set_Angle(1, cmd.s1);
 8000dc2:	7a7b      	ldrb	r3, [r7, #9]
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	f001 f85a 	bl	8001e80 <PwmServo_Set_Angle>
                PwmServo_Set_Angle(2, cmd.s2);
 8000dcc:	7abb      	ldrb	r3, [r7, #10]
 8000dce:	4619      	mov	r1, r3
 8000dd0:	2002      	movs	r0, #2
 8000dd2:	f001 f855 	bl	8001e80 <PwmServo_Set_Angle>
                PwmServo_Set_Angle(3, cmd.s3);
 8000dd6:	7afb      	ldrb	r3, [r7, #11]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	2003      	movs	r0, #3
 8000ddc:	f001 f850 	bl	8001e80 <PwmServo_Set_Angle>
                PwmServo_Set_Angle(4, cmd.s4);
 8000de0:	7b3b      	ldrb	r3, [r7, #12]
 8000de2:	4619      	mov	r1, r3
 8000de4:	2004      	movs	r0, #4
 8000de6:	f001 f84b 	bl	8001e80 <PwmServo_Set_Angle>
 8000dea:	e021      	b.n	8000e30 <Bsp_Loop+0x1a4>
            }
        }
    }
    else
    {
        empty_buffer_count++;  // Increment counter on empty buffer
 8000dec:	4b19      	ldr	r3, [pc, #100]	@ (8000e54 <Bsp_Loop+0x1c8>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	3301      	adds	r3, #1
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	4b17      	ldr	r3, [pc, #92]	@ (8000e54 <Bsp_Loop+0x1c8>)
 8000df6:	701a      	strb	r2, [r3, #0]
        if (empty_buffer_count >= EMPTY_BUFFER_THRESHOLD)
 8000df8:	4b16      	ldr	r3, [pc, #88]	@ (8000e54 <Bsp_Loop+0x1c8>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	7bfa      	ldrb	r2, [r7, #15]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d816      	bhi.n	8000e30 <Bsp_Loop+0x1a4>
        {
            printf("I2C connection lost (ring buffer empty for %d cycles) - Stopping all motors and resetting\n", EMPTY_BUFFER_THRESHOLD);
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	4619      	mov	r1, r3
 8000e06:	4817      	ldr	r0, [pc, #92]	@ (8000e64 <Bsp_Loop+0x1d8>)
 8000e08:	f007 feca 	bl	8008ba0 <iprintf>
            Motion_Stop(STOP_BRAKE);  // Stop motors with brake
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	f000 fa15 	bl	800123c <Motion_Stop>
            PID_Clear_Motor(MAX_MOTOR);  // Reset PID states for all motors
 8000e12:	2004      	movs	r0, #4
 8000e14:	f000 fed8 	bl	8001bc8 <PID_Clear_Motor>
            empty_buffer_count = 0;  // Reset counter after handling
 8000e18:	4b0e      	ldr	r3, [pc, #56]	@ (8000e54 <Bsp_Loop+0x1c8>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	701a      	strb	r2, [r3, #0]
            PwmServo_Set_Angle_All(90, 90, 90, 90);
 8000e1e:	235a      	movs	r3, #90	@ 0x5a
 8000e20:	225a      	movs	r2, #90	@ 0x5a
 8000e22:	215a      	movs	r1, #90	@ 0x5a
 8000e24:	205a      	movs	r0, #90	@ 0x5a
 8000e26:	f001 f853 	bl	8001ed0 <PwmServo_Set_Angle_All>
//            I2C_Slave_Init();
            HAL_I2C_EnableListen_IT(&hi2c2);
 8000e2a:	480f      	ldr	r0, [pc, #60]	@ (8000e68 <Bsp_Loop+0x1dc>)
 8000e2c:	f003 fc58 	bl	80046e0 <HAL_I2C_EnableListen_IT>
        }
    }

    Bsp_Led_Show_State_Handle();
 8000e30:	f7ff fefe 	bl	8000c30 <Bsp_Led_Show_State_Handle>
    Beep_Timeout_Close_Handle();
 8000e34:	f000 f88e 	bl	8000f54 <Beep_Timeout_Close_Handle>
    HAL_Delay(10);
 8000e38:	200a      	movs	r0, #10
 8000e3a:	f002 fb75 	bl	8003528 <HAL_Delay>
}
 8000e3e:	bf00      	nop
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000091 	.word	0x20000091
 8000e4c:	fffffe0c 	.word	0xfffffe0c
 8000e50:	080099d8 	.word	0x080099d8
 8000e54:	20000092 	.word	0x20000092
 8000e58:	080099e8 	.word	0x080099e8
 8000e5c:	08009a20 	.word	0x08009a20
 8000e60:	08009a48 	.word	0x08009a48
 8000e64:	08009a58 	.word	0x08009a58
 8000e68:	20001bb8 	.word	0x20001bb8

08000e6c <Beep_Set_Time>:
uint8_t beep_state = 0;

// 刷新蜂鸣器打开的时间
// Refreshes the buzzer time
static void Beep_Set_Time(uint16_t time)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	80fb      	strh	r3, [r7, #6]
	beep_on_time = time;
 8000e76:	4a04      	ldr	r2, [pc, #16]	@ (8000e88 <Beep_Set_Time+0x1c>)
 8000e78:	88fb      	ldrh	r3, [r7, #6]
 8000e7a:	8013      	strh	r3, [r2, #0]
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	20000094 	.word	0x20000094

08000e8c <Beep_Get_Time>:

// 获取当前蜂鸣器打开的剩余时间
// Gets the remaining time of the current buzzer on
static uint16_t Beep_Get_Time(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
	return beep_on_time;
 8000e90:	4b02      	ldr	r3, [pc, #8]	@ (8000e9c <Beep_Get_Time+0x10>)
 8000e92:	881b      	ldrh	r3, [r3, #0]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr
 8000e9c:	20000094 	.word	0x20000094

08000ea0 <Beep_Set_State>:

// 刷新蜂鸣器的状态
// Refreshes the buzzer status
static void Beep_Set_State(uint8_t state)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
	beep_state = state;
 8000eaa:	4a04      	ldr	r2, [pc, #16]	@ (8000ebc <Beep_Set_State+0x1c>)
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	7013      	strb	r3, [r2, #0]
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000096 	.word	0x20000096

08000ec0 <Beep_Get_State>:

// 获取蜂鸣器的状态
// Gets the status of the buzzer
static uint8_t Beep_Get_State(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
	return beep_state;
 8000ec4:	4b02      	ldr	r3, [pc, #8]	@ (8000ed0 <Beep_Get_State+0x10>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr
 8000ed0:	20000096 	.word	0x20000096

08000ed4 <Beep_On_Time>:

// 设置蜂鸣器开启时间，time=0时关闭，time=1时一直响，time>=10，延迟xx毫秒后自动关闭
// Set the buzzer start time. The buzzer is disabled when time is 0, keeps ringing when time is 1, and automatically shuts down after time>=10  
void Beep_On_Time(uint16_t time)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	80fb      	strh	r3, [r7, #6]
	if (time == BEEP_STATE_ON_ALWAYS)
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d10b      	bne.n	8000efc <Beep_On_Time+0x28>
	{
		Beep_Set_State(BEEP_STATE_ON_ALWAYS);
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	f7ff ffdb 	bl	8000ea0 <Beep_Set_State>
		Beep_Set_Time(0);
 8000eea:	2000      	movs	r0, #0
 8000eec:	f7ff ffbe 	bl	8000e6c <Beep_Set_Time>
		BEEP_ON();
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	2120      	movs	r1, #32
 8000ef4:	4815      	ldr	r0, [pc, #84]	@ (8000f4c <Beep_On_Time+0x78>)
 8000ef6:	f003 f9f8 	bl	80042ea <HAL_GPIO_WritePin>
			Beep_Set_State(BEEP_STATE_ON_DELAY);
			Beep_Set_Time(time / 10);
			BEEP_ON();
		}
	}
}
 8000efa:	e022      	b.n	8000f42 <Beep_On_Time+0x6e>
	else if (time == BEEP_STATE_OFF)
 8000efc:	88fb      	ldrh	r3, [r7, #6]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d10b      	bne.n	8000f1a <Beep_On_Time+0x46>
		Beep_Set_State(BEEP_STATE_OFF);
 8000f02:	2000      	movs	r0, #0
 8000f04:	f7ff ffcc 	bl	8000ea0 <Beep_Set_State>
		Beep_Set_Time(0);
 8000f08:	2000      	movs	r0, #0
 8000f0a:	f7ff ffaf 	bl	8000e6c <Beep_Set_Time>
		BEEP_OFF();
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2120      	movs	r1, #32
 8000f12:	480e      	ldr	r0, [pc, #56]	@ (8000f4c <Beep_On_Time+0x78>)
 8000f14:	f003 f9e9 	bl	80042ea <HAL_GPIO_WritePin>
}
 8000f18:	e013      	b.n	8000f42 <Beep_On_Time+0x6e>
		if (time >= 10)
 8000f1a:	88fb      	ldrh	r3, [r7, #6]
 8000f1c:	2b09      	cmp	r3, #9
 8000f1e:	d910      	bls.n	8000f42 <Beep_On_Time+0x6e>
			Beep_Set_State(BEEP_STATE_ON_DELAY);
 8000f20:	2002      	movs	r0, #2
 8000f22:	f7ff ffbd 	bl	8000ea0 <Beep_Set_State>
			Beep_Set_Time(time / 10);
 8000f26:	88fb      	ldrh	r3, [r7, #6]
 8000f28:	4a09      	ldr	r2, [pc, #36]	@ (8000f50 <Beep_On_Time+0x7c>)
 8000f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f2e:	08db      	lsrs	r3, r3, #3
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff ff9a 	bl	8000e6c <Beep_Set_Time>
			BEEP_ON();
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2120      	movs	r1, #32
 8000f3c:	4803      	ldr	r0, [pc, #12]	@ (8000f4c <Beep_On_Time+0x78>)
 8000f3e:	f003 f9d4 	bl	80042ea <HAL_GPIO_WritePin>
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40011000 	.word	0x40011000
 8000f50:	cccccccd 	.word	0xcccccccd

08000f54 <Beep_Timeout_Close_Handle>:

// 蜂鸣器超时自动关闭程序, 10毫秒调用一次 
// Buzzer timeout automatically shut down the program, 10 milliseconds to call once
void Beep_Timeout_Close_Handle(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	if (Beep_Get_State() == BEEP_STATE_ON_DELAY)
 8000f58:	f7ff ffb2 	bl	8000ec0 <Beep_Get_State>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d113      	bne.n	8000f8a <Beep_Timeout_Close_Handle+0x36>
	{
		if (Beep_Get_Time())
 8000f62:	f7ff ff93 	bl	8000e8c <Beep_Get_Time>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d006      	beq.n	8000f7a <Beep_Timeout_Close_Handle+0x26>
		{
			beep_on_time--;
 8000f6c:	4b08      	ldr	r3, [pc, #32]	@ (8000f90 <Beep_Timeout_Close_Handle+0x3c>)
 8000f6e:	881b      	ldrh	r3, [r3, #0]
 8000f70:	3b01      	subs	r3, #1
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <Beep_Timeout_Close_Handle+0x3c>)
 8000f76:	801a      	strh	r2, [r3, #0]
		{
			BEEP_OFF();
			Beep_Set_State(BEEP_STATE_OFF);
		}
	}
}
 8000f78:	e007      	b.n	8000f8a <Beep_Timeout_Close_Handle+0x36>
			BEEP_OFF();
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2120      	movs	r1, #32
 8000f7e:	4805      	ldr	r0, [pc, #20]	@ (8000f94 <Beep_Timeout_Close_Handle+0x40>)
 8000f80:	f003 f9b3 	bl	80042ea <HAL_GPIO_WritePin>
			Beep_Set_State(BEEP_STATE_OFF);
 8000f84:	2000      	movs	r0, #0
 8000f86:	f7ff ff8b 	bl	8000ea0 <Beep_Set_State>
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000094 	.word	0x20000094
 8000f94:	40011000 	.word	0x40011000

08000f98 <Encoder_Read_CNT>:
 * @Note:
 * @Parm: Motor id：电机的ID号:MOTOR_ID_M1, MOTOR_ID_M2, MOTOR_ID_M3, MOTOR_ID_M4
 * @Retval: Returns encoder count data  返回编码器计数数据
 */
static int16_t Encoder_Read_CNT(uint8_t Motor_id)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
	int16_t Encoder_TIM = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	81fb      	strh	r3, [r7, #14]
	switch(Motor_id)
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	2b03      	cmp	r3, #3
 8000fac:	d828      	bhi.n	8001000 <Encoder_Read_CNT+0x68>
 8000fae:	a201      	add	r2, pc, #4	@ (adr r2, 8000fb4 <Encoder_Read_CNT+0x1c>)
 8000fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb4:	08000fc5 	.word	0x08000fc5
 8000fb8:	08000fd7 	.word	0x08000fd7
 8000fbc:	08000fe5 	.word	0x08000fe5
 8000fc0:	08000ff3 	.word	0x08000ff3
	{
	case MOTOR_ID_M1:  Encoder_TIM = (short)TIM2 -> CNT; TIM2 -> CNT = 0; break;
 8000fc4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fca:	81fb      	strh	r3, [r7, #14]
 8000fcc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	625a      	str	r2, [r3, #36]	@ 0x24
 8000fd4:	e015      	b.n	8001002 <Encoder_Read_CNT+0x6a>
	case MOTOR_ID_M2:  Encoder_TIM = (short)TIM4 -> CNT; TIM4 -> CNT = 0; break;
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001010 <Encoder_Read_CNT+0x78>)
 8000fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fda:	81fb      	strh	r3, [r7, #14]
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <Encoder_Read_CNT+0x78>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	625a      	str	r2, [r3, #36]	@ 0x24
 8000fe2:	e00e      	b.n	8001002 <Encoder_Read_CNT+0x6a>
	case MOTOR_ID_M3:  Encoder_TIM = (short)TIM5 -> CNT; TIM5 -> CNT = 0; break;
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8001014 <Encoder_Read_CNT+0x7c>)
 8000fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fe8:	81fb      	strh	r3, [r7, #14]
 8000fea:	4b0a      	ldr	r3, [pc, #40]	@ (8001014 <Encoder_Read_CNT+0x7c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	625a      	str	r2, [r3, #36]	@ 0x24
 8000ff0:	e007      	b.n	8001002 <Encoder_Read_CNT+0x6a>
	case MOTOR_ID_M4:  Encoder_TIM = (short)TIM3 -> CNT; TIM3 -> CNT = 0; break;
 8000ff2:	4b09      	ldr	r3, [pc, #36]	@ (8001018 <Encoder_Read_CNT+0x80>)
 8000ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ff6:	81fb      	strh	r3, [r7, #14]
 8000ff8:	4b07      	ldr	r3, [pc, #28]	@ (8001018 <Encoder_Read_CNT+0x80>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	625a      	str	r2, [r3, #36]	@ 0x24
 8000ffe:	e000      	b.n	8001002 <Encoder_Read_CNT+0x6a>
	default:  break;
 8001000:	bf00      	nop
	}
	return Encoder_TIM;
 8001002:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001006:	4618      	mov	r0, r3
 8001008:	3714      	adds	r7, #20
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr
 8001010:	40000800 	.word	0x40000800
 8001014:	40000c00 	.word	0x40000c00
 8001018:	40000400 	.word	0x40000400

0800101c <Encoder_Get_ALL>:
}

// 获取开机到现在总共的四路编码器计数。
// Get the total four - way encoder count up to now
void Encoder_Get_ALL(int* Encoder_all)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	Encoder_all[0] = g_Encoder_M1_Now;
 8001024:	4b0b      	ldr	r3, [pc, #44]	@ (8001054 <Encoder_Get_ALL+0x38>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	601a      	str	r2, [r3, #0]
	Encoder_all[1] = g_Encoder_M2_Now;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3304      	adds	r3, #4
 8001030:	4a09      	ldr	r2, [pc, #36]	@ (8001058 <Encoder_Get_ALL+0x3c>)
 8001032:	6812      	ldr	r2, [r2, #0]
 8001034:	601a      	str	r2, [r3, #0]
	Encoder_all[2] = g_Encoder_M3_Now;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3308      	adds	r3, #8
 800103a:	4a08      	ldr	r2, [pc, #32]	@ (800105c <Encoder_Get_ALL+0x40>)
 800103c:	6812      	ldr	r2, [r2, #0]
 800103e:	601a      	str	r2, [r3, #0]
	Encoder_all[3] = g_Encoder_M4_Now;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	330c      	adds	r3, #12
 8001044:	4a06      	ldr	r2, [pc, #24]	@ (8001060 <Encoder_Get_ALL+0x44>)
 8001046:	6812      	ldr	r2, [r2, #0]
 8001048:	601a      	str	r2, [r3, #0]
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr
 8001054:	20000098 	.word	0x20000098
 8001058:	2000009c 	.word	0x2000009c
 800105c:	200000a0 	.word	0x200000a0
 8001060:	200000a4 	.word	0x200000a4

08001064 <Encoder_Update_Count>:

// 更新编码器的计数总值。需每10毫秒调用一次
// Update the count value of the encoder. call every 10 milliseconds
void Encoder_Update_Count(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	// g_Encoder_M1_Now += Encoder_Read_CNT(MOTOR_ID_M1);
	g_Encoder_M1_Now -= Encoder_Read_CNT(MOTOR_ID_M1);
 8001068:	2001      	movs	r0, #1
 800106a:	f7ff ff95 	bl	8000f98 <Encoder_Read_CNT>
 800106e:	4603      	mov	r3, r0
 8001070:	461a      	mov	r2, r3
 8001072:	4b12      	ldr	r3, [pc, #72]	@ (80010bc <Encoder_Update_Count+0x58>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	1a9b      	subs	r3, r3, r2
 8001078:	4a10      	ldr	r2, [pc, #64]	@ (80010bc <Encoder_Update_Count+0x58>)
 800107a:	6013      	str	r3, [r2, #0]

	g_Encoder_M2_Now += Encoder_Read_CNT(MOTOR_ID_M2);
 800107c:	2002      	movs	r0, #2
 800107e:	f7ff ff8b 	bl	8000f98 <Encoder_Read_CNT>
 8001082:	4603      	mov	r3, r0
 8001084:	461a      	mov	r2, r3
 8001086:	4b0e      	ldr	r3, [pc, #56]	@ (80010c0 <Encoder_Update_Count+0x5c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4413      	add	r3, r2
 800108c:	4a0c      	ldr	r2, [pc, #48]	@ (80010c0 <Encoder_Update_Count+0x5c>)
 800108e:	6013      	str	r3, [r2, #0]
	// g_Encoder_M2_Now -= Encoder_Read_CNT(MOTOR_ID_M2);

	g_Encoder_M3_Now += Encoder_Read_CNT(MOTOR_ID_M3);
 8001090:	2003      	movs	r0, #3
 8001092:	f7ff ff81 	bl	8000f98 <Encoder_Read_CNT>
 8001096:	4603      	mov	r3, r0
 8001098:	461a      	mov	r2, r3
 800109a:	4b0a      	ldr	r3, [pc, #40]	@ (80010c4 <Encoder_Update_Count+0x60>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4413      	add	r3, r2
 80010a0:	4a08      	ldr	r2, [pc, #32]	@ (80010c4 <Encoder_Update_Count+0x60>)
 80010a2:	6013      	str	r3, [r2, #0]
	// g_Encoder_M3_Now -= Encoder_Read_CNT(MOTOR_ID_M3);

	// g_Encoder_M4_Now += Encoder_Read_CNT(MOTOR_ID_M4);
	g_Encoder_M4_Now -= Encoder_Read_CNT(MOTOR_ID_M4);
 80010a4:	2004      	movs	r0, #4
 80010a6:	f7ff ff77 	bl	8000f98 <Encoder_Read_CNT>
 80010aa:	4603      	mov	r3, r0
 80010ac:	461a      	mov	r2, r3
 80010ae:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <Encoder_Update_Count+0x64>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	1a9b      	subs	r3, r3, r2
 80010b4:	4a04      	ldr	r2, [pc, #16]	@ (80010c8 <Encoder_Update_Count+0x64>)
 80010b6:	6013      	str	r3, [r2, #0]
}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000098 	.word	0x20000098
 80010c0:	2000009c 	.word	0x2000009c
 80010c4:	200000a0 	.word	0x200000a0
 80010c8:	200000a4 	.word	0x200000a4

080010cc <Encoder_Init>:

// Initializing timer  初始化定时器
void Encoder_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80010d0:	2104      	movs	r1, #4
 80010d2:	4808      	ldr	r0, [pc, #32]	@ (80010f4 <Encoder_Init+0x28>)
 80010d4:	f005 fe80 	bl	8006dd8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80010d8:	2104      	movs	r1, #4
 80010da:	4807      	ldr	r0, [pc, #28]	@ (80010f8 <Encoder_Init+0x2c>)
 80010dc:	f005 fe7c 	bl	8006dd8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80010e0:	2104      	movs	r1, #4
 80010e2:	4806      	ldr	r0, [pc, #24]	@ (80010fc <Encoder_Init+0x30>)
 80010e4:	f005 fe78 	bl	8006dd8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80010e8:	2104      	movs	r1, #4
 80010ea:	4805      	ldr	r0, [pc, #20]	@ (8001100 <Encoder_Init+0x34>)
 80010ec:	f005 fe74 	bl	8006dd8 <HAL_TIM_Encoder_Start>
}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20001c58 	.word	0x20001c58
 80010f8:	20001ca0 	.word	0x20001ca0
 80010fc:	20001ce8 	.word	0x20001ce8
 8001100:	20001d30 	.word	0x20001d30

08001104 <Key1_is_Press>:


// 判断按键是否被按下，按下返回KEY_PRESS，松开返回KEY_RELEASE
// Determine if the key is pressed, press to return KEY_PRESS, release to return KEY_RELEASE  
static uint8_t Key1_is_Press(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin))
 8001108:	2104      	movs	r1, #4
 800110a:	4805      	ldr	r0, [pc, #20]	@ (8001120 <Key1_is_Press+0x1c>)
 800110c:	f003 f8d6 	bl	80042bc <HAL_GPIO_ReadPin>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d101      	bne.n	800111a <Key1_is_Press+0x16>
	{
		return KEY_PRESS; // 如果按键被按下，则返回KEY_PRESS
 8001116:	2301      	movs	r3, #1
 8001118:	e000      	b.n	800111c <Key1_is_Press+0x18>
	}
	return KEY_RELEASE;   // 如果按键是松开状态，则返回KEY_RELEASE
 800111a:	2300      	movs	r3, #0
}
 800111c:	4618      	mov	r0, r3
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40011400 	.word	0x40011400

08001124 <Key1_State>:
// 读取按键K1的状态，按下返回KEY_PRESS，松开返回KEY_RELEASE. 
// mode:设置模式，0：按下一直返回KEY_PRESS；1：按下只返回一次KEY_PRESS
// Read the state of key K1, press down to return KEY_PRESS, release to return key_release. 
// mode: setting mode, 0: press down to return KEY_PRESS;  1: KEY_PRESS is returned only once  
uint8_t Key1_State(uint8_t mode)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
	static uint16_t key1_state = 0;

	if (Key1_is_Press() == KEY_PRESS)
 800112e:	f7ff ffe9 	bl	8001104 <Key1_is_Press>
 8001132:	4603      	mov	r3, r0
 8001134:	2b01      	cmp	r3, #1
 8001136:	d10e      	bne.n	8001156 <Key1_State+0x32>
	{
		if (key1_state < (mode + 1) * 2)
 8001138:	4b0e      	ldr	r3, [pc, #56]	@ (8001174 <Key1_State+0x50>)
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	3301      	adds	r3, #1
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	429a      	cmp	r2, r3
 8001146:	da09      	bge.n	800115c <Key1_State+0x38>
		{
			key1_state++;
 8001148:	4b0a      	ldr	r3, [pc, #40]	@ (8001174 <Key1_State+0x50>)
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	3301      	adds	r3, #1
 800114e:	b29a      	uxth	r2, r3
 8001150:	4b08      	ldr	r3, [pc, #32]	@ (8001174 <Key1_State+0x50>)
 8001152:	801a      	strh	r2, [r3, #0]
 8001154:	e002      	b.n	800115c <Key1_State+0x38>
		}
	}
	else
	{
		key1_state = 0;
 8001156:	4b07      	ldr	r3, [pc, #28]	@ (8001174 <Key1_State+0x50>)
 8001158:	2200      	movs	r2, #0
 800115a:	801a      	strh	r2, [r3, #0]
	}
	if (key1_state == 2)
 800115c:	4b05      	ldr	r3, [pc, #20]	@ (8001174 <Key1_State+0x50>)
 800115e:	881b      	ldrh	r3, [r3, #0]
 8001160:	2b02      	cmp	r3, #2
 8001162:	d101      	bne.n	8001168 <Key1_State+0x44>
	{
		return KEY_PRESS;
 8001164:	2301      	movs	r3, #1
 8001166:	e000      	b.n	800116a <Key1_State+0x46>
	}
	return KEY_RELEASE;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200000a8 	.word	0x200000a8

08001178 <Motion_Set_Pwm>:


// 控制小车运动，Motor_X=[-3600, 3600]，超过范围则无效。
// Control car movement, Motor_X=[-3600, 3600], beyond the range is invalid.
void Motion_Set_Pwm(int16_t Motor_1, int16_t Motor_2, int16_t Motor_3, int16_t Motor_4)
{
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	4604      	mov	r4, r0
 8001180:	4608      	mov	r0, r1
 8001182:	4611      	mov	r1, r2
 8001184:	461a      	mov	r2, r3
 8001186:	4623      	mov	r3, r4
 8001188:	80fb      	strh	r3, [r7, #6]
 800118a:	4603      	mov	r3, r0
 800118c:	80bb      	strh	r3, [r7, #4]
 800118e:	460b      	mov	r3, r1
 8001190:	807b      	strh	r3, [r7, #2]
 8001192:	4613      	mov	r3, r2
 8001194:	803b      	strh	r3, [r7, #0]
    int16_t max_value = MOTOR_MAX_PULSE - MOTOR_IGNORE_PULSE;
 8001196:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800119a:	81fb      	strh	r3, [r7, #14]
    if (Motor_1 >= -max_value && Motor_1 <= max_value)
 800119c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80011a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011a4:	425b      	negs	r3, r3
 80011a6:	429a      	cmp	r2, r3
 80011a8:	db0b      	blt.n	80011c2 <Motion_Set_Pwm+0x4a>
 80011aa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80011ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	dc05      	bgt.n	80011c2 <Motion_Set_Pwm+0x4a>
    {
        Motor_Set_Pwm(MOTOR_ID_M1, Motor_1);
 80011b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ba:	4619      	mov	r1, r3
 80011bc:	2001      	movs	r0, #1
 80011be:	f000 fb47 	bl	8001850 <Motor_Set_Pwm>
    }
    if (Motor_2 >= -max_value && Motor_2 <= max_value)
 80011c2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80011c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011ca:	425b      	negs	r3, r3
 80011cc:	429a      	cmp	r2, r3
 80011ce:	db0b      	blt.n	80011e8 <Motion_Set_Pwm+0x70>
 80011d0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80011d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011d8:	429a      	cmp	r2, r3
 80011da:	dc05      	bgt.n	80011e8 <Motion_Set_Pwm+0x70>
    {
        Motor_Set_Pwm(MOTOR_ID_M2, Motor_2);
 80011dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011e0:	4619      	mov	r1, r3
 80011e2:	2002      	movs	r0, #2
 80011e4:	f000 fb34 	bl	8001850 <Motor_Set_Pwm>
    }
    if (Motor_3 >= -max_value && Motor_3 <= max_value)
 80011e8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80011ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011f0:	425b      	negs	r3, r3
 80011f2:	429a      	cmp	r2, r3
 80011f4:	db0b      	blt.n	800120e <Motion_Set_Pwm+0x96>
 80011f6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80011fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011fe:	429a      	cmp	r2, r3
 8001200:	dc05      	bgt.n	800120e <Motion_Set_Pwm+0x96>
    {
        Motor_Set_Pwm(MOTOR_ID_M3, Motor_3);
 8001202:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001206:	4619      	mov	r1, r3
 8001208:	2003      	movs	r0, #3
 800120a:	f000 fb21 	bl	8001850 <Motor_Set_Pwm>
    }
    if (Motor_4 >= -max_value && Motor_4 <= max_value)
 800120e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001212:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001216:	425b      	negs	r3, r3
 8001218:	429a      	cmp	r2, r3
 800121a:	db0b      	blt.n	8001234 <Motion_Set_Pwm+0xbc>
 800121c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001220:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001224:	429a      	cmp	r2, r3
 8001226:	dc05      	bgt.n	8001234 <Motion_Set_Pwm+0xbc>
    {
        Motor_Set_Pwm(MOTOR_ID_M4, Motor_4);
 8001228:	f9b7 3000 	ldrsh.w	r3, [r7]
 800122c:	4619      	mov	r1, r3
 800122e:	2004      	movs	r0, #4
 8001230:	f000 fb0e 	bl	8001850 <Motor_Set_Pwm>
    }
}
 8001234:	bf00      	nop
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	bd90      	pop	{r4, r7, pc}

0800123c <Motion_Stop>:

// The car stopped  小车停止
void Motion_Stop(uint8_t brake)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	71fb      	strb	r3, [r7, #7]
    Motion_Set_Speed(0, 0, 0, 0);
 8001246:	2300      	movs	r3, #0
 8001248:	2200      	movs	r2, #0
 800124a:	2100      	movs	r1, #0
 800124c:	2000      	movs	r0, #0
 800124e:	f000 f811 	bl	8001274 <Motion_Set_Speed>
    PID_Clear_Motor(MAX_MOTOR);
 8001252:	2004      	movs	r0, #4
 8001254:	f000 fcb8 	bl	8001bc8 <PID_Clear_Motor>
    Motor_Stop(brake);
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	4618      	mov	r0, r3
 800125c:	f000 faac 	bl	80017b8 <Motor_Stop>
    g_start_ctrl = 0;
 8001260:	4b03      	ldr	r3, [pc, #12]	@ (8001270 <Motion_Stop+0x34>)
 8001262:	2200      	movs	r2, #0
 8001264:	701a      	strb	r2, [r3, #0]
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	200000dc 	.word	0x200000dc

08001274 <Motion_Set_Speed>:


// 设置速度 speed_mX=[-1000, 1000], 单位为：mm/s
// Set speed speed mX=[-1000, 1000], unit: mm/s
void Motion_Set_Speed(int16_t speed_m1, int16_t speed_m2, int16_t speed_m3, int16_t speed_m4)
{
 8001274:	b590      	push	{r4, r7, lr}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	4604      	mov	r4, r0
 800127c:	4608      	mov	r0, r1
 800127e:	4611      	mov	r1, r2
 8001280:	461a      	mov	r2, r3
 8001282:	4623      	mov	r3, r4
 8001284:	80fb      	strh	r3, [r7, #6]
 8001286:	4603      	mov	r3, r0
 8001288:	80bb      	strh	r3, [r7, #4]
 800128a:	460b      	mov	r3, r1
 800128c:	807b      	strh	r3, [r7, #2]
 800128e:	4613      	mov	r3, r2
 8001290:	803b      	strh	r3, [r7, #0]
    g_start_ctrl = 1;
 8001292:	4b18      	ldr	r3, [pc, #96]	@ (80012f4 <Motion_Set_Speed+0x80>)
 8001294:	2201      	movs	r2, #1
 8001296:	701a      	strb	r2, [r3, #0]
    motor_data.speed_set[0] = speed_m1;
 8001298:	4a17      	ldr	r2, [pc, #92]	@ (80012f8 <Motion_Set_Speed+0x84>)
 800129a:	88fb      	ldrh	r3, [r7, #6]
 800129c:	8413      	strh	r3, [r2, #32]
    motor_data.speed_set[1] = speed_m2;
 800129e:	4a16      	ldr	r2, [pc, #88]	@ (80012f8 <Motion_Set_Speed+0x84>)
 80012a0:	88bb      	ldrh	r3, [r7, #4]
 80012a2:	8453      	strh	r3, [r2, #34]	@ 0x22
    motor_data.speed_set[2] = speed_m3;
 80012a4:	4a14      	ldr	r2, [pc, #80]	@ (80012f8 <Motion_Set_Speed+0x84>)
 80012a6:	887b      	ldrh	r3, [r7, #2]
 80012a8:	8493      	strh	r3, [r2, #36]	@ 0x24
    motor_data.speed_set[3] = speed_m4;
 80012aa:	4a13      	ldr	r2, [pc, #76]	@ (80012f8 <Motion_Set_Speed+0x84>)
 80012ac:	883b      	ldrh	r3, [r7, #0]
 80012ae:	84d3      	strh	r3, [r2, #38]	@ 0x26
    for (uint8_t i = 0; i < MAX_MOTOR; i++)
 80012b0:	2300      	movs	r3, #0
 80012b2:	73fb      	strb	r3, [r7, #15]
 80012b4:	e016      	b.n	80012e4 <Motion_Set_Speed+0x70>
    {
        PID_Set_Motor_Target(i, motor_data.speed_set[i]*1.0);
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
 80012b8:	4a0f      	ldr	r2, [pc, #60]	@ (80012f8 <Motion_Set_Speed+0x84>)
 80012ba:	3310      	adds	r3, #16
 80012bc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff f901 	bl	80004c8 <__aeabi_i2d>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4610      	mov	r0, r2
 80012cc:	4619      	mov	r1, r3
 80012ce:	f7ff f965 	bl	800059c <__aeabi_d2f>
 80012d2:	4602      	mov	r2, r0
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	4611      	mov	r1, r2
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 fd01 	bl	8001ce0 <PID_Set_Motor_Target>
    for (uint8_t i = 0; i < MAX_MOTOR; i++)
 80012de:	7bfb      	ldrb	r3, [r7, #15]
 80012e0:	3301      	adds	r3, #1
 80012e2:	73fb      	strb	r3, [r7, #15]
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
 80012e6:	2b03      	cmp	r3, #3
 80012e8:	d9e5      	bls.n	80012b6 <Motion_Set_Speed+0x42>
    }
}
 80012ea:	bf00      	nop
 80012ec:	bf00      	nop
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd90      	pop	{r4, r7, pc}
 80012f4:	200000dc 	.word	0x200000dc
 80012f8:	200000e8 	.word	0x200000e8

080012fc <Motion_Get_Speed>:


// 从编码器读取当前各轮子速度，单位mm/s
// Read the current speed of each wheel from the encoder in mm/s
void Motion_Get_Speed(car_data_t* car)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b088      	sub	sp, #32
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
    Motion_Get_Encoder();
 8001304:	f000 f8ee 	bl	80014e4 <Motion_Get_Encoder>

    float circle_mm = Motion_Get_Circle_MM();
 8001308:	f000 f8e2 	bl	80014d0 <Motion_Get_Circle_MM>
 800130c:	61f8      	str	r0, [r7, #28]

    float speed_m1 = (g_Encoder_All_Offset[0]) * 100 * circle_mm / (float)ENCODER_CIRCLE;
 800130e:	4b66      	ldr	r3, [pc, #408]	@ (80014a8 <Motion_Get_Speed+0x1ac>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2264      	movs	r2, #100	@ 0x64
 8001314:	fb02 f303 	mul.w	r3, r2, r3
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fa49 	bl	80007b0 <__aeabi_i2f>
 800131e:	4603      	mov	r3, r0
 8001320:	69f9      	ldr	r1, [r7, #28]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fa98 	bl	8000858 <__aeabi_fmul>
 8001328:	4603      	mov	r3, r0
 800132a:	4960      	ldr	r1, [pc, #384]	@ (80014ac <Motion_Get_Speed+0x1b0>)
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fb47 	bl	80009c0 <__aeabi_fdiv>
 8001332:	4603      	mov	r3, r0
 8001334:	61bb      	str	r3, [r7, #24]
    float speed_m2 = (g_Encoder_All_Offset[1]) * 100 * circle_mm / (float)ENCODER_CIRCLE;
 8001336:	4b5c      	ldr	r3, [pc, #368]	@ (80014a8 <Motion_Get_Speed+0x1ac>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2264      	movs	r2, #100	@ 0x64
 800133c:	fb02 f303 	mul.w	r3, r2, r3
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fa35 	bl	80007b0 <__aeabi_i2f>
 8001346:	4603      	mov	r3, r0
 8001348:	69f9      	ldr	r1, [r7, #28]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff fa84 	bl	8000858 <__aeabi_fmul>
 8001350:	4603      	mov	r3, r0
 8001352:	4956      	ldr	r1, [pc, #344]	@ (80014ac <Motion_Get_Speed+0x1b0>)
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff fb33 	bl	80009c0 <__aeabi_fdiv>
 800135a:	4603      	mov	r3, r0
 800135c:	617b      	str	r3, [r7, #20]
    float speed_m3 = (g_Encoder_All_Offset[2]) * 100 * circle_mm / (float)ENCODER_CIRCLE;
 800135e:	4b52      	ldr	r3, [pc, #328]	@ (80014a8 <Motion_Get_Speed+0x1ac>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	2264      	movs	r2, #100	@ 0x64
 8001364:	fb02 f303 	mul.w	r3, r2, r3
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fa21 	bl	80007b0 <__aeabi_i2f>
 800136e:	4603      	mov	r3, r0
 8001370:	69f9      	ldr	r1, [r7, #28]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff fa70 	bl	8000858 <__aeabi_fmul>
 8001378:	4603      	mov	r3, r0
 800137a:	494c      	ldr	r1, [pc, #304]	@ (80014ac <Motion_Get_Speed+0x1b0>)
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fb1f 	bl	80009c0 <__aeabi_fdiv>
 8001382:	4603      	mov	r3, r0
 8001384:	613b      	str	r3, [r7, #16]
    float speed_m4 = (g_Encoder_All_Offset[3]) * 100 * circle_mm / (float)ENCODER_CIRCLE;
 8001386:	4b48      	ldr	r3, [pc, #288]	@ (80014a8 <Motion_Get_Speed+0x1ac>)
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	2264      	movs	r2, #100	@ 0x64
 800138c:	fb02 f303 	mul.w	r3, r2, r3
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fa0d 	bl	80007b0 <__aeabi_i2f>
 8001396:	4603      	mov	r3, r0
 8001398:	69f9      	ldr	r1, [r7, #28]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff fa5c 	bl	8000858 <__aeabi_fmul>
 80013a0:	4603      	mov	r3, r0
 80013a2:	4942      	ldr	r1, [pc, #264]	@ (80014ac <Motion_Get_Speed+0x1b0>)
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fb0b 	bl	80009c0 <__aeabi_fdiv>
 80013aa:	4603      	mov	r3, r0
 80013ac:	60fb      	str	r3, [r7, #12]
    float robot_APB = Motion_Get_APB();
 80013ae:	f000 f885 	bl	80014bc <Motion_Get_APB>
 80013b2:	60b8      	str	r0, [r7, #8]

    car->Vx = (speed_m1 + speed_m2 + speed_m3 + speed_m4) / 4;
 80013b4:	6979      	ldr	r1, [r7, #20]
 80013b6:	69b8      	ldr	r0, [r7, #24]
 80013b8:	f7ff f946 	bl	8000648 <__addsf3>
 80013bc:	4603      	mov	r3, r0
 80013be:	6939      	ldr	r1, [r7, #16]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff f941 	bl	8000648 <__addsf3>
 80013c6:	4603      	mov	r3, r0
 80013c8:	68f9      	ldr	r1, [r7, #12]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff f93c 	bl	8000648 <__addsf3>
 80013d0:	4603      	mov	r3, r0
 80013d2:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff faf2 	bl	80009c0 <__aeabi_fdiv>
 80013dc:	4603      	mov	r3, r0
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fc00 	bl	8000be4 <__aeabi_f2iz>
 80013e4:	4603      	mov	r3, r0
 80013e6:	b21a      	sxth	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	801a      	strh	r2, [r3, #0]
    car->Vy = -(speed_m1 - speed_m2 - speed_m3 + speed_m4) / 4;
 80013ec:	6979      	ldr	r1, [r7, #20]
 80013ee:	69b8      	ldr	r0, [r7, #24]
 80013f0:	f7ff f928 	bl	8000644 <__aeabi_fsub>
 80013f4:	4603      	mov	r3, r0
 80013f6:	6939      	ldr	r1, [r7, #16]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff f923 	bl	8000644 <__aeabi_fsub>
 80013fe:	4603      	mov	r3, r0
 8001400:	68f9      	ldr	r1, [r7, #12]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff f920 	bl	8000648 <__addsf3>
 8001408:	4603      	mov	r3, r0
 800140a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800140e:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fad4 	bl	80009c0 <__aeabi_fdiv>
 8001418:	4603      	mov	r3, r0
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff fbe2 	bl	8000be4 <__aeabi_f2iz>
 8001420:	4603      	mov	r3, r0
 8001422:	b21a      	sxth	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	805a      	strh	r2, [r3, #2]
    car->Vz = -(speed_m1 + speed_m2 - speed_m3 - speed_m4) / 4.0f / robot_APB * 1000;
 8001428:	6979      	ldr	r1, [r7, #20]
 800142a:	69b8      	ldr	r0, [r7, #24]
 800142c:	f7ff f90c 	bl	8000648 <__addsf3>
 8001430:	4603      	mov	r3, r0
 8001432:	6939      	ldr	r1, [r7, #16]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff f905 	bl	8000644 <__aeabi_fsub>
 800143a:	4603      	mov	r3, r0
 800143c:	68f9      	ldr	r1, [r7, #12]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f900 	bl	8000644 <__aeabi_fsub>
 8001444:	4603      	mov	r3, r0
 8001446:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800144a:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fab6 	bl	80009c0 <__aeabi_fdiv>
 8001454:	4603      	mov	r3, r0
 8001456:	68b9      	ldr	r1, [r7, #8]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff fab1 	bl	80009c0 <__aeabi_fdiv>
 800145e:	4603      	mov	r3, r0
 8001460:	4913      	ldr	r1, [pc, #76]	@ (80014b0 <Motion_Get_Speed+0x1b4>)
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff f9f8 	bl	8000858 <__aeabi_fmul>
 8001468:	4603      	mov	r3, r0
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fbba 	bl	8000be4 <__aeabi_f2iz>
 8001470:	4603      	mov	r3, r0
 8001472:	b21a      	sxth	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	809a      	strh	r2, [r3, #4]

    if (g_start_ctrl)
 8001478:	4b0e      	ldr	r3, [pc, #56]	@ (80014b4 <Motion_Get_Speed+0x1b8>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d00e      	beq.n	800149e <Motion_Get_Speed+0x1a2>
    {
        motor_data.speed_mm_s[0] = speed_m1;
 8001480:	4a0d      	ldr	r2, [pc, #52]	@ (80014b8 <Motion_Get_Speed+0x1bc>)
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	6013      	str	r3, [r2, #0]
        motor_data.speed_mm_s[1] = speed_m2;
 8001486:	4a0c      	ldr	r2, [pc, #48]	@ (80014b8 <Motion_Get_Speed+0x1bc>)
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	6053      	str	r3, [r2, #4]
        motor_data.speed_mm_s[2] = speed_m3;
 800148c:	4a0a      	ldr	r2, [pc, #40]	@ (80014b8 <Motion_Get_Speed+0x1bc>)
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	6093      	str	r3, [r2, #8]
        motor_data.speed_mm_s[3] = speed_m4;
 8001492:	4a09      	ldr	r2, [pc, #36]	@ (80014b8 <Motion_Get_Speed+0x1bc>)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	60d3      	str	r3, [r2, #12]
        PID_Calc_Motor(&motor_data);
 8001498:	4807      	ldr	r0, [pc, #28]	@ (80014b8 <Motion_Get_Speed+0x1bc>)
 800149a:	f000 fb6d 	bl	8001b78 <PID_Calc_Motor>
    }
}
 800149e:	bf00      	nop
 80014a0:	3720      	adds	r7, #32
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	200000cc 	.word	0x200000cc
 80014ac:	44a50000 	.word	0x44a50000
 80014b0:	447a0000 	.word	0x447a0000
 80014b4:	200000dc 	.word	0x200000dc
 80014b8:	200000e8 	.word	0x200000e8

080014bc <Motion_Get_APB>:

// Returns half of the sum of the current cart wheel axles  返回当前小车轮子轴间距和的一半
float Motion_Get_APB(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
    return MECANUM_MINI_APB;
 80014c0:	4b02      	ldr	r3, [pc, #8]	@ (80014cc <Motion_Get_APB+0x10>)
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	43a6470a 	.word	0x43a6470a

080014d0 <Motion_Get_Circle_MM>:

// Returns the number of millimeters at which the current wheel has been turned  返回当前小车轮子转一圈多少毫米
float Motion_Get_Circle_MM(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
    return MECANUM_MINI_CIRCLE_MM;
 80014d4:	4b02      	ldr	r3, [pc, #8]	@ (80014e0 <Motion_Get_Circle_MM+0x10>)
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	439539ba 	.word	0x439539ba

080014e4 <Motion_Get_Encoder>:


// Obtain encoder data and calculate the number of deviation pulses  获取编码器数据，并计算偏差脉冲数
void Motion_Get_Encoder(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
    Encoder_Update_Count();
 80014ea:	f7ff fdbb 	bl	8001064 <Encoder_Update_Count>
    Encoder_Get_ALL(g_Encoder_All_Now);
 80014ee:	4813      	ldr	r0, [pc, #76]	@ (800153c <Motion_Get_Encoder+0x58>)
 80014f0:	f7ff fd94 	bl	800101c <Encoder_Get_ALL>

    for(uint8_t i = 0; i < MAX_MOTOR; i++)
 80014f4:	2300      	movs	r3, #0
 80014f6:	71fb      	strb	r3, [r7, #7]
 80014f8:	e017      	b.n	800152a <Motion_Get_Encoder+0x46>
    {
        g_Encoder_All_Offset[i] = g_Encoder_All_Now[i] - g_Encoder_All_Last[i];
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	4a0f      	ldr	r2, [pc, #60]	@ (800153c <Motion_Get_Encoder+0x58>)
 80014fe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	4a0e      	ldr	r2, [pc, #56]	@ (8001540 <Motion_Get_Encoder+0x5c>)
 8001506:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	1a8a      	subs	r2, r1, r2
 800150e:	490d      	ldr	r1, [pc, #52]	@ (8001544 <Motion_Get_Encoder+0x60>)
 8001510:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	    g_Encoder_All_Last[i] = g_Encoder_All_Now[i];
 8001514:	79fa      	ldrb	r2, [r7, #7]
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	4908      	ldr	r1, [pc, #32]	@ (800153c <Motion_Get_Encoder+0x58>)
 800151a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800151e:	4908      	ldr	r1, [pc, #32]	@ (8001540 <Motion_Get_Encoder+0x5c>)
 8001520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for(uint8_t i = 0; i < MAX_MOTOR; i++)
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	3301      	adds	r3, #1
 8001528:	71fb      	strb	r3, [r7, #7]
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	2b03      	cmp	r3, #3
 800152e:	d9e4      	bls.n	80014fa <Motion_Get_Encoder+0x16>
    }
}
 8001530:	bf00      	nop
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	200000ac 	.word	0x200000ac
 8001540:	200000bc 	.word	0x200000bc
 8001544:	200000cc 	.word	0x200000cc

08001548 <Motion_Ctrl>:

// Control car movement  控制小车运动
void Motion_Ctrl(int16_t V_x, int16_t V_y, int16_t V_z)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08a      	sub	sp, #40	@ 0x28
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	80fb      	strh	r3, [r7, #6]
 8001552:	460b      	mov	r3, r1
 8001554:	80bb      	strh	r3, [r7, #4]
 8001556:	4613      	mov	r3, r2
 8001558:	807b      	strh	r3, [r7, #2]
    float robot_APB = Motion_Get_APB();
 800155a:	f7ff ffaf 	bl	80014bc <Motion_Get_APB>
 800155e:	6178      	str	r0, [r7, #20]
    float speed_lr = -V_y;
 8001560:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001564:	425b      	negs	r3, r3
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff f922 	bl	80007b0 <__aeabi_i2f>
 800156c:	4603      	mov	r3, r0
 800156e:	613b      	str	r3, [r7, #16]
    float speed_fb = V_x;
 8001570:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff f91b 	bl	80007b0 <__aeabi_i2f>
 800157a:	4603      	mov	r3, r0
 800157c:	60fb      	str	r3, [r7, #12]
    float speed_spin = -V_z / 1000.0f * robot_APB;
 800157e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001582:	425b      	negs	r3, r3
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff f913 	bl	80007b0 <__aeabi_i2f>
 800158a:	4603      	mov	r3, r0
 800158c:	494b      	ldr	r1, [pc, #300]	@ (80016bc <Motion_Ctrl+0x174>)
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fa16 	bl	80009c0 <__aeabi_fdiv>
 8001594:	4603      	mov	r3, r0
 8001596:	4619      	mov	r1, r3
 8001598:	6978      	ldr	r0, [r7, #20]
 800159a:	f7ff f95d 	bl	8000858 <__aeabi_fmul>
 800159e:	4603      	mov	r3, r0
 80015a0:	60bb      	str	r3, [r7, #8]
    if (V_x == 0 && V_y == 0 && V_z == 0)
 80015a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d10b      	bne.n	80015c2 <Motion_Ctrl+0x7a>
 80015aa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d107      	bne.n	80015c2 <Motion_Ctrl+0x7a>
 80015b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d103      	bne.n	80015c2 <Motion_Ctrl+0x7a>
    {
        Motion_Stop(STOP_BRAKE);
 80015ba:	2001      	movs	r0, #1
 80015bc:	f7ff fe3e 	bl	800123c <Motion_Stop>
        return;
 80015c0:	e079      	b.n	80016b6 <Motion_Ctrl+0x16e>
    }

    int speed_L1_setup = speed_fb + speed_lr + speed_spin;
 80015c2:	6939      	ldr	r1, [r7, #16]
 80015c4:	68f8      	ldr	r0, [r7, #12]
 80015c6:	f7ff f83f 	bl	8000648 <__addsf3>
 80015ca:	4603      	mov	r3, r0
 80015cc:	68b9      	ldr	r1, [r7, #8]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff f83a 	bl	8000648 <__addsf3>
 80015d4:	4603      	mov	r3, r0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fb04 	bl	8000be4 <__aeabi_f2iz>
 80015dc:	4603      	mov	r3, r0
 80015de:	627b      	str	r3, [r7, #36]	@ 0x24
    int speed_L2_setup = speed_fb - speed_lr + speed_spin;
 80015e0:	6939      	ldr	r1, [r7, #16]
 80015e2:	68f8      	ldr	r0, [r7, #12]
 80015e4:	f7ff f82e 	bl	8000644 <__aeabi_fsub>
 80015e8:	4603      	mov	r3, r0
 80015ea:	68b9      	ldr	r1, [r7, #8]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff f82b 	bl	8000648 <__addsf3>
 80015f2:	4603      	mov	r3, r0
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff faf5 	bl	8000be4 <__aeabi_f2iz>
 80015fa:	4603      	mov	r3, r0
 80015fc:	623b      	str	r3, [r7, #32]
    int speed_R1_setup = speed_fb - speed_lr - speed_spin;
 80015fe:	6939      	ldr	r1, [r7, #16]
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	f7ff f81f 	bl	8000644 <__aeabi_fsub>
 8001606:	4603      	mov	r3, r0
 8001608:	68b9      	ldr	r1, [r7, #8]
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff f81a 	bl	8000644 <__aeabi_fsub>
 8001610:	4603      	mov	r3, r0
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fae6 	bl	8000be4 <__aeabi_f2iz>
 8001618:	4603      	mov	r3, r0
 800161a:	61fb      	str	r3, [r7, #28]
    int speed_R2_setup = speed_fb + speed_lr - speed_spin;
 800161c:	6939      	ldr	r1, [r7, #16]
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	f7ff f812 	bl	8000648 <__addsf3>
 8001624:	4603      	mov	r3, r0
 8001626:	68b9      	ldr	r1, [r7, #8]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff f80b 	bl	8000644 <__aeabi_fsub>
 800162e:	4603      	mov	r3, r0
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fad7 	bl	8000be4 <__aeabi_f2iz>
 8001636:	4603      	mov	r3, r0
 8001638:	61bb      	str	r3, [r7, #24]

    if (speed_L1_setup > 1000) speed_L1_setup = 1000;
 800163a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001640:	dd02      	ble.n	8001648 <Motion_Ctrl+0x100>
 8001642:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001646:	627b      	str	r3, [r7, #36]	@ 0x24
    if (speed_L1_setup < -1000) speed_L1_setup = -1000;
 8001648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800164a:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 800164e:	da01      	bge.n	8001654 <Motion_Ctrl+0x10c>
 8001650:	4b1b      	ldr	r3, [pc, #108]	@ (80016c0 <Motion_Ctrl+0x178>)
 8001652:	627b      	str	r3, [r7, #36]	@ 0x24
    if (speed_L2_setup > 1000) speed_L2_setup = 1000;
 8001654:	6a3b      	ldr	r3, [r7, #32]
 8001656:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800165a:	dd02      	ble.n	8001662 <Motion_Ctrl+0x11a>
 800165c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001660:	623b      	str	r3, [r7, #32]
    if (speed_L2_setup < -1000) speed_L2_setup = -1000;
 8001662:	6a3b      	ldr	r3, [r7, #32]
 8001664:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8001668:	da01      	bge.n	800166e <Motion_Ctrl+0x126>
 800166a:	4b15      	ldr	r3, [pc, #84]	@ (80016c0 <Motion_Ctrl+0x178>)
 800166c:	623b      	str	r3, [r7, #32]
    if (speed_R1_setup > 1000) speed_R1_setup = 1000;
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001674:	dd02      	ble.n	800167c <Motion_Ctrl+0x134>
 8001676:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800167a:	61fb      	str	r3, [r7, #28]
    if (speed_R1_setup < -1000) speed_R1_setup = -1000;
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8001682:	da01      	bge.n	8001688 <Motion_Ctrl+0x140>
 8001684:	4b0e      	ldr	r3, [pc, #56]	@ (80016c0 <Motion_Ctrl+0x178>)
 8001686:	61fb      	str	r3, [r7, #28]
    if (speed_R2_setup > 1000) speed_R2_setup = 1000;
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800168e:	dd02      	ble.n	8001696 <Motion_Ctrl+0x14e>
 8001690:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001694:	61bb      	str	r3, [r7, #24]
    if (speed_R2_setup < -1000) speed_R2_setup = -1000;
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 800169c:	da01      	bge.n	80016a2 <Motion_Ctrl+0x15a>
 800169e:	4b08      	ldr	r3, [pc, #32]	@ (80016c0 <Motion_Ctrl+0x178>)
 80016a0:	61bb      	str	r3, [r7, #24]
    Motion_Set_Speed(speed_L1_setup, speed_L2_setup, speed_R1_setup, speed_R2_setup);
 80016a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a4:	b218      	sxth	r0, r3
 80016a6:	6a3b      	ldr	r3, [r7, #32]
 80016a8:	b219      	sxth	r1, r3
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	b21a      	sxth	r2, r3
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	b21b      	sxth	r3, r3
 80016b2:	f7ff fddf 	bl	8001274 <Motion_Set_Speed>
}
 80016b6:	3728      	adds	r7, #40	@ 0x28
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	447a0000 	.word	0x447a0000
 80016c0:	fffffc18 	.word	0xfffffc18

080016c4 <Motion_Handle>:


// 运动控制句柄，每10ms调用一次，主要处理速度相关的数据
// Motion control handle, called every 10ms, mainly processing speed related data
void Motion_Handle(void)
{
 80016c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016c6:	af00      	add	r7, sp, #0
    Motion_Get_Speed(&car_data);
 80016c8:	4814      	ldr	r0, [pc, #80]	@ (800171c <Motion_Handle+0x58>)
 80016ca:	f7ff fe17 	bl	80012fc <Motion_Get_Speed>

    if (g_start_ctrl)
 80016ce:	4b14      	ldr	r3, [pc, #80]	@ (8001720 <Motion_Handle+0x5c>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d020      	beq.n	8001718 <Motion_Handle+0x54>
    {
        Motion_Set_Pwm(motor_data.speed_pwm[0], motor_data.speed_pwm[1],
 80016d6:	4b13      	ldr	r3, [pc, #76]	@ (8001724 <Motion_Handle+0x60>)
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff fa82 	bl	8000be4 <__aeabi_f2iz>
 80016e0:	4603      	mov	r3, r0
 80016e2:	b21c      	sxth	r4, r3
 80016e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001724 <Motion_Handle+0x60>)
 80016e6:	695b      	ldr	r3, [r3, #20]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fa7b 	bl	8000be4 <__aeabi_f2iz>
 80016ee:	4603      	mov	r3, r0
 80016f0:	b21d      	sxth	r5, r3
        		motor_data.speed_pwm[2], motor_data.speed_pwm[3]);
 80016f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001724 <Motion_Handle+0x60>)
 80016f4:	699b      	ldr	r3, [r3, #24]
        Motion_Set_Pwm(motor_data.speed_pwm[0], motor_data.speed_pwm[1],
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fa74 	bl	8000be4 <__aeabi_f2iz>
 80016fc:	4603      	mov	r3, r0
 80016fe:	b21e      	sxth	r6, r3
        		motor_data.speed_pwm[2], motor_data.speed_pwm[3]);
 8001700:	4b08      	ldr	r3, [pc, #32]	@ (8001724 <Motion_Handle+0x60>)
 8001702:	69db      	ldr	r3, [r3, #28]
        Motion_Set_Pwm(motor_data.speed_pwm[0], motor_data.speed_pwm[1],
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff fa6d 	bl	8000be4 <__aeabi_f2iz>
 800170a:	4603      	mov	r3, r0
 800170c:	b21b      	sxth	r3, r3
 800170e:	4632      	mov	r2, r6
 8001710:	4629      	mov	r1, r5
 8001712:	4620      	mov	r0, r4
 8001714:	f7ff fd30 	bl	8001178 <Motion_Set_Pwm>
    }
}
 8001718:	bf00      	nop
 800171a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800171c:	200000e0 	.word	0x200000e0
 8001720:	200000dc 	.word	0x200000dc
 8001724:	200000e8 	.word	0x200000e8

08001728 <Motor_Ignore_Dead_Zone>:



// Ignore PWM dead band  忽略PWM信号死区
static int16_t Motor_Ignore_Dead_Zone(int16_t pulse)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	80fb      	strh	r3, [r7, #6]
    if (pulse > 0) return pulse + MOTOR_IGNORE_PULSE;
 8001732:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001736:	2b00      	cmp	r3, #0
 8001738:	dd05      	ble.n	8001746 <Motor_Ignore_Dead_Zone+0x1e>
 800173a:	88fb      	ldrh	r3, [r7, #6]
 800173c:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 8001740:	b29b      	uxth	r3, r3
 8001742:	b21b      	sxth	r3, r3
 8001744:	e00a      	b.n	800175c <Motor_Ignore_Dead_Zone+0x34>
    if (pulse < 0) return pulse - MOTOR_IGNORE_PULSE;
 8001746:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800174a:	2b00      	cmp	r3, #0
 800174c:	da05      	bge.n	800175a <Motor_Ignore_Dead_Zone+0x32>
 800174e:	88fb      	ldrh	r3, [r7, #6]
 8001750:	f5a3 63c8 	sub.w	r3, r3, #1600	@ 0x640
 8001754:	b29b      	uxth	r3, r3
 8001756:	b21b      	sxth	r3, r3
 8001758:	e000      	b.n	800175c <Motor_Ignore_Dead_Zone+0x34>
    return 0;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr
	...

08001768 <Motor_Init>:

// The PWM port of the motor is initialized  电机PWM口初始化
void Motor_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800176c:	2100      	movs	r1, #0
 800176e:	4810      	ldr	r0, [pc, #64]	@ (80017b0 <Motor_Init+0x48>)
 8001770:	f005 f9d6 	bl	8006b20 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001774:	2104      	movs	r1, #4
 8001776:	480e      	ldr	r0, [pc, #56]	@ (80017b0 <Motor_Init+0x48>)
 8001778:	f006 f946 	bl	8007a08 <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800177c:	2108      	movs	r1, #8
 800177e:	480c      	ldr	r0, [pc, #48]	@ (80017b0 <Motor_Init+0x48>)
 8001780:	f006 f942 	bl	8007a08 <HAL_TIMEx_PWMN_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001784:	210c      	movs	r1, #12
 8001786:	480a      	ldr	r0, [pc, #40]	@ (80017b0 <Motor_Init+0x48>)
 8001788:	f005 f9ca 	bl	8006b20 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800178c:	2100      	movs	r1, #0
 800178e:	4809      	ldr	r0, [pc, #36]	@ (80017b4 <Motor_Init+0x4c>)
 8001790:	f005 f9c6 	bl	8006b20 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001794:	2104      	movs	r1, #4
 8001796:	4807      	ldr	r0, [pc, #28]	@ (80017b4 <Motor_Init+0x4c>)
 8001798:	f005 f9c2 	bl	8006b20 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800179c:	2108      	movs	r1, #8
 800179e:	4805      	ldr	r0, [pc, #20]	@ (80017b4 <Motor_Init+0x4c>)
 80017a0:	f005 f9be 	bl	8006b20 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80017a4:	210c      	movs	r1, #12
 80017a6:	4803      	ldr	r0, [pc, #12]	@ (80017b4 <Motor_Init+0x4c>)
 80017a8:	f005 f9ba 	bl	8006b20 <HAL_TIM_PWM_Start>
}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20001c10 	.word	0x20001c10
 80017b4:	20001dc0 	.word	0x20001dc0

080017b8 <Motor_Stop>:

// All motors stopped  所有电机停止
void Motor_Stop(uint8_t brake)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]
    if (brake != 0) brake = 1;
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <Motor_Stop+0x14>
 80017c8:	2301      	movs	r3, #1
 80017ca:	71fb      	strb	r3, [r7, #7]
    PWM_M1_A = brake * MOTOR_MAX_PULSE;
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80017d2:	fb03 f202 	mul.w	r2, r3, r2
 80017d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001848 <Motor_Stop+0x90>)
 80017d8:	635a      	str	r2, [r3, #52]	@ 0x34
    PWM_M1_B = brake * MOTOR_MAX_PULSE;
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80017e0:	fb03 f202 	mul.w	r2, r3, r2
 80017e4:	4b18      	ldr	r3, [pc, #96]	@ (8001848 <Motor_Stop+0x90>)
 80017e6:	639a      	str	r2, [r3, #56]	@ 0x38
    PWM_M2_A = brake * MOTOR_MAX_PULSE;
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80017ee:	fb03 f202 	mul.w	r2, r3, r2
 80017f2:	4b15      	ldr	r3, [pc, #84]	@ (8001848 <Motor_Stop+0x90>)
 80017f4:	63da      	str	r2, [r3, #60]	@ 0x3c
    PWM_M2_B = brake * MOTOR_MAX_PULSE;
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80017fc:	fb03 f202 	mul.w	r2, r3, r2
 8001800:	4b11      	ldr	r3, [pc, #68]	@ (8001848 <Motor_Stop+0x90>)
 8001802:	641a      	str	r2, [r3, #64]	@ 0x40
    PWM_M3_A = brake * MOTOR_MAX_PULSE;
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800180a:	fb03 f202 	mul.w	r2, r3, r2
 800180e:	4b0f      	ldr	r3, [pc, #60]	@ (800184c <Motor_Stop+0x94>)
 8001810:	641a      	str	r2, [r3, #64]	@ 0x40
    PWM_M3_B = brake * MOTOR_MAX_PULSE;
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8001818:	fb03 f202 	mul.w	r2, r3, r2
 800181c:	4b0b      	ldr	r3, [pc, #44]	@ (800184c <Motor_Stop+0x94>)
 800181e:	635a      	str	r2, [r3, #52]	@ 0x34
    PWM_M4_A = brake * MOTOR_MAX_PULSE;
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8001826:	fb03 f202 	mul.w	r2, r3, r2
 800182a:	4b08      	ldr	r3, [pc, #32]	@ (800184c <Motor_Stop+0x94>)
 800182c:	639a      	str	r2, [r3, #56]	@ 0x38
    PWM_M4_B = brake * MOTOR_MAX_PULSE;
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8001834:	fb03 f202 	mul.w	r2, r3, r2
 8001838:	4b04      	ldr	r3, [pc, #16]	@ (800184c <Motor_Stop+0x94>)
 800183a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	40013400 	.word	0x40013400
 800184c:	40012c00 	.word	0x40012c00

08001850 <Motor_Set_Pwm>:

// 设置电机速度，speed:±（3600-MOTOR_IGNORE_PULSE）, 0为停止
// Set motor speed, speed:± (3600-MOTOR_IGNORE_PULSE), 0 indicates stop
void Motor_Set_Pwm(uint8_t id, int16_t speed)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	460a      	mov	r2, r1
 800185a:	71fb      	strb	r3, [r7, #7]
 800185c:	4613      	mov	r3, r2
 800185e:	80bb      	strh	r3, [r7, #4]
    int16_t pulse = Motor_Ignore_Dead_Zone(speed);
 8001860:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ff5f 	bl	8001728 <Motor_Ignore_Dead_Zone>
 800186a:	4603      	mov	r3, r0
 800186c:	81fb      	strh	r3, [r7, #14]
    // Limit input  限制输入
    if (pulse >= MOTOR_MAX_PULSE)
 800186e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001872:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8001876:	db02      	blt.n	800187e <Motor_Set_Pwm+0x2e>
        pulse = MOTOR_MAX_PULSE;
 8001878:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800187c:	81fb      	strh	r3, [r7, #14]
    if (pulse <= -MOTOR_MAX_PULSE)
 800187e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001882:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 8001886:	dc02      	bgt.n	800188e <Motor_Set_Pwm+0x3e>
        pulse = -MOTOR_MAX_PULSE;
 8001888:	f24f 13f0 	movw	r3, #61936	@ 0xf1f0
 800188c:	81fb      	strh	r3, [r7, #14]

    switch (id)
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	3b01      	subs	r3, #1
 8001892:	2b03      	cmp	r3, #3
 8001894:	d866      	bhi.n	8001964 <Motor_Set_Pwm+0x114>
 8001896:	a201      	add	r2, pc, #4	@ (adr r2, 800189c <Motor_Set_Pwm+0x4c>)
 8001898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800189c:	080018ad 	.word	0x080018ad
 80018a0:	080018df 	.word	0x080018df
 80018a4:	08001911 	.word	0x08001911
 80018a8:	0800193b 	.word	0x0800193b
    {
    case MOTOR_ID_M1:
    {
        pulse = -pulse;
 80018ac:	89fb      	ldrh	r3, [r7, #14]
 80018ae:	425b      	negs	r3, r3
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	81fb      	strh	r3, [r7, #14]
        if (pulse >= 0)
 80018b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	db07      	blt.n	80018cc <Motor_Set_Pwm+0x7c>
        {
            PWM_M1_A = pulse;
 80018bc:	4a2c      	ldr	r2, [pc, #176]	@ (8001970 <Motor_Set_Pwm+0x120>)
 80018be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018c2:	6353      	str	r3, [r2, #52]	@ 0x34
            PWM_M1_B = 0;
 80018c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001970 <Motor_Set_Pwm+0x120>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	639a      	str	r2, [r3, #56]	@ 0x38
        else
        {
            PWM_M1_A = 0;
            PWM_M1_B = -pulse;
        }
        break;
 80018ca:	e04c      	b.n	8001966 <Motor_Set_Pwm+0x116>
            PWM_M1_A = 0;
 80018cc:	4b28      	ldr	r3, [pc, #160]	@ (8001970 <Motor_Set_Pwm+0x120>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	635a      	str	r2, [r3, #52]	@ 0x34
            PWM_M1_B = -pulse;
 80018d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018d6:	425a      	negs	r2, r3
 80018d8:	4b25      	ldr	r3, [pc, #148]	@ (8001970 <Motor_Set_Pwm+0x120>)
 80018da:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 80018dc:	e043      	b.n	8001966 <Motor_Set_Pwm+0x116>
    }
    case MOTOR_ID_M2:
    {
        pulse = -pulse;
 80018de:	89fb      	ldrh	r3, [r7, #14]
 80018e0:	425b      	negs	r3, r3
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	81fb      	strh	r3, [r7, #14]
        if (pulse >= 0)
 80018e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	db07      	blt.n	80018fe <Motor_Set_Pwm+0xae>
        {
            PWM_M2_A = pulse;
 80018ee:	4a20      	ldr	r2, [pc, #128]	@ (8001970 <Motor_Set_Pwm+0x120>)
 80018f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018f4:	63d3      	str	r3, [r2, #60]	@ 0x3c
            PWM_M2_B = 0;
 80018f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001970 <Motor_Set_Pwm+0x120>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	641a      	str	r2, [r3, #64]	@ 0x40
        else
        {
            PWM_M2_A = 0;
            PWM_M2_B = -pulse;
        }
        break;
 80018fc:	e033      	b.n	8001966 <Motor_Set_Pwm+0x116>
            PWM_M2_A = 0;
 80018fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001970 <Motor_Set_Pwm+0x120>)
 8001900:	2200      	movs	r2, #0
 8001902:	63da      	str	r2, [r3, #60]	@ 0x3c
            PWM_M2_B = -pulse;
 8001904:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001908:	425a      	negs	r2, r3
 800190a:	4b19      	ldr	r3, [pc, #100]	@ (8001970 <Motor_Set_Pwm+0x120>)
 800190c:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 800190e:	e02a      	b.n	8001966 <Motor_Set_Pwm+0x116>
    }

    case MOTOR_ID_M3:
    {
        if (pulse >= 0)
 8001910:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001914:	2b00      	cmp	r3, #0
 8001916:	db07      	blt.n	8001928 <Motor_Set_Pwm+0xd8>
        {
            PWM_M3_A = pulse;
 8001918:	4a16      	ldr	r2, [pc, #88]	@ (8001974 <Motor_Set_Pwm+0x124>)
 800191a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800191e:	6413      	str	r3, [r2, #64]	@ 0x40
            PWM_M3_B = 0;
 8001920:	4b14      	ldr	r3, [pc, #80]	@ (8001974 <Motor_Set_Pwm+0x124>)
 8001922:	2200      	movs	r2, #0
 8001924:	635a      	str	r2, [r3, #52]	@ 0x34
        else
        {
            PWM_M3_A = 0;
            PWM_M3_B = -pulse;
        }
        break;
 8001926:	e01e      	b.n	8001966 <Motor_Set_Pwm+0x116>
            PWM_M3_A = 0;
 8001928:	4b12      	ldr	r3, [pc, #72]	@ (8001974 <Motor_Set_Pwm+0x124>)
 800192a:	2200      	movs	r2, #0
 800192c:	641a      	str	r2, [r3, #64]	@ 0x40
            PWM_M3_B = -pulse;
 800192e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001932:	425a      	negs	r2, r3
 8001934:	4b0f      	ldr	r3, [pc, #60]	@ (8001974 <Motor_Set_Pwm+0x124>)
 8001936:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 8001938:	e015      	b.n	8001966 <Motor_Set_Pwm+0x116>
    }
    case MOTOR_ID_M4:
    {
        if (pulse >= 0)
 800193a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800193e:	2b00      	cmp	r3, #0
 8001940:	db07      	blt.n	8001952 <Motor_Set_Pwm+0x102>
        {
            PWM_M4_A = pulse;
 8001942:	4a0c      	ldr	r2, [pc, #48]	@ (8001974 <Motor_Set_Pwm+0x124>)
 8001944:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001948:	6393      	str	r3, [r2, #56]	@ 0x38
            PWM_M4_B = 0;
 800194a:	4b0a      	ldr	r3, [pc, #40]	@ (8001974 <Motor_Set_Pwm+0x124>)
 800194c:	2200      	movs	r2, #0
 800194e:	63da      	str	r2, [r3, #60]	@ 0x3c
        else
        {
            PWM_M4_A = 0;
            PWM_M4_B = -pulse;
        }
        break;
 8001950:	e009      	b.n	8001966 <Motor_Set_Pwm+0x116>
            PWM_M4_A = 0;
 8001952:	4b08      	ldr	r3, [pc, #32]	@ (8001974 <Motor_Set_Pwm+0x124>)
 8001954:	2200      	movs	r2, #0
 8001956:	639a      	str	r2, [r3, #56]	@ 0x38
            PWM_M4_B = -pulse;
 8001958:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800195c:	425a      	negs	r2, r3
 800195e:	4b05      	ldr	r3, [pc, #20]	@ (8001974 <Motor_Set_Pwm+0x124>)
 8001960:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 8001962:	e000      	b.n	8001966 <Motor_Set_Pwm+0x116>
    }

    default:
        break;
 8001964:	bf00      	nop
    }
}
 8001966:	bf00      	nop
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40013400 	.word	0x40013400
 8001974:	40012c00 	.word	0x40012c00

08001978 <PID_Param_Init>:
motor_pid_t pid_motor[4];


// Example Initialize PID parameters 初始化PID参数
void PID_Param_Init(void)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
    for (int i = 0; i < MAX_MOTOR; i++)
 800197e:	2300      	movs	r3, #0
 8001980:	607b      	str	r3, [r7, #4]
 8001982:	e062      	b.n	8001a4a <PID_Param_Init+0xd2>
    {
        pid_motor[i].target_val = 0.0;
 8001984:	4935      	ldr	r1, [pc, #212]	@ (8001a5c <PID_Param_Init+0xe4>)
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	4613      	mov	r3, r2
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	4413      	add	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	440b      	add	r3, r1
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
        pid_motor[i].pwm_output = 0.0;
 8001998:	4930      	ldr	r1, [pc, #192]	@ (8001a5c <PID_Param_Init+0xe4>)
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	4613      	mov	r3, r2
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	4413      	add	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	440b      	add	r3, r1
 80019a6:	3304      	adds	r3, #4
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
        pid_motor[i].err = 0.0;
 80019ae:	492b      	ldr	r1, [pc, #172]	@ (8001a5c <PID_Param_Init+0xe4>)
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	4613      	mov	r3, r2
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	4413      	add	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	440b      	add	r3, r1
 80019bc:	3314      	adds	r3, #20
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
        pid_motor[i].err_last = 0.0;
 80019c4:	4925      	ldr	r1, [pc, #148]	@ (8001a5c <PID_Param_Init+0xe4>)
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	4613      	mov	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	4413      	add	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	440b      	add	r3, r1
 80019d2:	3318      	adds	r3, #24
 80019d4:	f04f 0200 	mov.w	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
        pid_motor[i].err_next = 0.0;
 80019da:	4920      	ldr	r1, [pc, #128]	@ (8001a5c <PID_Param_Init+0xe4>)
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	4613      	mov	r3, r2
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	4413      	add	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	440b      	add	r3, r1
 80019e8:	331c      	adds	r3, #28
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
        pid_motor[i].integral = 0.0;
 80019f0:	491a      	ldr	r1, [pc, #104]	@ (8001a5c <PID_Param_Init+0xe4>)
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	4613      	mov	r3, r2
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	4413      	add	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	440b      	add	r3, r1
 80019fe:	3320      	adds	r3, #32
 8001a00:	f04f 0200 	mov.w	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]

        pid_motor[i].Kp = PID_DEF_KP;
 8001a06:	4915      	ldr	r1, [pc, #84]	@ (8001a5c <PID_Param_Init+0xe4>)
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	4413      	add	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	440b      	add	r3, r1
 8001a14:	3308      	adds	r3, #8
 8001a16:	4a12      	ldr	r2, [pc, #72]	@ (8001a60 <PID_Param_Init+0xe8>)
 8001a18:	601a      	str	r2, [r3, #0]
        pid_motor[i].Ki = PID_DEF_KI;
 8001a1a:	4910      	ldr	r1, [pc, #64]	@ (8001a5c <PID_Param_Init+0xe4>)
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	4413      	add	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	440b      	add	r3, r1
 8001a28:	330c      	adds	r3, #12
 8001a2a:	4a0e      	ldr	r2, [pc, #56]	@ (8001a64 <PID_Param_Init+0xec>)
 8001a2c:	601a      	str	r2, [r3, #0]
        pid_motor[i].Kd = PID_DEF_KD;
 8001a2e:	490b      	ldr	r1, [pc, #44]	@ (8001a5c <PID_Param_Init+0xe4>)
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	4613      	mov	r3, r2
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	4413      	add	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	440b      	add	r3, r1
 8001a3c:	3310      	adds	r3, #16
 8001a3e:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001a42:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MAX_MOTOR; i++)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3301      	adds	r3, #1
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b03      	cmp	r3, #3
 8001a4e:	dd99      	ble.n	8001984 <PID_Param_Init+0xc>
    }
}
 8001a50:	bf00      	nop
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr
 8001a5c:	20000110 	.word	0x20000110
 8001a60:	3f4ccccd 	.word	0x3f4ccccd
 8001a64:	3d75c28f 	.word	0x3d75c28f

08001a68 <PID_Incre_Calc>:

// Incremental PID calculation formula  增量式PID计算公式
float PID_Incre_Calc(motor_pid_t *pid, float actual_val)
{
 8001a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	6039      	str	r1, [r7, #0]
    pid->err = pid->target_val - actual_val;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6839      	ldr	r1, [r7, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7fe fde2 	bl	8000644 <__aeabi_fsub>
 8001a80:	4603      	mov	r3, r0
 8001a82:	461a      	mov	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	615a      	str	r2, [r3, #20]
    pid->pwm_output += pid->Kp * (pid->err - pid->err_next)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685c      	ldr	r4, [r3, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689d      	ldr	r5, [r3, #8]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	695a      	ldr	r2, [r3, #20]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69db      	ldr	r3, [r3, #28]
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	f7fe fdd2 	bl	8000644 <__aeabi_fsub>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4628      	mov	r0, r5
 8001aa6:	f7fe fed7 	bl	8000858 <__aeabi_fmul>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	461d      	mov	r5, r3
                    + pid->Ki * pid->err
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68da      	ldr	r2, [r3, #12]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4610      	mov	r0, r2
 8001aba:	f7fe fecd 	bl	8000858 <__aeabi_fmul>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4628      	mov	r0, r5
 8001ac4:	f7fe fdc0 	bl	8000648 <__addsf3>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	4698      	mov	r8, r3
                    + pid->Kd * (pid->err - 2 * pid->err_next + pid->err_last);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	691d      	ldr	r5, [r3, #16]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	695e      	ldr	r6, [r3, #20]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69db      	ldr	r3, [r3, #28]
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7fe fdb4 	bl	8000648 <__addsf3>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4630      	mov	r0, r6
 8001ae6:	f7fe fdad 	bl	8000644 <__aeabi_fsub>
 8001aea:	4603      	mov	r3, r0
 8001aec:	461a      	mov	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	4619      	mov	r1, r3
 8001af4:	4610      	mov	r0, r2
 8001af6:	f7fe fda7 	bl	8000648 <__addsf3>
 8001afa:	4603      	mov	r3, r0
 8001afc:	4619      	mov	r1, r3
 8001afe:	4628      	mov	r0, r5
 8001b00:	f7fe feaa 	bl	8000858 <__aeabi_fmul>
 8001b04:	4603      	mov	r3, r0
 8001b06:	4619      	mov	r1, r3
 8001b08:	4640      	mov	r0, r8
 8001b0a:	f7fe fd9d 	bl	8000648 <__addsf3>
 8001b0e:	4603      	mov	r3, r0
    pid->pwm_output += pid->Kp * (pid->err - pid->err_next)
 8001b10:	4619      	mov	r1, r3
 8001b12:	4620      	mov	r0, r4
 8001b14:	f7fe fd98 	bl	8000648 <__addsf3>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	605a      	str	r2, [r3, #4]
    pid->err_last = pid->err_next;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	69da      	ldr	r2, [r3, #28]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	619a      	str	r2, [r3, #24]
    pid->err_next = pid->err;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	695a      	ldr	r2, [r3, #20]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	61da      	str	r2, [r3, #28]
    if (pid->pwm_output > MOTOR_MAX_PULSE)  pid->pwm_output = MOTOR_MAX_PULSE;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	490e      	ldr	r1, [pc, #56]	@ (8001b70 <PID_Incre_Calc+0x108>)
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff f84a 	bl	8000bd0 <__aeabi_fcmpgt>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d002      	beq.n	8001b48 <PID_Incre_Calc+0xe0>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a0a      	ldr	r2, [pc, #40]	@ (8001b70 <PID_Incre_Calc+0x108>)
 8001b46:	605a      	str	r2, [r3, #4]
    if (pid->pwm_output < -MOTOR_MAX_PULSE) pid->pwm_output = -MOTOR_MAX_PULSE;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	4909      	ldr	r1, [pc, #36]	@ (8001b74 <PID_Incre_Calc+0x10c>)
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff f820 	bl	8000b94 <__aeabi_fcmplt>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d002      	beq.n	8001b60 <PID_Incre_Calc+0xf8>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a05      	ldr	r2, [pc, #20]	@ (8001b74 <PID_Incre_Calc+0x10c>)
 8001b5e:	605a      	str	r2, [r3, #4]
    return pid->pwm_output;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b6e:	bf00      	nop
 8001b70:	45610000 	.word	0x45610000
 8001b74:	c5610000 	.word	0xc5610000

08001b78 <PID_Calc_Motor>:

// PID Calculates the output value  PID计算输出值
void PID_Calc_Motor(motor_data_t* motor)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < MAX_MOTOR; i++)
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	e016      	b.n	8001bb4 <PID_Calc_Motor+0x3c>
    {
        motor->speed_pwm[i] = PID_Incre_Calc(&pid_motor[i], motor->speed_mm_s[i]);
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	4413      	add	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4a0c      	ldr	r2, [pc, #48]	@ (8001bc4 <PID_Calc_Motor+0x4c>)
 8001b92:	1898      	adds	r0, r3, r2
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f7ff ff63 	bl	8001a68 <PID_Incre_Calc>
 8001ba2:	4601      	mov	r1, r0
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	3204      	adds	r2, #4
 8001baa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = 0; i < MAX_MOTOR; i++)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2b03      	cmp	r3, #3
 8001bb8:	dde5      	ble.n	8001b86 <PID_Calc_Motor+0xe>
    }
}
 8001bba:	bf00      	nop
 8001bbc:	bf00      	nop
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000110 	.word	0x20000110

08001bc8 <PID_Clear_Motor>:
    }
}

// Clearing PID Data  清除PID数据
void PID_Clear_Motor(uint8_t motor_id)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	71fb      	strb	r3, [r7, #7]
    if (motor_id > MAX_MOTOR) return;
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	2b04      	cmp	r3, #4
 8001bd6:	d87b      	bhi.n	8001cd0 <PID_Clear_Motor+0x108>

    if (motor_id == MAX_MOTOR)
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	d140      	bne.n	8001c60 <PID_Clear_Motor+0x98>
    {
        for (int i = 0; i < MAX_MOTOR; i++)
 8001bde:	2300      	movs	r3, #0
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	e039      	b.n	8001c58 <PID_Clear_Motor+0x90>
        {
            pid_motor[i].pwm_output = 0.0;
 8001be4:	493d      	ldr	r1, [pc, #244]	@ (8001cdc <PID_Clear_Motor+0x114>)
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	4613      	mov	r3, r2
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	4413      	add	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	3304      	adds	r3, #4
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
            pid_motor[i].err = 0.0;
 8001bfa:	4938      	ldr	r1, [pc, #224]	@ (8001cdc <PID_Clear_Motor+0x114>)
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	4413      	add	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	440b      	add	r3, r1
 8001c08:	3314      	adds	r3, #20
 8001c0a:	f04f 0200 	mov.w	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
            pid_motor[i].err_last = 0.0;
 8001c10:	4932      	ldr	r1, [pc, #200]	@ (8001cdc <PID_Clear_Motor+0x114>)
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	4613      	mov	r3, r2
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	4413      	add	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	3318      	adds	r3, #24
 8001c20:	f04f 0200 	mov.w	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
            pid_motor[i].err_next = 0.0;
 8001c26:	492d      	ldr	r1, [pc, #180]	@ (8001cdc <PID_Clear_Motor+0x114>)
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	4413      	add	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	440b      	add	r3, r1
 8001c34:	331c      	adds	r3, #28
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
            pid_motor[i].integral = 0.0;
 8001c3c:	4927      	ldr	r1, [pc, #156]	@ (8001cdc <PID_Clear_Motor+0x114>)
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	4613      	mov	r3, r2
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	4413      	add	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	440b      	add	r3, r1
 8001c4a:	3320      	adds	r3, #32
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < MAX_MOTOR; i++)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	3301      	adds	r3, #1
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2b03      	cmp	r3, #3
 8001c5c:	ddc2      	ble.n	8001be4 <PID_Clear_Motor+0x1c>
 8001c5e:	e038      	b.n	8001cd2 <PID_Clear_Motor+0x10a>
        }
    }
    else
    {
        pid_motor[motor_id].pwm_output = 0.0;
 8001c60:	79fa      	ldrb	r2, [r7, #7]
 8001c62:	491e      	ldr	r1, [pc, #120]	@ (8001cdc <PID_Clear_Motor+0x114>)
 8001c64:	4613      	mov	r3, r2
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	4413      	add	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	3304      	adds	r3, #4
 8001c70:	f04f 0200 	mov.w	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].err = 0.0;
 8001c76:	79fa      	ldrb	r2, [r7, #7]
 8001c78:	4918      	ldr	r1, [pc, #96]	@ (8001cdc <PID_Clear_Motor+0x114>)
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	4413      	add	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	440b      	add	r3, r1
 8001c84:	3314      	adds	r3, #20
 8001c86:	f04f 0200 	mov.w	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].err_last = 0.0;
 8001c8c:	79fa      	ldrb	r2, [r7, #7]
 8001c8e:	4913      	ldr	r1, [pc, #76]	@ (8001cdc <PID_Clear_Motor+0x114>)
 8001c90:	4613      	mov	r3, r2
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	4413      	add	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	440b      	add	r3, r1
 8001c9a:	3318      	adds	r3, #24
 8001c9c:	f04f 0200 	mov.w	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].err_next = 0.0;
 8001ca2:	79fa      	ldrb	r2, [r7, #7]
 8001ca4:	490d      	ldr	r1, [pc, #52]	@ (8001cdc <PID_Clear_Motor+0x114>)
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	4413      	add	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	440b      	add	r3, r1
 8001cb0:	331c      	adds	r3, #28
 8001cb2:	f04f 0200 	mov.w	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].integral = 0.0;
 8001cb8:	79fa      	ldrb	r2, [r7, #7]
 8001cba:	4908      	ldr	r1, [pc, #32]	@ (8001cdc <PID_Clear_Motor+0x114>)
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	4413      	add	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	3320      	adds	r3, #32
 8001cc8:	f04f 0200 	mov.w	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	e000      	b.n	8001cd2 <PID_Clear_Motor+0x10a>
    if (motor_id > MAX_MOTOR) return;
 8001cd0:	bf00      	nop
    }
}
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	20000110 	.word	0x20000110

08001ce0 <PID_Set_Motor_Target>:

// Set PID target speed, unit: mm/s  设置PID目标速度，单位为：mm/s
void PID_Set_Motor_Target(uint8_t motor_id, float target)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	6039      	str	r1, [r7, #0]
 8001cea:	71fb      	strb	r3, [r7, #7]
    if (motor_id > MAX_MOTOR) return;
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	d81f      	bhi.n	8001d32 <PID_Set_Motor_Target+0x52>

    if (motor_id == MAX_MOTOR)
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	2b04      	cmp	r3, #4
 8001cf6:	d112      	bne.n	8001d1e <PID_Set_Motor_Target+0x3e>
    {
        for (int i = 0; i < MAX_MOTOR; i++)
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	e00b      	b.n	8001d16 <PID_Set_Motor_Target+0x36>
        {
            pid_motor[i].target_val = target;
 8001cfe:	490f      	ldr	r1, [pc, #60]	@ (8001d3c <PID_Set_Motor_Target+0x5c>)
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	4613      	mov	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	4413      	add	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	440b      	add	r3, r1
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < MAX_MOTOR; i++)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	3301      	adds	r3, #1
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2b03      	cmp	r3, #3
 8001d1a:	ddf0      	ble.n	8001cfe <PID_Set_Motor_Target+0x1e>
 8001d1c:	e00a      	b.n	8001d34 <PID_Set_Motor_Target+0x54>
        }
    }
    else
    {
        pid_motor[motor_id].target_val = target;
 8001d1e:	79fa      	ldrb	r2, [r7, #7]
 8001d20:	4906      	ldr	r1, [pc, #24]	@ (8001d3c <PID_Set_Motor_Target+0x5c>)
 8001d22:	4613      	mov	r3, r2
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	4413      	add	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	e000      	b.n	8001d34 <PID_Set_Motor_Target+0x54>
    if (motor_id > MAX_MOTOR) return;
 8001d32:	bf00      	nop
    }
}
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr
 8001d3c:	20000110 	.word	0x20000110

08001d40 <PwmServo_Angle_To_Pulse>:
uint16_t g_angle_num[MAX_PWM_SERVO] = {149, 149, 149, 149};

// 角度转化为脉冲数, angle= [0, 180]
// The Angle is converted to the number of pulses, angle= [0, 180]
static uint16_t PwmServo_Angle_To_Pulse(uint8_t angle)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
	uint16_t pulse = (angle * 11 + 500) / 10;
 8001d4a:	79fa      	ldrb	r2, [r7, #7]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4413      	add	r3, r2
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	4413      	add	r3, r2
 8001d56:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001d5a:	4a06      	ldr	r2, [pc, #24]	@ (8001d74 <PwmServo_Angle_To_Pulse+0x34>)
 8001d5c:	fb82 1203 	smull	r1, r2, r2, r3
 8001d60:	1092      	asrs	r2, r2, #2
 8001d62:	17db      	asrs	r3, r3, #31
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	81fb      	strh	r3, [r7, #14]
	return pulse;
 8001d68:	89fb      	ldrh	r3, [r7, #14]
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr
 8001d74:	66666667 	.word	0x66666667

08001d78 <PwmServo_Handle>:

// PWM舵机控制，在定时器中调用，模拟输出PWM信号
// PWM steering gear control, in the timer call, analog output PWM signal
void PwmServo_Handle(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
	g_pwm_pulse++;
 8001d7c:	4b29      	ldr	r3, [pc, #164]	@ (8001e24 <PwmServo_Handle+0xac>)
 8001d7e:	881b      	ldrh	r3, [r3, #0]
 8001d80:	3301      	adds	r3, #1
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	4b27      	ldr	r3, [pc, #156]	@ (8001e24 <PwmServo_Handle+0xac>)
 8001d86:	801a      	strh	r2, [r3, #0]

#ifdef USE_SERVO_J1
	if (g_pwm_pulse <= g_angle_num[0])
 8001d88:	4b27      	ldr	r3, [pc, #156]	@ (8001e28 <PwmServo_Handle+0xb0>)
 8001d8a:	881a      	ldrh	r2, [r3, #0]
 8001d8c:	4b25      	ldr	r3, [pc, #148]	@ (8001e24 <PwmServo_Handle+0xac>)
 8001d8e:	881b      	ldrh	r3, [r3, #0]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d305      	bcc.n	8001da0 <PwmServo_Handle+0x28>
		SERVO_1_HIGH();
 8001d94:	2201      	movs	r2, #1
 8001d96:	2108      	movs	r1, #8
 8001d98:	4824      	ldr	r0, [pc, #144]	@ (8001e2c <PwmServo_Handle+0xb4>)
 8001d9a:	f002 faa6 	bl	80042ea <HAL_GPIO_WritePin>
 8001d9e:	e004      	b.n	8001daa <PwmServo_Handle+0x32>
	else
		SERVO_1_LOW();
 8001da0:	2200      	movs	r2, #0
 8001da2:	2108      	movs	r1, #8
 8001da4:	4821      	ldr	r0, [pc, #132]	@ (8001e2c <PwmServo_Handle+0xb4>)
 8001da6:	f002 faa0 	bl	80042ea <HAL_GPIO_WritePin>
#endif

#ifdef USE_SERVO_J2
	if (g_pwm_pulse <= g_angle_num[1])
 8001daa:	4b1f      	ldr	r3, [pc, #124]	@ (8001e28 <PwmServo_Handle+0xb0>)
 8001dac:	885a      	ldrh	r2, [r3, #2]
 8001dae:	4b1d      	ldr	r3, [pc, #116]	@ (8001e24 <PwmServo_Handle+0xac>)
 8001db0:	881b      	ldrh	r3, [r3, #0]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d305      	bcc.n	8001dc2 <PwmServo_Handle+0x4a>
		SERVO_2_HIGH();
 8001db6:	2201      	movs	r2, #1
 8001db8:	2104      	movs	r1, #4
 8001dba:	481c      	ldr	r0, [pc, #112]	@ (8001e2c <PwmServo_Handle+0xb4>)
 8001dbc:	f002 fa95 	bl	80042ea <HAL_GPIO_WritePin>
 8001dc0:	e004      	b.n	8001dcc <PwmServo_Handle+0x54>
	else
		SERVO_2_LOW();
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	2104      	movs	r1, #4
 8001dc6:	4819      	ldr	r0, [pc, #100]	@ (8001e2c <PwmServo_Handle+0xb4>)
 8001dc8:	f002 fa8f 	bl	80042ea <HAL_GPIO_WritePin>
#endif

#ifdef USE_SERVO_J3
	if (g_pwm_pulse <= g_angle_num[2])
 8001dcc:	4b16      	ldr	r3, [pc, #88]	@ (8001e28 <PwmServo_Handle+0xb0>)
 8001dce:	889a      	ldrh	r2, [r3, #4]
 8001dd0:	4b14      	ldr	r3, [pc, #80]	@ (8001e24 <PwmServo_Handle+0xac>)
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d305      	bcc.n	8001de4 <PwmServo_Handle+0x6c>
		SERVO_3_HIGH();
 8001dd8:	2201      	movs	r2, #1
 8001dda:	2102      	movs	r1, #2
 8001ddc:	4813      	ldr	r0, [pc, #76]	@ (8001e2c <PwmServo_Handle+0xb4>)
 8001dde:	f002 fa84 	bl	80042ea <HAL_GPIO_WritePin>
 8001de2:	e004      	b.n	8001dee <PwmServo_Handle+0x76>
	else
		SERVO_3_LOW();
 8001de4:	2200      	movs	r2, #0
 8001de6:	2102      	movs	r1, #2
 8001de8:	4810      	ldr	r0, [pc, #64]	@ (8001e2c <PwmServo_Handle+0xb4>)
 8001dea:	f002 fa7e 	bl	80042ea <HAL_GPIO_WritePin>
#endif

#ifdef USE_SERVO_J4
	if (g_pwm_pulse <= g_angle_num[3])
 8001dee:	4b0e      	ldr	r3, [pc, #56]	@ (8001e28 <PwmServo_Handle+0xb0>)
 8001df0:	88da      	ldrh	r2, [r3, #6]
 8001df2:	4b0c      	ldr	r3, [pc, #48]	@ (8001e24 <PwmServo_Handle+0xac>)
 8001df4:	881b      	ldrh	r3, [r3, #0]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d305      	bcc.n	8001e06 <PwmServo_Handle+0x8e>
		SERVO_4_HIGH();
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	480b      	ldr	r0, [pc, #44]	@ (8001e2c <PwmServo_Handle+0xb4>)
 8001e00:	f002 fa73 	bl	80042ea <HAL_GPIO_WritePin>
 8001e04:	e004      	b.n	8001e10 <PwmServo_Handle+0x98>
	else
		SERVO_4_LOW();
 8001e06:	2200      	movs	r2, #0
 8001e08:	2101      	movs	r1, #1
 8001e0a:	4808      	ldr	r0, [pc, #32]	@ (8001e2c <PwmServo_Handle+0xb4>)
 8001e0c:	f002 fa6d 	bl	80042ea <HAL_GPIO_WritePin>
#endif

	if (g_pwm_pulse >= 2000)
 8001e10:	4b04      	ldr	r3, [pc, #16]	@ (8001e24 <PwmServo_Handle+0xac>)
 8001e12:	881b      	ldrh	r3, [r3, #0]
 8001e14:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001e18:	d302      	bcc.n	8001e20 <PwmServo_Handle+0xa8>
		g_pwm_pulse = 0;
 8001e1a:	4b02      	ldr	r3, [pc, #8]	@ (8001e24 <PwmServo_Handle+0xac>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	801a      	strh	r2, [r3, #0]
}
 8001e20:	bf00      	nop
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	200001a0 	.word	0x200001a0
 8001e28:	20000004 	.word	0x20000004
 8001e2c:	40011000 	.word	0x40011000

08001e30 <PwmServo_Init>:

// Initialize the steering gear  舵机初始化
void PwmServo_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_PWM_SERVO; i++)
 8001e36:	2300      	movs	r3, #0
 8001e38:	607b      	str	r3, [r7, #4]
 8001e3a:	e014      	b.n	8001e66 <PwmServo_Init+0x36>
	{
		g_pwm_angle[i] = 90;
 8001e3c:	4a0e      	ldr	r2, [pc, #56]	@ (8001e78 <PwmServo_Init+0x48>)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	225a      	movs	r2, #90	@ 0x5a
 8001e44:	701a      	strb	r2, [r3, #0]
		g_angle_num[i] = PwmServo_Angle_To_Pulse(g_pwm_angle[i]);
 8001e46:	4a0c      	ldr	r2, [pc, #48]	@ (8001e78 <PwmServo_Init+0x48>)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff ff76 	bl	8001d40 <PwmServo_Angle_To_Pulse>
 8001e54:	4603      	mov	r3, r0
 8001e56:	4619      	mov	r1, r3
 8001e58:	4a08      	ldr	r2, [pc, #32]	@ (8001e7c <PwmServo_Init+0x4c>)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < MAX_PWM_SERVO; i++)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3301      	adds	r3, #1
 8001e64:	607b      	str	r3, [r7, #4]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b03      	cmp	r3, #3
 8001e6a:	dde7      	ble.n	8001e3c <PwmServo_Init+0xc>
	}
}
 8001e6c:	bf00      	nop
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20000000 	.word	0x20000000
 8001e7c:	20000004 	.word	0x20000004

08001e80 <PwmServo_Set_Angle>:

// 设置pwm舵机角度，index=0~MAX_PWM_SERVO-1，angle为0-180
// Set the PWM servo Angle, index=0~MAX_PWM_SERVO, Angle to 0-180
void PwmServo_Set_Angle(uint8_t index, uint8_t angle)
{
 8001e80:	b590      	push	{r4, r7, lr}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	460a      	mov	r2, r1
 8001e8a:	71fb      	strb	r3, [r7, #7]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	71bb      	strb	r3, [r7, #6]
	if (index >= MAX_PWM_SERVO)
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	2b03      	cmp	r3, #3
 8001e94:	d811      	bhi.n	8001eba <PwmServo_Set_Angle+0x3a>
		return;
	if (angle > 180)
 8001e96:	79bb      	ldrb	r3, [r7, #6]
 8001e98:	2bb4      	cmp	r3, #180	@ 0xb4
 8001e9a:	d810      	bhi.n	8001ebe <PwmServo_Set_Angle+0x3e>
		return;
	g_pwm_angle[index] = angle;
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	490a      	ldr	r1, [pc, #40]	@ (8001ec8 <PwmServo_Set_Angle+0x48>)
 8001ea0:	79ba      	ldrb	r2, [r7, #6]
 8001ea2:	54ca      	strb	r2, [r1, r3]
	g_angle_num[index] = PwmServo_Angle_To_Pulse(angle);
 8001ea4:	79fc      	ldrb	r4, [r7, #7]
 8001ea6:	79bb      	ldrb	r3, [r7, #6]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff ff49 	bl	8001d40 <PwmServo_Angle_To_Pulse>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4b06      	ldr	r3, [pc, #24]	@ (8001ecc <PwmServo_Set_Angle+0x4c>)
 8001eb4:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 8001eb8:	e002      	b.n	8001ec0 <PwmServo_Set_Angle+0x40>
		return;
 8001eba:	bf00      	nop
 8001ebc:	e000      	b.n	8001ec0 <PwmServo_Set_Angle+0x40>
		return;
 8001ebe:	bf00      	nop
}
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd90      	pop	{r4, r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000000 	.word	0x20000000
 8001ecc:	20000004 	.word	0x20000004

08001ed0 <PwmServo_Set_Angle_All>:

// 设置全部pwm舵机的角度
// Set the Angle of all PWM steering gear
void PwmServo_Set_Angle_All(uint8_t angle_s1, uint8_t angle_s2, uint8_t angle_s3, uint8_t angle_s4)
{
 8001ed0:	b590      	push	{r4, r7, lr}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4604      	mov	r4, r0
 8001ed8:	4608      	mov	r0, r1
 8001eda:	4611      	mov	r1, r2
 8001edc:	461a      	mov	r2, r3
 8001ede:	4623      	mov	r3, r4
 8001ee0:	71fb      	strb	r3, [r7, #7]
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	71bb      	strb	r3, [r7, #6]
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	717b      	strb	r3, [r7, #5]
 8001eea:	4613      	mov	r3, r2
 8001eec:	713b      	strb	r3, [r7, #4]
	if (angle_s1 <= 180)
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	2bb4      	cmp	r3, #180	@ 0xb4
 8001ef2:	d80a      	bhi.n	8001f0a <PwmServo_Set_Angle_All+0x3a>
	{
		g_pwm_angle[0] = angle_s1;
 8001ef4:	4a1c      	ldr	r2, [pc, #112]	@ (8001f68 <PwmServo_Set_Angle_All+0x98>)
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
 8001ef8:	7013      	strb	r3, [r2, #0]
		g_angle_num[0] = PwmServo_Angle_To_Pulse(angle_s1);
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff ff1f 	bl	8001d40 <PwmServo_Angle_To_Pulse>
 8001f02:	4603      	mov	r3, r0
 8001f04:	461a      	mov	r2, r3
 8001f06:	4b19      	ldr	r3, [pc, #100]	@ (8001f6c <PwmServo_Set_Angle_All+0x9c>)
 8001f08:	801a      	strh	r2, [r3, #0]
	}

	if (angle_s2 <= 180)
 8001f0a:	79bb      	ldrb	r3, [r7, #6]
 8001f0c:	2bb4      	cmp	r3, #180	@ 0xb4
 8001f0e:	d80a      	bhi.n	8001f26 <PwmServo_Set_Angle_All+0x56>
	{
		g_pwm_angle[1] = angle_s2;
 8001f10:	4a15      	ldr	r2, [pc, #84]	@ (8001f68 <PwmServo_Set_Angle_All+0x98>)
 8001f12:	79bb      	ldrb	r3, [r7, #6]
 8001f14:	7053      	strb	r3, [r2, #1]
		g_angle_num[1] = PwmServo_Angle_To_Pulse(angle_s2);
 8001f16:	79bb      	ldrb	r3, [r7, #6]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff ff11 	bl	8001d40 <PwmServo_Angle_To_Pulse>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	461a      	mov	r2, r3
 8001f22:	4b12      	ldr	r3, [pc, #72]	@ (8001f6c <PwmServo_Set_Angle_All+0x9c>)
 8001f24:	805a      	strh	r2, [r3, #2]
	}

	if (angle_s3 <= 180)
 8001f26:	797b      	ldrb	r3, [r7, #5]
 8001f28:	2bb4      	cmp	r3, #180	@ 0xb4
 8001f2a:	d80a      	bhi.n	8001f42 <PwmServo_Set_Angle_All+0x72>
	{
		g_pwm_angle[2] = angle_s3;
 8001f2c:	4a0e      	ldr	r2, [pc, #56]	@ (8001f68 <PwmServo_Set_Angle_All+0x98>)
 8001f2e:	797b      	ldrb	r3, [r7, #5]
 8001f30:	7093      	strb	r3, [r2, #2]
		g_angle_num[2] = PwmServo_Angle_To_Pulse(angle_s3);
 8001f32:	797b      	ldrb	r3, [r7, #5]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff ff03 	bl	8001d40 <PwmServo_Angle_To_Pulse>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f6c <PwmServo_Set_Angle_All+0x9c>)
 8001f40:	809a      	strh	r2, [r3, #4]
	}

	if (angle_s4 <= 180)
 8001f42:	793b      	ldrb	r3, [r7, #4]
 8001f44:	2bb4      	cmp	r3, #180	@ 0xb4
 8001f46:	d80a      	bhi.n	8001f5e <PwmServo_Set_Angle_All+0x8e>
	{
		g_pwm_angle[3] = angle_s4;
 8001f48:	4a07      	ldr	r2, [pc, #28]	@ (8001f68 <PwmServo_Set_Angle_All+0x98>)
 8001f4a:	793b      	ldrb	r3, [r7, #4]
 8001f4c:	70d3      	strb	r3, [r2, #3]
		g_angle_num[3] = PwmServo_Angle_To_Pulse(angle_s4);
 8001f4e:	793b      	ldrb	r3, [r7, #4]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fef5 	bl	8001d40 <PwmServo_Angle_To_Pulse>
 8001f56:	4603      	mov	r3, r0
 8001f58:	461a      	mov	r2, r3
 8001f5a:	4b04      	ldr	r3, [pc, #16]	@ (8001f6c <PwmServo_Set_Angle_All+0x9c>)
 8001f5c:	80da      	strh	r2, [r3, #6]
	}
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd90      	pop	{r4, r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20000000 	.word	0x20000000
 8001f6c:	20000004 	.word	0x20000004

08001f70 <HAL_TIM_PeriodElapsedCallback>:

// Timer interrupts the callback function  定时器中断回调函数
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim7.Instance)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	4b04      	ldr	r3, [pc, #16]	@ (8001f90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d101      	bne.n	8001f88 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		PwmServo_Handle();
 8001f84:	f7ff fef8 	bl	8001d78 <PwmServo_Handle>
	}
}
 8001f88:	bf00      	nop
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	20001d78 	.word	0x20001d78

08001f94 <USART1_Init>:

uint8_t RxTemp = 0;

// Initialize USART1  初始化串口1
void USART1_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxTemp, 1);
 8001f98:	2201      	movs	r2, #1
 8001f9a:	4903      	ldr	r1, [pc, #12]	@ (8001fa8 <USART1_Init+0x14>)
 8001f9c:	4803      	ldr	r0, [pc, #12]	@ (8001fac <USART1_Init+0x18>)
 8001f9e:	f005 ffad 	bl	8007efc <HAL_UART_Receive_IT>
}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	200001a2 	.word	0x200001a2
 8001fac:	20001e08 	.word	0x20001e08

08001fb0 <USART1_Send_U8>:

// The serial port sends one byte  串口发送一个字节
void USART1_Send_U8(uint8_t ch)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001fba:	1df9      	adds	r1, r7, #7
 8001fbc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	4803      	ldr	r0, [pc, #12]	@ (8001fd0 <USART1_Send_U8+0x20>)
 8001fc4:	f005 ff0f 	bl	8007de6 <HAL_UART_Transmit>
}
 8001fc8:	bf00      	nop
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20001e08 	.word	0x20001e08

08001fd4 <HAL_UART_RxCpltCallback>:
    #endif
}

// The serial port receiving is interrupted. Procedure  串口接收完成中断
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
    /* NOTE : This function should not be modified, when the callback is needed,
              the HAL_UART_RxCpltCallback can be implemented in the user file
     */
    // 测试发送数据，实际应用中不应该在中断中发送数据
    // Test sending data. In practice, data should not be sent during interrupts  
    USART1_Send_U8(RxTemp);
 8001fdc:	4b06      	ldr	r3, [pc, #24]	@ (8001ff8 <HAL_UART_RxCpltCallback+0x24>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff ffe5 	bl	8001fb0 <USART1_Send_U8>

    // Continue receiving data  继续接收数据
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxTemp, 1);
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	4903      	ldr	r1, [pc, #12]	@ (8001ff8 <HAL_UART_RxCpltCallback+0x24>)
 8001fea:	4804      	ldr	r0, [pc, #16]	@ (8001ffc <HAL_UART_RxCpltCallback+0x28>)
 8001fec:	f005 ff86 	bl	8007efc <HAL_UART_Receive_IT>
}
 8001ff0:	bf00      	nop
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	200001a2 	.word	0x200001a2
 8001ffc:	20001e08 	.word	0x20001e08

08002000 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002008:	1d39      	adds	r1, r7, #4
 800200a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800200e:	2201      	movs	r2, #1
 8002010:	4803      	ldr	r0, [pc, #12]	@ (8002020 <__io_putchar+0x20>)
 8002012:	f005 fee8 	bl	8007de6 <HAL_UART_Transmit>
    return ch;
 8002016:	687b      	ldr	r3, [r7, #4]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	20001e08 	.word	0x20001e08

08002024 <I2C_Slave_Init>:

/**
 * @brief Initialize I2C slave and ring buffer.
 */
void I2C_Slave_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
    RingBuffer_Init(&rxRingBuffer);
 8002028:	4809      	ldr	r0, [pc, #36]	@ (8002050 <I2C_Slave_Init+0x2c>)
 800202a:	f000 f8b7 	bl	800219c <RingBuffer_Init>
    if (HAL_I2C_EnableListen_IT(&hi2c2) != HAL_OK)
 800202e:	4809      	ldr	r0, [pc, #36]	@ (8002054 <I2C_Slave_Init+0x30>)
 8002030:	f002 fb56 	bl	80046e0 <HAL_I2C_EnableListen_IT>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d005      	beq.n	8002046 <I2C_Slave_Init+0x22>
    {
//        Error_Handler();
        printf("It was not in listen mode\n");
 800203a:	4807      	ldr	r0, [pc, #28]	@ (8002058 <I2C_Slave_Init+0x34>)
 800203c:	f006 fe20 	bl	8008c80 <puts>
        HAL_I2C_EnableListen_IT(&hi2c2);
 8002040:	4804      	ldr	r0, [pc, #16]	@ (8002054 <I2C_Slave_Init+0x30>)
 8002042:	f002 fb4d 	bl	80046e0 <HAL_I2C_EnableListen_IT>
    }
    printf("I2C Slave Initialized\n");
 8002046:	4805      	ldr	r0, [pc, #20]	@ (800205c <I2C_Slave_Init+0x38>)
 8002048:	f006 fe1a 	bl	8008c80 <puts>
}
 800204c:	bf00      	nop
 800204e:	bd80      	pop	{r7, pc}
 8002050:	200001b4 	.word	0x200001b4
 8002054:	20001bb8 	.word	0x20001bb8
 8002058:	08009ab4 	.word	0x08009ab4
 800205c:	08009ad0 	.word	0x08009ad0

08002060 <I2C_Get_Next_Command>:
 * @brief Pop the next command from the ring buffer.
 * @param cmd Pointer to store the popped command.
 * @return 1 if a command was popped, 0 if the buffer is empty.
 */
uint8_t I2C_Get_Next_Command(Command_t *cmd)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
    if (RingBuffer_Pop(&rxRingBuffer, cmd))
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	480f      	ldr	r0, [pc, #60]	@ (80020a8 <I2C_Get_Next_Command+0x48>)
 800206c:	f000 f91e 	bl	80022ac <RingBuffer_Pop>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00d      	beq.n	8002092 <I2C_Get_Next_Command+0x32>
    {
        if (RingBuffer_IsEmpty(&rxRingBuffer))
 8002076:	480c      	ldr	r0, [pc, #48]	@ (80020a8 <I2C_Get_Next_Command+0x48>)
 8002078:	f000 f8ab 	bl	80021d2 <RingBuffer_IsEmpty>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d005      	beq.n	800208e <I2C_Get_Next_Command+0x2e>
        {
            dataReady = 0;  // No more data left
 8002082:	4b0a      	ldr	r3, [pc, #40]	@ (80020ac <I2C_Get_Next_Command+0x4c>)
 8002084:	2200      	movs	r2, #0
 8002086:	701a      	strb	r2, [r3, #0]
            printf("No data :( \n");
 8002088:	4809      	ldr	r0, [pc, #36]	@ (80020b0 <I2C_Get_Next_Command+0x50>)
 800208a:	f006 fdf9 	bl	8008c80 <puts>
        }
        return 1;
 800208e:	2301      	movs	r3, #1
 8002090:	e006      	b.n	80020a0 <I2C_Get_Next_Command+0x40>
    }
    else
    {
    	printf("Ring bf empty \n");
 8002092:	4808      	ldr	r0, [pc, #32]	@ (80020b4 <I2C_Get_Next_Command+0x54>)
 8002094:	f006 fdf4 	bl	8008c80 <puts>
        dataReady = 0;  // Buffer empty
 8002098:	4b04      	ldr	r3, [pc, #16]	@ (80020ac <I2C_Get_Next_Command+0x4c>)
 800209a:	2200      	movs	r2, #0
 800209c:	701a      	strb	r2, [r3, #0]
        return 0;
 800209e:	2300      	movs	r3, #0
    }
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	200001b4 	.word	0x200001b4
 80020ac:	200001b1 	.word	0x200001b1
 80020b0:	08009ae8 	.word	0x08009ae8
 80020b4:	08009af4 	.word	0x08009af4

080020b8 <HAL_I2C_AddrCallback>:
 * @param hi2c I2C handle.
 * @param dir Direction of transfer (I2C_DIRECTION_TRANSMIT or I2C_DIRECTION_RECEIVE).
 * @param addrMatchCode Address match code.
 */
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t dir, uint16_t addrMatchCode)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	70fb      	strb	r3, [r7, #3]
 80020c4:	4613      	mov	r3, r2
 80020c6:	803b      	strh	r3, [r7, #0]
    if (dir == I2C_DIRECTION_TRANSMIT)
 80020c8:	78fb      	ldrb	r3, [r7, #3]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d106      	bne.n	80020dc <HAL_I2C_AddrCallback+0x24>
    {
        HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData, RX_SIZE, I2C_FIRST_AND_LAST_FRAME);
 80020ce:	2308      	movs	r3, #8
 80020d0:	220d      	movs	r2, #13
 80020d2:	4905      	ldr	r1, [pc, #20]	@ (80020e8 <HAL_I2C_AddrCallback+0x30>)
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f002 fa91 	bl	80045fc <HAL_I2C_Slave_Seq_Receive_IT>
    }
    else
    {
        Error_Handler();  // Master read not supported
    }
}
 80020da:	e001      	b.n	80020e0 <HAL_I2C_AddrCallback+0x28>
        Error_Handler();  // Master read not supported
 80020dc:	f000 fab0 	bl	8002640 <Error_Handler>
}
 80020e0:	bf00      	nop
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	200001a4 	.word	0x200001a4

080020ec <HAL_I2C_SlaveRxCpltCallback>:
/**
 * @brief I2C slave receive complete callback.
 * @param hi2c I2C handle.
 */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020ec:	b590      	push	{r4, r7, lr}
 80020ee:	b089      	sub	sp, #36	@ 0x24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
    Command_t cmd;
    printf("Received raw data (%d bytes): ", RX_SIZE);
 80020f4:	210d      	movs	r1, #13
 80020f6:	4818      	ldr	r0, [pc, #96]	@ (8002158 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 80020f8:	f006 fd52 	bl	8008ba0 <iprintf>
    for (int i = 0; i < RX_SIZE; i++) {
 80020fc:	2300      	movs	r3, #0
 80020fe:	61fb      	str	r3, [r7, #28]
 8002100:	e00a      	b.n	8002118 <HAL_I2C_SlaveRxCpltCallback+0x2c>
        printf("%02X ", RxData[i]);
 8002102:	4a16      	ldr	r2, [pc, #88]	@ (800215c <HAL_I2C_SlaveRxCpltCallback+0x70>)
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	4413      	add	r3, r2
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	4619      	mov	r1, r3
 800210c:	4814      	ldr	r0, [pc, #80]	@ (8002160 <HAL_I2C_SlaveRxCpltCallback+0x74>)
 800210e:	f006 fd47 	bl	8008ba0 <iprintf>
    for (int i = 0; i < RX_SIZE; i++) {
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	3301      	adds	r3, #1
 8002116:	61fb      	str	r3, [r7, #28]
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	2b0c      	cmp	r3, #12
 800211c:	ddf1      	ble.n	8002102 <HAL_I2C_SlaveRxCpltCallback+0x16>
    }
    printf("\n");
 800211e:	200a      	movs	r0, #10
 8002120:	f006 fd50 	bl	8008bc4 <putchar>
    memcpy(&cmd, RxData, sizeof(cmd));
 8002124:	4b0d      	ldr	r3, [pc, #52]	@ (800215c <HAL_I2C_SlaveRxCpltCallback+0x70>)
 8002126:	f107 040c 	add.w	r4, r7, #12
 800212a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800212c:	c407      	stmia	r4!, {r0, r1, r2}
 800212e:	7023      	strb	r3, [r4, #0]
    if (!RingBuffer_Push(&rxRingBuffer, &cmd))
 8002130:	f107 030c 	add.w	r3, r7, #12
 8002134:	4619      	mov	r1, r3
 8002136:	480b      	ldr	r0, [pc, #44]	@ (8002164 <HAL_I2C_SlaveRxCpltCallback+0x78>)
 8002138:	f000 f86e 	bl	8002218 <RingBuffer_Push>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d103      	bne.n	800214a <HAL_I2C_SlaveRxCpltCallback+0x5e>
    {
        printf("Ring buffer full, dropping command\n");
 8002142:	4809      	ldr	r0, [pc, #36]	@ (8002168 <HAL_I2C_SlaveRxCpltCallback+0x7c>)
 8002144:	f006 fd9c 	bl	8008c80 <puts>
    }
    else
    {
        dataReady = 1;
    }
}
 8002148:	e002      	b.n	8002150 <HAL_I2C_SlaveRxCpltCallback+0x64>
        dataReady = 1;
 800214a:	4b08      	ldr	r3, [pc, #32]	@ (800216c <HAL_I2C_SlaveRxCpltCallback+0x80>)
 800214c:	2201      	movs	r2, #1
 800214e:	701a      	strb	r2, [r3, #0]
}
 8002150:	bf00      	nop
 8002152:	3724      	adds	r7, #36	@ 0x24
 8002154:	46bd      	mov	sp, r7
 8002156:	bd90      	pop	{r4, r7, pc}
 8002158:	08009b04 	.word	0x08009b04
 800215c:	200001a4 	.word	0x200001a4
 8002160:	08009b24 	.word	0x08009b24
 8002164:	200001b4 	.word	0x200001b4
 8002168:	08009b2c 	.word	0x08009b2c
 800216c:	200001b1 	.word	0x200001b1

08002170 <HAL_I2C_ListenCpltCallback>:
/**
 * @brief I2C listen complete callback.
 * @param hi2c I2C handle.
 */
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
    HAL_I2C_EnableListen_IT(hi2c);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f002 fab1 	bl	80046e0 <HAL_I2C_EnableListen_IT>
}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_I2C_ErrorCallback>:
/**
 * @brief I2C error callback.
 * @param hi2c I2C handle.
 */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
    HAL_I2C_EnableListen_IT(hi2c);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f002 faa6 	bl	80046e0 <HAL_I2C_EnableListen_IT>
}
 8002194:	bf00      	nop
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <RingBuffer_Init>:
/**
 * @brief Initialize the ring buffer.
 * @param rb Pointer to the ring buffer.
 */
void RingBuffer_Init(RingBuffer *rb)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
    rb->head = 0;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2a00 	strb.w	r2, [r3, #2560]	@ 0xa00
    rb->tail = 0;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 2a01 	strb.w	r2, [r3, #2561]	@ 0xa01
    rb->count = 0;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 2a02 	strb.w	r2, [r3, #2562]	@ 0xa02
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr

080021d2 <RingBuffer_IsEmpty>:
 * @brief Check if the ring buffer is empty.
 * @param rb Pointer to the ring buffer.
 * @return 1 if empty, 0 otherwise.
 */
uint8_t RingBuffer_IsEmpty(RingBuffer *rb)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
    return rb->count == 0;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021e0:	f893 3a02 	ldrb.w	r3, [r3, #2562]	@ 0xa02
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	bf0c      	ite	eq
 80021ea:	2301      	moveq	r3, #1
 80021ec:	2300      	movne	r3, #0
 80021ee:	b2db      	uxtb	r3, r3
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr

080021fa <RingBuffer_IsFull>:
 * @brief Check if the ring buffer is full.
 * @param rb Pointer to the ring buffer.
 * @return 1 if full, 0 otherwise.
 */
uint8_t RingBuffer_IsFull(RingBuffer *rb)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
    return rb->count == RX_BUFFER_SIZE;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002208:	f893 3a02 	ldrb.w	r3, [r3, #2562]	@ 0xa02
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr

08002218 <RingBuffer_Push>:
 * @param rb Pointer to the ring buffer.
 * @param cmd Pointer to the command to push.
 * @return 1 if successful, 0 if buffer is full.
 */
uint8_t RingBuffer_Push(RingBuffer *rb, Command_t *cmd)
{
 8002218:	b590      	push	{r4, r7, lr}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
    if (RingBuffer_IsFull(rb)) return 0;
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7ff ffe9 	bl	80021fa <RingBuffer_IsFull>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <RingBuffer_Push+0x1a>
 800222e:	2300      	movs	r3, #0
 8002230:	e038      	b.n	80022a4 <RingBuffer_Push+0x8c>

    rb->buffer[rb->head] = *cmd;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002238:	f893 3a00 	ldrb.w	r3, [r3, #2560]	@ 0xa00
 800223c:	b2db      	uxtb	r3, r3
 800223e:	461a      	mov	r2, r3
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	4613      	mov	r3, r2
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	4413      	add	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	440b      	add	r3, r1
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	6814      	ldr	r4, [r2, #0]
 8002252:	6850      	ldr	r0, [r2, #4]
 8002254:	6891      	ldr	r1, [r2, #8]
 8002256:	601c      	str	r4, [r3, #0]
 8002258:	6058      	str	r0, [r3, #4]
 800225a:	6099      	str	r1, [r3, #8]
 800225c:	7b12      	ldrb	r2, [r2, #12]
 800225e:	731a      	strb	r2, [r3, #12]
    rb->head = (rb->head + 1) % RX_BUFFER_SIZE;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002266:	f893 3a00 	ldrb.w	r3, [r3, #2560]	@ 0xa00
 800226a:	b2db      	uxtb	r3, r3
 800226c:	3301      	adds	r3, #1
 800226e:	425a      	negs	r2, r3
 8002270:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002274:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002278:	bf58      	it	pl
 800227a:	4253      	negpl	r3, r2
 800227c:	b2da      	uxtb	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002284:	f883 2a00 	strb.w	r2, [r3, #2560]	@ 0xa00
    rb->count++;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800228e:	f893 3a02 	ldrb.w	r3, [r3, #2562]	@ 0xa02
 8002292:	b2db      	uxtb	r3, r3
 8002294:	3301      	adds	r3, #1
 8002296:	b2da      	uxtb	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800229e:	f883 2a02 	strb.w	r2, [r3, #2562]	@ 0xa02
    return 1;
 80022a2:	2301      	movs	r3, #1
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd90      	pop	{r4, r7, pc}

080022ac <RingBuffer_Pop>:
 * @param rb Pointer to the ring buffer.
 * @param cmd Pointer to store the popped command.
 * @return 1 if successful, 0 if buffer is empty.
 */
uint8_t RingBuffer_Pop(RingBuffer *rb, Command_t *cmd)
{
 80022ac:	b590      	push	{r4, r7, lr}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
    if (RingBuffer_IsEmpty(rb)) return 0;
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7ff ff8b 	bl	80021d2 <RingBuffer_IsEmpty>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <RingBuffer_Pop+0x1a>
 80022c2:	2300      	movs	r3, #0
 80022c4:	e039      	b.n	800233a <RingBuffer_Pop+0x8e>

    *cmd = rb->buffer[rb->tail];
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022cc:	f893 3a01 	ldrb.w	r3, [r3, #2561]	@ 0xa01
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	461a      	mov	r2, r3
 80022d4:	6838      	ldr	r0, [r7, #0]
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	4613      	mov	r3, r2
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	4413      	add	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	18ca      	adds	r2, r1, r3
 80022e4:	4603      	mov	r3, r0
 80022e6:	6814      	ldr	r4, [r2, #0]
 80022e8:	6850      	ldr	r0, [r2, #4]
 80022ea:	6891      	ldr	r1, [r2, #8]
 80022ec:	601c      	str	r4, [r3, #0]
 80022ee:	6058      	str	r0, [r3, #4]
 80022f0:	6099      	str	r1, [r3, #8]
 80022f2:	7b12      	ldrb	r2, [r2, #12]
 80022f4:	731a      	strb	r2, [r3, #12]
    rb->tail = (rb->tail + 1) % RX_BUFFER_SIZE;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022fc:	f893 3a01 	ldrb.w	r3, [r3, #2561]	@ 0xa01
 8002300:	b2db      	uxtb	r3, r3
 8002302:	3301      	adds	r3, #1
 8002304:	425a      	negs	r2, r3
 8002306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800230a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800230e:	bf58      	it	pl
 8002310:	4253      	negpl	r3, r2
 8002312:	b2da      	uxtb	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800231a:	f883 2a01 	strb.w	r2, [r3, #2561]	@ 0xa01
    rb->count--;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002324:	f893 3a02 	ldrb.w	r3, [r3, #2562]	@ 0xa02
 8002328:	b2db      	uxtb	r3, r3
 800232a:	3b01      	subs	r3, #1
 800232c:	b2da      	uxtb	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002334:	f883 2a02 	strb.w	r2, [r3, #2562]	@ 0xa02
    return 1;
 8002338:	2301      	movs	r3, #1
}
 800233a:	4618      	mov	r0, r3
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	bd90      	pop	{r4, r7, pc}
	...

08002344 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800234a:	4b10      	ldr	r3, [pc, #64]	@ (800238c <MX_DMA_Init+0x48>)
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	4a0f      	ldr	r2, [pc, #60]	@ (800238c <MX_DMA_Init+0x48>)
 8002350:	f043 0301 	orr.w	r3, r3, #1
 8002354:	6153      	str	r3, [r2, #20]
 8002356:	4b0d      	ldr	r3, [pc, #52]	@ (800238c <MX_DMA_Init+0x48>)
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	607b      	str	r3, [r7, #4]
 8002360:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002362:	2200      	movs	r2, #0
 8002364:	2100      	movs	r1, #0
 8002366:	200e      	movs	r0, #14
 8002368:	f001 f9d9 	bl	800371e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800236c:	200e      	movs	r0, #14
 800236e:	f001 f9f2 	bl	8003756 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002372:	2200      	movs	r2, #0
 8002374:	2100      	movs	r1, #0
 8002376:	200f      	movs	r0, #15
 8002378:	f001 f9d1 	bl	800371e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800237c:	200f      	movs	r0, #15
 800237e:	f001 f9ea 	bl	8003756 <HAL_NVIC_EnableIRQ>

}
 8002382:	bf00      	nop
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40021000 	.word	0x40021000

08002390 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b088      	sub	sp, #32
 8002394:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002396:	f107 0310 	add.w	r3, r7, #16
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	605a      	str	r2, [r3, #4]
 80023a0:	609a      	str	r2, [r3, #8]
 80023a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023a4:	4b31      	ldr	r3, [pc, #196]	@ (800246c <MX_GPIO_Init+0xdc>)
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	4a30      	ldr	r2, [pc, #192]	@ (800246c <MX_GPIO_Init+0xdc>)
 80023aa:	f043 0310 	orr.w	r3, r3, #16
 80023ae:	6193      	str	r3, [r2, #24]
 80023b0:	4b2e      	ldr	r3, [pc, #184]	@ (800246c <MX_GPIO_Init+0xdc>)
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	f003 0310 	and.w	r3, r3, #16
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023bc:	4b2b      	ldr	r3, [pc, #172]	@ (800246c <MX_GPIO_Init+0xdc>)
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	4a2a      	ldr	r2, [pc, #168]	@ (800246c <MX_GPIO_Init+0xdc>)
 80023c2:	f043 0320 	orr.w	r3, r3, #32
 80023c6:	6193      	str	r3, [r2, #24]
 80023c8:	4b28      	ldr	r3, [pc, #160]	@ (800246c <MX_GPIO_Init+0xdc>)
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	f003 0320 	and.w	r3, r3, #32
 80023d0:	60bb      	str	r3, [r7, #8]
 80023d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d4:	4b25      	ldr	r3, [pc, #148]	@ (800246c <MX_GPIO_Init+0xdc>)
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	4a24      	ldr	r2, [pc, #144]	@ (800246c <MX_GPIO_Init+0xdc>)
 80023da:	f043 0304 	orr.w	r3, r3, #4
 80023de:	6193      	str	r3, [r2, #24]
 80023e0:	4b22      	ldr	r3, [pc, #136]	@ (800246c <MX_GPIO_Init+0xdc>)
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	607b      	str	r3, [r7, #4]
 80023ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ec:	4b1f      	ldr	r3, [pc, #124]	@ (800246c <MX_GPIO_Init+0xdc>)
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	4a1e      	ldr	r2, [pc, #120]	@ (800246c <MX_GPIO_Init+0xdc>)
 80023f2:	f043 0308 	orr.w	r3, r3, #8
 80023f6:	6193      	str	r3, [r2, #24]
 80023f8:	4b1c      	ldr	r3, [pc, #112]	@ (800246c <MX_GPIO_Init+0xdc>)
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	f003 0308 	and.w	r3, r3, #8
 8002400:	603b      	str	r3, [r7, #0]
 8002402:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|S4_Pin|S3_Pin|S2_Pin
 8002404:	2200      	movs	r2, #0
 8002406:	f242 012f 	movw	r1, #8239	@ 0x202f
 800240a:	4819      	ldr	r0, [pc, #100]	@ (8002470 <MX_GPIO_Init+0xe0>)
 800240c:	f001 ff6d 	bl	80042ea <HAL_GPIO_WritePin>
                          |S1_Pin|BEEP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_Pin BEEP_Pin */
  GPIO_InitStruct.Pin = LED_Pin|BEEP_Pin;
 8002410:	f242 0320 	movw	r3, #8224	@ 0x2020
 8002414:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002416:	2301      	movs	r3, #1
 8002418:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241a:	2300      	movs	r3, #0
 800241c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241e:	2302      	movs	r3, #2
 8002420:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002422:	f107 0310 	add.w	r3, r7, #16
 8002426:	4619      	mov	r1, r3
 8002428:	4811      	ldr	r0, [pc, #68]	@ (8002470 <MX_GPIO_Init+0xe0>)
 800242a:	f001 fdb3 	bl	8003f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : S4_Pin S3_Pin S2_Pin S1_Pin */
  GPIO_InitStruct.Pin = S4_Pin|S3_Pin|S2_Pin|S1_Pin;
 800242e:	230f      	movs	r3, #15
 8002430:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002432:	2301      	movs	r3, #1
 8002434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002436:	2300      	movs	r3, #0
 8002438:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800243a:	2303      	movs	r3, #3
 800243c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800243e:	f107 0310 	add.w	r3, r7, #16
 8002442:	4619      	mov	r1, r3
 8002444:	480a      	ldr	r0, [pc, #40]	@ (8002470 <MX_GPIO_Init+0xe0>)
 8002446:	f001 fda5 	bl	8003f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY1_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 800244a:	2304      	movs	r3, #4
 800244c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800244e:	2300      	movs	r3, #0
 8002450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002452:	2301      	movs	r3, #1
 8002454:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8002456:	f107 0310 	add.w	r3, r7, #16
 800245a:	4619      	mov	r1, r3
 800245c:	4805      	ldr	r0, [pc, #20]	@ (8002474 <MX_GPIO_Init+0xe4>)
 800245e:	f001 fd99 	bl	8003f94 <HAL_GPIO_Init>

}
 8002462:	bf00      	nop
 8002464:	3720      	adds	r7, #32
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40021000 	.word	0x40021000
 8002470:	40011000 	.word	0x40011000
 8002474:	40011400 	.word	0x40011400

08002478 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800247c:	4b12      	ldr	r3, [pc, #72]	@ (80024c8 <MX_I2C2_Init+0x50>)
 800247e:	4a13      	ldr	r2, [pc, #76]	@ (80024cc <MX_I2C2_Init+0x54>)
 8002480:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8002482:	4b11      	ldr	r3, [pc, #68]	@ (80024c8 <MX_I2C2_Init+0x50>)
 8002484:	4a12      	ldr	r2, [pc, #72]	@ (80024d0 <MX_I2C2_Init+0x58>)
 8002486:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002488:	4b0f      	ldr	r3, [pc, #60]	@ (80024c8 <MX_I2C2_Init+0x50>)
 800248a:	2200      	movs	r2, #0
 800248c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 36;
 800248e:	4b0e      	ldr	r3, [pc, #56]	@ (80024c8 <MX_I2C2_Init+0x50>)
 8002490:	2224      	movs	r2, #36	@ 0x24
 8002492:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002494:	4b0c      	ldr	r3, [pc, #48]	@ (80024c8 <MX_I2C2_Init+0x50>)
 8002496:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800249a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800249c:	4b0a      	ldr	r3, [pc, #40]	@ (80024c8 <MX_I2C2_Init+0x50>)
 800249e:	2200      	movs	r2, #0
 80024a0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80024a2:	4b09      	ldr	r3, [pc, #36]	@ (80024c8 <MX_I2C2_Init+0x50>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024a8:	4b07      	ldr	r3, [pc, #28]	@ (80024c8 <MX_I2C2_Init+0x50>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024ae:	4b06      	ldr	r3, [pc, #24]	@ (80024c8 <MX_I2C2_Init+0x50>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80024b4:	4804      	ldr	r0, [pc, #16]	@ (80024c8 <MX_I2C2_Init+0x50>)
 80024b6:	f001 ff49 	bl	800434c <HAL_I2C_Init>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80024c0:	f000 f8be 	bl	8002640 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80024c4:	bf00      	nop
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20001bb8 	.word	0x20001bb8
 80024cc:	40005800 	.word	0x40005800
 80024d0:	00061a80 	.word	0x00061a80

080024d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b088      	sub	sp, #32
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024dc:	f107 0310 	add.w	r3, r7, #16
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a1e      	ldr	r2, [pc, #120]	@ (8002568 <HAL_I2C_MspInit+0x94>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d134      	bne.n	800255e <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024f4:	4b1d      	ldr	r3, [pc, #116]	@ (800256c <HAL_I2C_MspInit+0x98>)
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	4a1c      	ldr	r2, [pc, #112]	@ (800256c <HAL_I2C_MspInit+0x98>)
 80024fa:	f043 0308 	orr.w	r3, r3, #8
 80024fe:	6193      	str	r3, [r2, #24]
 8002500:	4b1a      	ldr	r3, [pc, #104]	@ (800256c <HAL_I2C_MspInit+0x98>)
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	f003 0308 	and.w	r3, r3, #8
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800250c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002510:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002512:	2312      	movs	r3, #18
 8002514:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002516:	2303      	movs	r3, #3
 8002518:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800251a:	f107 0310 	add.w	r3, r7, #16
 800251e:	4619      	mov	r1, r3
 8002520:	4813      	ldr	r0, [pc, #76]	@ (8002570 <HAL_I2C_MspInit+0x9c>)
 8002522:	f001 fd37 	bl	8003f94 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002526:	4b11      	ldr	r3, [pc, #68]	@ (800256c <HAL_I2C_MspInit+0x98>)
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	4a10      	ldr	r2, [pc, #64]	@ (800256c <HAL_I2C_MspInit+0x98>)
 800252c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002530:	61d3      	str	r3, [r2, #28]
 8002532:	4b0e      	ldr	r3, [pc, #56]	@ (800256c <HAL_I2C_MspInit+0x98>)
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800253a:	60bb      	str	r3, [r7, #8]
 800253c:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800253e:	2200      	movs	r2, #0
 8002540:	2100      	movs	r1, #0
 8002542:	2021      	movs	r0, #33	@ 0x21
 8002544:	f001 f8eb 	bl	800371e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002548:	2021      	movs	r0, #33	@ 0x21
 800254a:	f001 f904 	bl	8003756 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800254e:	2200      	movs	r2, #0
 8002550:	2100      	movs	r1, #0
 8002552:	2022      	movs	r0, #34	@ 0x22
 8002554:	f001 f8e3 	bl	800371e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8002558:	2022      	movs	r0, #34	@ 0x22
 800255a:	f001 f8fc 	bl	8003756 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800255e:	bf00      	nop
 8002560:	3720      	adds	r7, #32
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40005800 	.word	0x40005800
 800256c:	40021000 	.word	0x40021000
 8002570:	40010c00 	.word	0x40010c00

08002574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002578:	f000 ff74 	bl	8003464 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800257c:	f000 f81b 	bl	80025b6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002580:	f7ff ff06 	bl	8002390 <MX_GPIO_Init>
  MX_DMA_Init();
 8002584:	f7ff fede 	bl	8002344 <MX_DMA_Init>
  MX_TIM7_Init();
 8002588:	f000 fbb4 	bl	8002cf4 <MX_TIM7_Init>
  MX_I2C2_Init();
 800258c:	f7ff ff74 	bl	8002478 <MX_I2C2_Init>
  MX_TIM1_Init();
 8002590:	f000 f99c 	bl	80028cc <MX_TIM1_Init>
  MX_TIM8_Init();
 8002594:	f000 fbe6 	bl	8002d64 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8002598:	f000 fe6a 	bl	8003270 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800259c:	f000 fa5a 	bl	8002a54 <MX_TIM2_Init>
  MX_TIM3_Init();
 80025a0:	f000 faac 	bl	8002afc <MX_TIM3_Init>
  MX_TIM4_Init();
 80025a4:	f000 fafe 	bl	8002ba4 <MX_TIM4_Init>
  MX_TIM5_Init();
 80025a8:	f000 fb50 	bl	8002c4c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  Bsp_Init();
 80025ac:	f7fe fb5a 	bl	8000c64 <Bsp_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    Bsp_Loop();
 80025b0:	f7fe fb6c 	bl	8000c8c <Bsp_Loop>
 80025b4:	e7fc      	b.n	80025b0 <main+0x3c>

080025b6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b090      	sub	sp, #64	@ 0x40
 80025ba:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025bc:	f107 0318 	add.w	r3, r7, #24
 80025c0:	2228      	movs	r2, #40	@ 0x28
 80025c2:	2100      	movs	r1, #0
 80025c4:	4618      	mov	r0, r3
 80025c6:	f006 fc3b 	bl	8008e40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025ca:	1d3b      	adds	r3, r7, #4
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	60da      	str	r2, [r3, #12]
 80025d6:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025d8:	2301      	movs	r3, #1
 80025da:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80025e0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80025e2:	2300      	movs	r3, #0
 80025e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025e6:	2301      	movs	r3, #1
 80025e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025ea:	2302      	movs	r3, #2
 80025ec:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80025f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80025f4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80025f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025fa:	f107 0318 	add.w	r3, r7, #24
 80025fe:	4618      	mov	r0, r3
 8002600:	f003 fd76 	bl	80060f0 <HAL_RCC_OscConfig>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <SystemClock_Config+0x58>
  {
    Error_Handler();
 800260a:	f000 f819 	bl	8002640 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800260e:	230f      	movs	r3, #15
 8002610:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002612:	2302      	movs	r3, #2
 8002614:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002616:	2300      	movs	r3, #0
 8002618:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800261a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800261e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002620:	2300      	movs	r3, #0
 8002622:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002624:	1d3b      	adds	r3, r7, #4
 8002626:	2102      	movs	r1, #2
 8002628:	4618      	mov	r0, r3
 800262a:	f003 ffe3 	bl	80065f4 <HAL_RCC_ClockConfig>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002634:	f000 f804 	bl	8002640 <Error_Handler>
  }
}
 8002638:	bf00      	nop
 800263a:	3740      	adds	r7, #64	@ 0x40
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002644:	b672      	cpsid	i
}
 8002646:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002648:	bf00      	nop
 800264a:	e7fd      	b.n	8002648 <Error_Handler+0x8>

0800264c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002652:	4b15      	ldr	r3, [pc, #84]	@ (80026a8 <HAL_MspInit+0x5c>)
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	4a14      	ldr	r2, [pc, #80]	@ (80026a8 <HAL_MspInit+0x5c>)
 8002658:	f043 0301 	orr.w	r3, r3, #1
 800265c:	6193      	str	r3, [r2, #24]
 800265e:	4b12      	ldr	r3, [pc, #72]	@ (80026a8 <HAL_MspInit+0x5c>)
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	60bb      	str	r3, [r7, #8]
 8002668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800266a:	4b0f      	ldr	r3, [pc, #60]	@ (80026a8 <HAL_MspInit+0x5c>)
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	4a0e      	ldr	r2, [pc, #56]	@ (80026a8 <HAL_MspInit+0x5c>)
 8002670:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002674:	61d3      	str	r3, [r2, #28]
 8002676:	4b0c      	ldr	r3, [pc, #48]	@ (80026a8 <HAL_MspInit+0x5c>)
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800267e:	607b      	str	r3, [r7, #4]
 8002680:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002682:	4b0a      	ldr	r3, [pc, #40]	@ (80026ac <HAL_MspInit+0x60>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	4a04      	ldr	r2, [pc, #16]	@ (80026ac <HAL_MspInit+0x60>)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800269e:	bf00      	nop
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr
 80026a8:	40021000 	.word	0x40021000
 80026ac:	40010000 	.word	0x40010000

080026b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026b4:	bf00      	nop
 80026b6:	e7fd      	b.n	80026b4 <NMI_Handler+0x4>

080026b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026bc:	bf00      	nop
 80026be:	e7fd      	b.n	80026bc <HardFault_Handler+0x4>

080026c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026c4:	bf00      	nop
 80026c6:	e7fd      	b.n	80026c4 <MemManage_Handler+0x4>

080026c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026cc:	bf00      	nop
 80026ce:	e7fd      	b.n	80026cc <BusFault_Handler+0x4>

080026d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026d4:	bf00      	nop
 80026d6:	e7fd      	b.n	80026d4 <UsageFault_Handler+0x4>

080026d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026dc:	bf00      	nop
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr

080026e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026e8:	bf00      	nop
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr

080026f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026f4:	bf00      	nop
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bc80      	pop	{r7}
 80026fa:	4770      	bx	lr

080026fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002700:	f000 fef6 	bl	80034f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002704:	bf00      	nop
 8002706:	bd80      	pop	{r7, pc}

08002708 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800270c:	4802      	ldr	r0, [pc, #8]	@ (8002718 <DMA1_Channel4_IRQHandler+0x10>)
 800270e:	f001 f9f7 	bl	8003b00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002712:	bf00      	nop
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	20001e50 	.word	0x20001e50

0800271c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002720:	4802      	ldr	r0, [pc, #8]	@ (800272c <DMA1_Channel5_IRQHandler+0x10>)
 8002722:	f001 f9ed 	bl	8003b00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	20001e94 	.word	0x20001e94

08002730 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002734:	4802      	ldr	r0, [pc, #8]	@ (8002740 <I2C2_EV_IRQHandler+0x10>)
 8002736:	f002 f808 	bl	800474a <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	20001bb8 	.word	0x20001bb8

08002744 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002748:	4802      	ldr	r0, [pc, #8]	@ (8002754 <I2C2_ER_IRQHandler+0x10>)
 800274a:	f002 f96f 	bl	8004a2c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	20001bb8 	.word	0x20001bb8

08002758 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800275c:	4802      	ldr	r0, [pc, #8]	@ (8002768 <USART1_IRQHandler+0x10>)
 800275e:	f005 fbf3 	bl	8007f48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002762:	bf00      	nop
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	20001e08 	.word	0x20001e08

0800276c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002770:	4802      	ldr	r0, [pc, #8]	@ (800277c <TIM7_IRQHandler+0x10>)
 8002772:	f004 fbbf 	bl	8006ef4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002776:	bf00      	nop
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	20001d78 	.word	0x20001d78

08002780 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	e00a      	b.n	80027a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002792:	f3af 8000 	nop.w
 8002796:	4601      	mov	r1, r0
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	1c5a      	adds	r2, r3, #1
 800279c:	60ba      	str	r2, [r7, #8]
 800279e:	b2ca      	uxtb	r2, r1
 80027a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	3301      	adds	r3, #1
 80027a6:	617b      	str	r3, [r7, #20]
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	dbf0      	blt.n	8002792 <_read+0x12>
	}

return len;
 80027b0:	687b      	ldr	r3, [r7, #4]
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b086      	sub	sp, #24
 80027be:	af00      	add	r7, sp, #0
 80027c0:	60f8      	str	r0, [r7, #12]
 80027c2:	60b9      	str	r1, [r7, #8]
 80027c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027c6:	2300      	movs	r3, #0
 80027c8:	617b      	str	r3, [r7, #20]
 80027ca:	e009      	b.n	80027e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	1c5a      	adds	r2, r3, #1
 80027d0:	60ba      	str	r2, [r7, #8]
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff fc13 	bl	8002000 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	3301      	adds	r3, #1
 80027de:	617b      	str	r3, [r7, #20]
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	dbf1      	blt.n	80027cc <_write+0x12>
	}
	return len;
 80027e8:	687b      	ldr	r3, [r7, #4]
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3718      	adds	r7, #24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <_close>:

int _close(int file)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
	return -1;
 80027fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80027fe:	4618      	mov	r0, r3
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr

08002808 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002818:	605a      	str	r2, [r3, #4]
	return 0;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr

08002826 <_isatty>:

int _isatty(int file)
{
 8002826:	b480      	push	{r7}
 8002828:	b083      	sub	sp, #12
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
	return 1;
 800282e:	2301      	movs	r3, #1
}
 8002830:	4618      	mov	r0, r3
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	bc80      	pop	{r7}
 8002838:	4770      	bx	lr

0800283a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800283a:	b480      	push	{r7}
 800283c:	b085      	sub	sp, #20
 800283e:	af00      	add	r7, sp, #0
 8002840:	60f8      	str	r0, [r7, #12]
 8002842:	60b9      	str	r1, [r7, #8]
 8002844:	607a      	str	r2, [r7, #4]
	return 0;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr
	...

08002854 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800285c:	4a14      	ldr	r2, [pc, #80]	@ (80028b0 <_sbrk+0x5c>)
 800285e:	4b15      	ldr	r3, [pc, #84]	@ (80028b4 <_sbrk+0x60>)
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002868:	4b13      	ldr	r3, [pc, #76]	@ (80028b8 <_sbrk+0x64>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d102      	bne.n	8002876 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002870:	4b11      	ldr	r3, [pc, #68]	@ (80028b8 <_sbrk+0x64>)
 8002872:	4a12      	ldr	r2, [pc, #72]	@ (80028bc <_sbrk+0x68>)
 8002874:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002876:	4b10      	ldr	r3, [pc, #64]	@ (80028b8 <_sbrk+0x64>)
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4413      	add	r3, r2
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	429a      	cmp	r2, r3
 8002882:	d207      	bcs.n	8002894 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002884:	f006 fb2a 	bl	8008edc <__errno>
 8002888:	4603      	mov	r3, r0
 800288a:	220c      	movs	r2, #12
 800288c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800288e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002892:	e009      	b.n	80028a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002894:	4b08      	ldr	r3, [pc, #32]	@ (80028b8 <_sbrk+0x64>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800289a:	4b07      	ldr	r3, [pc, #28]	@ (80028b8 <_sbrk+0x64>)
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4413      	add	r3, r2
 80028a2:	4a05      	ldr	r2, [pc, #20]	@ (80028b8 <_sbrk+0x64>)
 80028a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028a6:	68fb      	ldr	r3, [r7, #12]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3718      	adds	r7, #24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	2000c000 	.word	0x2000c000
 80028b4:	00000400 	.word	0x00000400
 80028b8:	20001c0c 	.word	0x20001c0c
 80028bc:	20002028 	.word	0x20002028

080028c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028c4:	bf00      	nop
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr

080028cc <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b096      	sub	sp, #88	@ 0x58
 80028d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028d2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80028d6:	2200      	movs	r2, #0
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	605a      	str	r2, [r3, #4]
 80028dc:	609a      	str	r2, [r3, #8]
 80028de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028e0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	605a      	str	r2, [r3, #4]
 80028f4:	609a      	str	r2, [r3, #8]
 80028f6:	60da      	str	r2, [r3, #12]
 80028f8:	611a      	str	r2, [r3, #16]
 80028fa:	615a      	str	r2, [r3, #20]
 80028fc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80028fe:	1d3b      	adds	r3, r7, #4
 8002900:	2220      	movs	r2, #32
 8002902:	2100      	movs	r1, #0
 8002904:	4618      	mov	r0, r3
 8002906:	f006 fa9b 	bl	8008e40 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800290a:	4b50      	ldr	r3, [pc, #320]	@ (8002a4c <MX_TIM1_Init+0x180>)
 800290c:	4a50      	ldr	r2, [pc, #320]	@ (8002a50 <MX_TIM1_Init+0x184>)
 800290e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002910:	4b4e      	ldr	r3, [pc, #312]	@ (8002a4c <MX_TIM1_Init+0x180>)
 8002912:	2200      	movs	r2, #0
 8002914:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002916:	4b4d      	ldr	r3, [pc, #308]	@ (8002a4c <MX_TIM1_Init+0x180>)
 8002918:	2200      	movs	r2, #0
 800291a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3600-1;
 800291c:	4b4b      	ldr	r3, [pc, #300]	@ (8002a4c <MX_TIM1_Init+0x180>)
 800291e:	f640 620f 	movw	r2, #3599	@ 0xe0f
 8002922:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002924:	4b49      	ldr	r3, [pc, #292]	@ (8002a4c <MX_TIM1_Init+0x180>)
 8002926:	2200      	movs	r2, #0
 8002928:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800292a:	4b48      	ldr	r3, [pc, #288]	@ (8002a4c <MX_TIM1_Init+0x180>)
 800292c:	2200      	movs	r2, #0
 800292e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002930:	4b46      	ldr	r3, [pc, #280]	@ (8002a4c <MX_TIM1_Init+0x180>)
 8002932:	2280      	movs	r2, #128	@ 0x80
 8002934:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002936:	4845      	ldr	r0, [pc, #276]	@ (8002a4c <MX_TIM1_Init+0x180>)
 8002938:	f003 ffea 	bl	8006910 <HAL_TIM_Base_Init>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002942:	f7ff fe7d 	bl	8002640 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002946:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800294a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800294c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002950:	4619      	mov	r1, r3
 8002952:	483e      	ldr	r0, [pc, #248]	@ (8002a4c <MX_TIM1_Init+0x180>)
 8002954:	f004 fc80 	bl	8007258 <HAL_TIM_ConfigClockSource>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800295e:	f7ff fe6f 	bl	8002640 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002962:	483a      	ldr	r0, [pc, #232]	@ (8002a4c <MX_TIM1_Init+0x180>)
 8002964:	f004 f884 	bl	8006a70 <HAL_TIM_PWM_Init>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800296e:	f7ff fe67 	bl	8002640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002972:	2300      	movs	r3, #0
 8002974:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002976:	2300      	movs	r3, #0
 8002978:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800297a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800297e:	4619      	mov	r1, r3
 8002980:	4832      	ldr	r0, [pc, #200]	@ (8002a4c <MX_TIM1_Init+0x180>)
 8002982:	f005 f8ed 	bl	8007b60 <HAL_TIMEx_MasterConfigSynchronization>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800298c:	f7ff fe58 	bl	8002640 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002990:	2360      	movs	r3, #96	@ 0x60
 8002992:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002994:	2300      	movs	r3, #0
 8002996:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002998:	2300      	movs	r3, #0
 800299a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800299c:	2300      	movs	r3, #0
 800299e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029a0:	2300      	movs	r3, #0
 80029a2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80029a4:	2300      	movs	r3, #0
 80029a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80029a8:	2300      	movs	r3, #0
 80029aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029b0:	2200      	movs	r2, #0
 80029b2:	4619      	mov	r1, r3
 80029b4:	4825      	ldr	r0, [pc, #148]	@ (8002a4c <MX_TIM1_Init+0x180>)
 80029b6:	f004 fb8d 	bl	80070d4 <HAL_TIM_PWM_ConfigChannel>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80029c0:	f7ff fe3e 	bl	8002640 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80029c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029c8:	2204      	movs	r2, #4
 80029ca:	4619      	mov	r1, r3
 80029cc:	481f      	ldr	r0, [pc, #124]	@ (8002a4c <MX_TIM1_Init+0x180>)
 80029ce:	f004 fb81 	bl	80070d4 <HAL_TIM_PWM_ConfigChannel>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80029d8:	f7ff fe32 	bl	8002640 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80029dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029e0:	2208      	movs	r2, #8
 80029e2:	4619      	mov	r1, r3
 80029e4:	4819      	ldr	r0, [pc, #100]	@ (8002a4c <MX_TIM1_Init+0x180>)
 80029e6:	f004 fb75 	bl	80070d4 <HAL_TIM_PWM_ConfigChannel>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80029f0:	f7ff fe26 	bl	8002640 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80029f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029f8:	220c      	movs	r2, #12
 80029fa:	4619      	mov	r1, r3
 80029fc:	4813      	ldr	r0, [pc, #76]	@ (8002a4c <MX_TIM1_Init+0x180>)
 80029fe:	f004 fb69 	bl	80070d4 <HAL_TIM_PWM_ConfigChannel>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002a08:	f7ff fe1a 	bl	8002640 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002a10:	2300      	movs	r3, #0
 8002a12:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002a14:	2300      	movs	r3, #0
 8002a16:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002a20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a24:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002a26:	2300      	movs	r3, #0
 8002a28:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002a2a:	1d3b      	adds	r3, r7, #4
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4807      	ldr	r0, [pc, #28]	@ (8002a4c <MX_TIM1_Init+0x180>)
 8002a30:	f005 f902 	bl	8007c38 <HAL_TIMEx_ConfigBreakDeadTime>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8002a3a:	f7ff fe01 	bl	8002640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002a3e:	4803      	ldr	r0, [pc, #12]	@ (8002a4c <MX_TIM1_Init+0x180>)
 8002a40:	f000 fb92 	bl	8003168 <HAL_TIM_MspPostInit>

}
 8002a44:	bf00      	nop
 8002a46:	3758      	adds	r7, #88	@ 0x58
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	20001c10 	.word	0x20001c10
 8002a50:	40012c00 	.word	0x40012c00

08002a54 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b08c      	sub	sp, #48	@ 0x30
 8002a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a5a:	f107 030c 	add.w	r3, r7, #12
 8002a5e:	2224      	movs	r2, #36	@ 0x24
 8002a60:	2100      	movs	r1, #0
 8002a62:	4618      	mov	r0, r3
 8002a64:	f006 f9ec 	bl	8008e40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a68:	1d3b      	adds	r3, r7, #4
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a70:	4b21      	ldr	r3, [pc, #132]	@ (8002af8 <MX_TIM2_Init+0xa4>)
 8002a72:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002a76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002a78:	4b1f      	ldr	r3, [pc, #124]	@ (8002af8 <MX_TIM2_Init+0xa4>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8002af8 <MX_TIM2_Init+0xa4>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002a84:	4b1c      	ldr	r3, [pc, #112]	@ (8002af8 <MX_TIM2_Init+0xa4>)
 8002a86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a8c:	4b1a      	ldr	r3, [pc, #104]	@ (8002af8 <MX_TIM2_Init+0xa4>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a92:	4b19      	ldr	r3, [pc, #100]	@ (8002af8 <MX_TIM2_Init+0xa4>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002aac:	2300      	movs	r3, #0
 8002aae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002abc:	f107 030c 	add.w	r3, r7, #12
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	480d      	ldr	r0, [pc, #52]	@ (8002af8 <MX_TIM2_Init+0xa4>)
 8002ac4:	f004 f8e6 	bl	8006c94 <HAL_TIM_Encoder_Init>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002ace:	f7ff fdb7 	bl	8002640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ada:	1d3b      	adds	r3, r7, #4
 8002adc:	4619      	mov	r1, r3
 8002ade:	4806      	ldr	r0, [pc, #24]	@ (8002af8 <MX_TIM2_Init+0xa4>)
 8002ae0:	f005 f83e 	bl	8007b60 <HAL_TIMEx_MasterConfigSynchronization>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002aea:	f7ff fda9 	bl	8002640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002aee:	bf00      	nop
 8002af0:	3730      	adds	r7, #48	@ 0x30
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20001c58 	.word	0x20001c58

08002afc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08c      	sub	sp, #48	@ 0x30
 8002b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b02:	f107 030c 	add.w	r3, r7, #12
 8002b06:	2224      	movs	r2, #36	@ 0x24
 8002b08:	2100      	movs	r1, #0
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f006 f998 	bl	8008e40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b10:	1d3b      	adds	r3, r7, #4
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b18:	4b20      	ldr	r3, [pc, #128]	@ (8002b9c <MX_TIM3_Init+0xa0>)
 8002b1a:	4a21      	ldr	r2, [pc, #132]	@ (8002ba0 <MX_TIM3_Init+0xa4>)
 8002b1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002b1e:	4b1f      	ldr	r3, [pc, #124]	@ (8002b9c <MX_TIM3_Init+0xa0>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b24:	4b1d      	ldr	r3, [pc, #116]	@ (8002b9c <MX_TIM3_Init+0xa0>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002b2a:	4b1c      	ldr	r3, [pc, #112]	@ (8002b9c <MX_TIM3_Init+0xa0>)
 8002b2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b30:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b32:	4b1a      	ldr	r3, [pc, #104]	@ (8002b9c <MX_TIM3_Init+0xa0>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b38:	4b18      	ldr	r3, [pc, #96]	@ (8002b9c <MX_TIM3_Init+0xa0>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b42:	2300      	movs	r3, #0
 8002b44:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b46:	2301      	movs	r3, #1
 8002b48:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b52:	2300      	movs	r3, #0
 8002b54:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b56:	2301      	movs	r3, #1
 8002b58:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002b62:	f107 030c 	add.w	r3, r7, #12
 8002b66:	4619      	mov	r1, r3
 8002b68:	480c      	ldr	r0, [pc, #48]	@ (8002b9c <MX_TIM3_Init+0xa0>)
 8002b6a:	f004 f893 	bl	8006c94 <HAL_TIM_Encoder_Init>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002b74:	f7ff fd64 	bl	8002640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b80:	1d3b      	adds	r3, r7, #4
 8002b82:	4619      	mov	r1, r3
 8002b84:	4805      	ldr	r0, [pc, #20]	@ (8002b9c <MX_TIM3_Init+0xa0>)
 8002b86:	f004 ffeb 	bl	8007b60 <HAL_TIMEx_MasterConfigSynchronization>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002b90:	f7ff fd56 	bl	8002640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002b94:	bf00      	nop
 8002b96:	3730      	adds	r7, #48	@ 0x30
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	20001ca0 	.word	0x20001ca0
 8002ba0:	40000400 	.word	0x40000400

08002ba4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b08c      	sub	sp, #48	@ 0x30
 8002ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002baa:	f107 030c 	add.w	r3, r7, #12
 8002bae:	2224      	movs	r2, #36	@ 0x24
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f006 f944 	bl	8008e40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bb8:	1d3b      	adds	r3, r7, #4
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002bc0:	4b20      	ldr	r3, [pc, #128]	@ (8002c44 <MX_TIM4_Init+0xa0>)
 8002bc2:	4a21      	ldr	r2, [pc, #132]	@ (8002c48 <MX_TIM4_Init+0xa4>)
 8002bc4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002bc6:	4b1f      	ldr	r3, [pc, #124]	@ (8002c44 <MX_TIM4_Init+0xa0>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8002c44 <MX_TIM4_Init+0xa0>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002bd2:	4b1c      	ldr	r3, [pc, #112]	@ (8002c44 <MX_TIM4_Init+0xa0>)
 8002bd4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002bd8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bda:	4b1a      	ldr	r3, [pc, #104]	@ (8002c44 <MX_TIM4_Init+0xa0>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002be0:	4b18      	ldr	r3, [pc, #96]	@ (8002c44 <MX_TIM4_Init+0xa0>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002be6:	2303      	movs	r3, #3
 8002be8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002bea:	2300      	movs	r3, #0
 8002bec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002c02:	2300      	movs	r3, #0
 8002c04:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002c06:	2300      	movs	r3, #0
 8002c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002c0a:	f107 030c 	add.w	r3, r7, #12
 8002c0e:	4619      	mov	r1, r3
 8002c10:	480c      	ldr	r0, [pc, #48]	@ (8002c44 <MX_TIM4_Init+0xa0>)
 8002c12:	f004 f83f 	bl	8006c94 <HAL_TIM_Encoder_Init>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002c1c:	f7ff fd10 	bl	8002640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c20:	2300      	movs	r3, #0
 8002c22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c24:	2300      	movs	r3, #0
 8002c26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002c28:	1d3b      	adds	r3, r7, #4
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4805      	ldr	r0, [pc, #20]	@ (8002c44 <MX_TIM4_Init+0xa0>)
 8002c2e:	f004 ff97 	bl	8007b60 <HAL_TIMEx_MasterConfigSynchronization>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002c38:	f7ff fd02 	bl	8002640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002c3c:	bf00      	nop
 8002c3e:	3730      	adds	r7, #48	@ 0x30
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	20001ce8 	.word	0x20001ce8
 8002c48:	40000800 	.word	0x40000800

08002c4c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b08c      	sub	sp, #48	@ 0x30
 8002c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002c52:	f107 030c 	add.w	r3, r7, #12
 8002c56:	2224      	movs	r2, #36	@ 0x24
 8002c58:	2100      	movs	r1, #0
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f006 f8f0 	bl	8008e40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c60:	1d3b      	adds	r3, r7, #4
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002c68:	4b20      	ldr	r3, [pc, #128]	@ (8002cec <MX_TIM5_Init+0xa0>)
 8002c6a:	4a21      	ldr	r2, [pc, #132]	@ (8002cf0 <MX_TIM5_Init+0xa4>)
 8002c6c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002c6e:	4b1f      	ldr	r3, [pc, #124]	@ (8002cec <MX_TIM5_Init+0xa0>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c74:	4b1d      	ldr	r3, [pc, #116]	@ (8002cec <MX_TIM5_Init+0xa0>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8002c7a:	4b1c      	ldr	r3, [pc, #112]	@ (8002cec <MX_TIM5_Init+0xa0>)
 8002c7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c80:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c82:	4b1a      	ldr	r3, [pc, #104]	@ (8002cec <MX_TIM5_Init+0xa0>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c88:	4b18      	ldr	r3, [pc, #96]	@ (8002cec <MX_TIM5_Init+0xa0>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002c92:	2300      	movs	r3, #0
 8002c94:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002c96:	2301      	movs	r3, #1
 8002c98:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002caa:	2300      	movs	r3, #0
 8002cac:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002cb2:	f107 030c 	add.w	r3, r7, #12
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	480c      	ldr	r0, [pc, #48]	@ (8002cec <MX_TIM5_Init+0xa0>)
 8002cba:	f003 ffeb 	bl	8006c94 <HAL_TIM_Encoder_Init>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002cc4:	f7ff fcbc 	bl	8002640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002cd0:	1d3b      	adds	r3, r7, #4
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4805      	ldr	r0, [pc, #20]	@ (8002cec <MX_TIM5_Init+0xa0>)
 8002cd6:	f004 ff43 	bl	8007b60 <HAL_TIMEx_MasterConfigSynchronization>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8002ce0:	f7ff fcae 	bl	8002640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002ce4:	bf00      	nop
 8002ce6:	3730      	adds	r7, #48	@ 0x30
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	20001d30 	.word	0x20001d30
 8002cf0:	40000c00 	.word	0x40000c00

08002cf4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cfa:	463b      	mov	r3, r7
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002d02:	4b16      	ldr	r3, [pc, #88]	@ (8002d5c <MX_TIM7_Init+0x68>)
 8002d04:	4a16      	ldr	r2, [pc, #88]	@ (8002d60 <MX_TIM7_Init+0x6c>)
 8002d06:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 8002d08:	4b14      	ldr	r3, [pc, #80]	@ (8002d5c <MX_TIM7_Init+0x68>)
 8002d0a:	2247      	movs	r2, #71	@ 0x47
 8002d0c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d0e:	4b13      	ldr	r3, [pc, #76]	@ (8002d5c <MX_TIM7_Init+0x68>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8002d14:	4b11      	ldr	r3, [pc, #68]	@ (8002d5c <MX_TIM7_Init+0x68>)
 8002d16:	2209      	movs	r2, #9
 8002d18:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d1a:	4b10      	ldr	r3, [pc, #64]	@ (8002d5c <MX_TIM7_Init+0x68>)
 8002d1c:	2280      	movs	r2, #128	@ 0x80
 8002d1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002d20:	480e      	ldr	r0, [pc, #56]	@ (8002d5c <MX_TIM7_Init+0x68>)
 8002d22:	f003 fdf5 	bl	8006910 <HAL_TIM_Base_Init>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8002d2c:	f7ff fc88 	bl	8002640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d30:	2300      	movs	r3, #0
 8002d32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d34:	2300      	movs	r3, #0
 8002d36:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002d38:	463b      	mov	r3, r7
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4807      	ldr	r0, [pc, #28]	@ (8002d5c <MX_TIM7_Init+0x68>)
 8002d3e:	f004 ff0f 	bl	8007b60 <HAL_TIMEx_MasterConfigSynchronization>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8002d48:	f7ff fc7a 	bl	8002640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 8002d4c:	4803      	ldr	r0, [pc, #12]	@ (8002d5c <MX_TIM7_Init+0x68>)
 8002d4e:	f003 fe2f 	bl	80069b0 <HAL_TIM_Base_Start_IT>

  /* USER CODE END TIM7_Init 2 */

}
 8002d52:	bf00      	nop
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	20001d78 	.word	0x20001d78
 8002d60:	40001400 	.word	0x40001400

08002d64 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b096      	sub	sp, #88	@ 0x58
 8002d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d6a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002d6e:	2200      	movs	r2, #0
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	605a      	str	r2, [r3, #4]
 8002d74:	609a      	str	r2, [r3, #8]
 8002d76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d78:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	605a      	str	r2, [r3, #4]
 8002d8c:	609a      	str	r2, [r3, #8]
 8002d8e:	60da      	str	r2, [r3, #12]
 8002d90:	611a      	str	r2, [r3, #16]
 8002d92:	615a      	str	r2, [r3, #20]
 8002d94:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002d96:	1d3b      	adds	r3, r7, #4
 8002d98:	2220      	movs	r2, #32
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f006 f84f 	bl	8008e40 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002da2:	4b50      	ldr	r3, [pc, #320]	@ (8002ee4 <MX_TIM8_Init+0x180>)
 8002da4:	4a50      	ldr	r2, [pc, #320]	@ (8002ee8 <MX_TIM8_Init+0x184>)
 8002da6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002da8:	4b4e      	ldr	r3, [pc, #312]	@ (8002ee4 <MX_TIM8_Init+0x180>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dae:	4b4d      	ldr	r3, [pc, #308]	@ (8002ee4 <MX_TIM8_Init+0x180>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3600-1;
 8002db4:	4b4b      	ldr	r3, [pc, #300]	@ (8002ee4 <MX_TIM8_Init+0x180>)
 8002db6:	f640 620f 	movw	r2, #3599	@ 0xe0f
 8002dba:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dbc:	4b49      	ldr	r3, [pc, #292]	@ (8002ee4 <MX_TIM8_Init+0x180>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002dc2:	4b48      	ldr	r3, [pc, #288]	@ (8002ee4 <MX_TIM8_Init+0x180>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002dc8:	4b46      	ldr	r3, [pc, #280]	@ (8002ee4 <MX_TIM8_Init+0x180>)
 8002dca:	2280      	movs	r2, #128	@ 0x80
 8002dcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002dce:	4845      	ldr	r0, [pc, #276]	@ (8002ee4 <MX_TIM8_Init+0x180>)
 8002dd0:	f003 fd9e 	bl	8006910 <HAL_TIM_Base_Init>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002dda:	f7ff fc31 	bl	8002640 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002de2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002de4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002de8:	4619      	mov	r1, r3
 8002dea:	483e      	ldr	r0, [pc, #248]	@ (8002ee4 <MX_TIM8_Init+0x180>)
 8002dec:	f004 fa34 	bl	8007258 <HAL_TIM_ConfigClockSource>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002df6:	f7ff fc23 	bl	8002640 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002dfa:	483a      	ldr	r0, [pc, #232]	@ (8002ee4 <MX_TIM8_Init+0x180>)
 8002dfc:	f003 fe38 	bl	8006a70 <HAL_TIM_PWM_Init>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002e06:	f7ff fc1b 	bl	8002640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002e12:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002e16:	4619      	mov	r1, r3
 8002e18:	4832      	ldr	r0, [pc, #200]	@ (8002ee4 <MX_TIM8_Init+0x180>)
 8002e1a:	f004 fea1 	bl	8007b60 <HAL_TIMEx_MasterConfigSynchronization>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002e24:	f7ff fc0c 	bl	8002640 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e28:	2360      	movs	r3, #96	@ 0x60
 8002e2a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e30:	2300      	movs	r3, #0
 8002e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e34:	2300      	movs	r3, #0
 8002e36:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e40:	2300      	movs	r3, #0
 8002e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e48:	2200      	movs	r2, #0
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4825      	ldr	r0, [pc, #148]	@ (8002ee4 <MX_TIM8_Init+0x180>)
 8002e4e:	f004 f941 	bl	80070d4 <HAL_TIM_PWM_ConfigChannel>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8002e58:	f7ff fbf2 	bl	8002640 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e60:	2204      	movs	r2, #4
 8002e62:	4619      	mov	r1, r3
 8002e64:	481f      	ldr	r0, [pc, #124]	@ (8002ee4 <MX_TIM8_Init+0x180>)
 8002e66:	f004 f935 	bl	80070d4 <HAL_TIM_PWM_ConfigChannel>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8002e70:	f7ff fbe6 	bl	8002640 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e78:	2208      	movs	r2, #8
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4819      	ldr	r0, [pc, #100]	@ (8002ee4 <MX_TIM8_Init+0x180>)
 8002e7e:	f004 f929 	bl	80070d4 <HAL_TIM_PWM_ConfigChannel>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8002e88:	f7ff fbda 	bl	8002640 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002e8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e90:	220c      	movs	r2, #12
 8002e92:	4619      	mov	r1, r3
 8002e94:	4813      	ldr	r0, [pc, #76]	@ (8002ee4 <MX_TIM8_Init+0x180>)
 8002e96:	f004 f91d 	bl	80070d4 <HAL_TIM_PWM_ConfigChannel>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8002ea0:	f7ff fbce 	bl	8002640 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002eac:	2300      	movs	r3, #0
 8002eae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002eb8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ebc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002ec2:	1d3b      	adds	r3, r7, #4
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4807      	ldr	r0, [pc, #28]	@ (8002ee4 <MX_TIM8_Init+0x180>)
 8002ec8:	f004 feb6 	bl	8007c38 <HAL_TIMEx_ConfigBreakDeadTime>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8002ed2:	f7ff fbb5 	bl	8002640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002ed6:	4803      	ldr	r0, [pc, #12]	@ (8002ee4 <MX_TIM8_Init+0x180>)
 8002ed8:	f000 f946 	bl	8003168 <HAL_TIM_MspPostInit>

}
 8002edc:	bf00      	nop
 8002ede:	3758      	adds	r7, #88	@ 0x58
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	20001dc0 	.word	0x20001dc0
 8002ee8:	40013400 	.word	0x40013400

08002eec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a1f      	ldr	r2, [pc, #124]	@ (8002f78 <HAL_TIM_Base_MspInit+0x8c>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d10c      	bne.n	8002f18 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002efe:	4b1f      	ldr	r3, [pc, #124]	@ (8002f7c <HAL_TIM_Base_MspInit+0x90>)
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	4a1e      	ldr	r2, [pc, #120]	@ (8002f7c <HAL_TIM_Base_MspInit+0x90>)
 8002f04:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002f08:	6193      	str	r3, [r2, #24]
 8002f0a:	4b1c      	ldr	r3, [pc, #112]	@ (8002f7c <HAL_TIM_Base_MspInit+0x90>)
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f12:	617b      	str	r3, [r7, #20]
 8002f14:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002f16:	e02a      	b.n	8002f6e <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM7)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a18      	ldr	r2, [pc, #96]	@ (8002f80 <HAL_TIM_Base_MspInit+0x94>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d114      	bne.n	8002f4c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002f22:	4b16      	ldr	r3, [pc, #88]	@ (8002f7c <HAL_TIM_Base_MspInit+0x90>)
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	4a15      	ldr	r2, [pc, #84]	@ (8002f7c <HAL_TIM_Base_MspInit+0x90>)
 8002f28:	f043 0320 	orr.w	r3, r3, #32
 8002f2c:	61d3      	str	r3, [r2, #28]
 8002f2e:	4b13      	ldr	r3, [pc, #76]	@ (8002f7c <HAL_TIM_Base_MspInit+0x90>)
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	f003 0320 	and.w	r3, r3, #32
 8002f36:	613b      	str	r3, [r7, #16]
 8002f38:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	2037      	movs	r0, #55	@ 0x37
 8002f40:	f000 fbed 	bl	800371e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002f44:	2037      	movs	r0, #55	@ 0x37
 8002f46:	f000 fc06 	bl	8003756 <HAL_NVIC_EnableIRQ>
}
 8002f4a:	e010      	b.n	8002f6e <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM8)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a0c      	ldr	r2, [pc, #48]	@ (8002f84 <HAL_TIM_Base_MspInit+0x98>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d10b      	bne.n	8002f6e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002f56:	4b09      	ldr	r3, [pc, #36]	@ (8002f7c <HAL_TIM_Base_MspInit+0x90>)
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	4a08      	ldr	r2, [pc, #32]	@ (8002f7c <HAL_TIM_Base_MspInit+0x90>)
 8002f5c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002f60:	6193      	str	r3, [r2, #24]
 8002f62:	4b06      	ldr	r3, [pc, #24]	@ (8002f7c <HAL_TIM_Base_MspInit+0x90>)
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f6a:	60fb      	str	r3, [r7, #12]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
}
 8002f6e:	bf00      	nop
 8002f70:	3718      	adds	r7, #24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	40012c00 	.word	0x40012c00
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	40001400 	.word	0x40001400
 8002f84:	40013400 	.word	0x40013400

08002f88 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b090      	sub	sp, #64	@ 0x40
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	605a      	str	r2, [r3, #4]
 8002f9a:	609a      	str	r2, [r3, #8]
 8002f9c:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fa6:	d14f      	bne.n	8003048 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fa8:	4b68      	ldr	r3, [pc, #416]	@ (800314c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	4a67      	ldr	r2, [pc, #412]	@ (800314c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002fae:	f043 0301 	orr.w	r3, r3, #1
 8002fb2:	61d3      	str	r3, [r2, #28]
 8002fb4:	4b65      	ldr	r3, [pc, #404]	@ (800314c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fc0:	4b62      	ldr	r3, [pc, #392]	@ (800314c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	4a61      	ldr	r2, [pc, #388]	@ (800314c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002fc6:	f043 0304 	orr.w	r3, r3, #4
 8002fca:	6193      	str	r3, [r2, #24]
 8002fcc:	4b5f      	ldr	r3, [pc, #380]	@ (800314c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fd8:	4b5c      	ldr	r3, [pc, #368]	@ (800314c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	4a5b      	ldr	r2, [pc, #364]	@ (800314c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002fde:	f043 0308 	orr.w	r3, r3, #8
 8002fe2:	6193      	str	r3, [r2, #24]
 8002fe4:	4b59      	ldr	r3, [pc, #356]	@ (800314c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	f003 0308 	and.w	r3, r3, #8
 8002fec:	623b      	str	r3, [r7, #32]
 8002fee:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002ff0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ffe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003002:	4619      	mov	r1, r3
 8003004:	4852      	ldr	r0, [pc, #328]	@ (8003150 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003006:	f000 ffc5 	bl	8003f94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800300a:	2308      	movs	r3, #8
 800300c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800300e:	2300      	movs	r3, #0
 8003010:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003012:	2300      	movs	r3, #0
 8003014:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003016:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800301a:	4619      	mov	r1, r3
 800301c:	484d      	ldr	r0, [pc, #308]	@ (8003154 <HAL_TIM_Encoder_MspInit+0x1cc>)
 800301e:	f000 ffb9 	bl	8003f94 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8003022:	4b4d      	ldr	r3, [pc, #308]	@ (8003158 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003028:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800302a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800302e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003030:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003032:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8003036:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003038:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800303a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800303e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003040:	4a45      	ldr	r2, [pc, #276]	@ (8003158 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003044:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8003046:	e07c      	b.n	8003142 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(tim_encoderHandle->Instance==TIM3)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a43      	ldr	r2, [pc, #268]	@ (800315c <HAL_TIM_Encoder_MspInit+0x1d4>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d124      	bne.n	800309c <HAL_TIM_Encoder_MspInit+0x114>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003052:	4b3e      	ldr	r3, [pc, #248]	@ (800314c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	4a3d      	ldr	r2, [pc, #244]	@ (800314c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003058:	f043 0302 	orr.w	r3, r3, #2
 800305c:	61d3      	str	r3, [r2, #28]
 800305e:	4b3b      	ldr	r3, [pc, #236]	@ (800314c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	61fb      	str	r3, [r7, #28]
 8003068:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800306a:	4b38      	ldr	r3, [pc, #224]	@ (800314c <HAL_TIM_Encoder_MspInit+0x1c4>)
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	4a37      	ldr	r2, [pc, #220]	@ (800314c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003070:	f043 0304 	orr.w	r3, r3, #4
 8003074:	6193      	str	r3, [r2, #24]
 8003076:	4b35      	ldr	r3, [pc, #212]	@ (800314c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	f003 0304 	and.w	r3, r3, #4
 800307e:	61bb      	str	r3, [r7, #24]
 8003080:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003082:	23c0      	movs	r3, #192	@ 0xc0
 8003084:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003086:	2300      	movs	r3, #0
 8003088:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308a:	2300      	movs	r3, #0
 800308c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800308e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003092:	4619      	mov	r1, r3
 8003094:	482e      	ldr	r0, [pc, #184]	@ (8003150 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003096:	f000 ff7d 	bl	8003f94 <HAL_GPIO_Init>
}
 800309a:	e052      	b.n	8003142 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(tim_encoderHandle->Instance==TIM4)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a2f      	ldr	r2, [pc, #188]	@ (8003160 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d124      	bne.n	80030f0 <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80030a6:	4b29      	ldr	r3, [pc, #164]	@ (800314c <HAL_TIM_Encoder_MspInit+0x1c4>)
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	4a28      	ldr	r2, [pc, #160]	@ (800314c <HAL_TIM_Encoder_MspInit+0x1c4>)
 80030ac:	f043 0304 	orr.w	r3, r3, #4
 80030b0:	61d3      	str	r3, [r2, #28]
 80030b2:	4b26      	ldr	r3, [pc, #152]	@ (800314c <HAL_TIM_Encoder_MspInit+0x1c4>)
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	f003 0304 	and.w	r3, r3, #4
 80030ba:	617b      	str	r3, [r7, #20]
 80030bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030be:	4b23      	ldr	r3, [pc, #140]	@ (800314c <HAL_TIM_Encoder_MspInit+0x1c4>)
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	4a22      	ldr	r2, [pc, #136]	@ (800314c <HAL_TIM_Encoder_MspInit+0x1c4>)
 80030c4:	f043 0308 	orr.w	r3, r3, #8
 80030c8:	6193      	str	r3, [r2, #24]
 80030ca:	4b20      	ldr	r3, [pc, #128]	@ (800314c <HAL_TIM_Encoder_MspInit+0x1c4>)
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	f003 0308 	and.w	r3, r3, #8
 80030d2:	613b      	str	r3, [r7, #16]
 80030d4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80030d6:	23c0      	movs	r3, #192	@ 0xc0
 80030d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030da:	2300      	movs	r3, #0
 80030dc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030de:	2300      	movs	r3, #0
 80030e0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80030e6:	4619      	mov	r1, r3
 80030e8:	481a      	ldr	r0, [pc, #104]	@ (8003154 <HAL_TIM_Encoder_MspInit+0x1cc>)
 80030ea:	f000 ff53 	bl	8003f94 <HAL_GPIO_Init>
}
 80030ee:	e028      	b.n	8003142 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(tim_encoderHandle->Instance==TIM5)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a1b      	ldr	r2, [pc, #108]	@ (8003164 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d123      	bne.n	8003142 <HAL_TIM_Encoder_MspInit+0x1ba>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80030fa:	4b14      	ldr	r3, [pc, #80]	@ (800314c <HAL_TIM_Encoder_MspInit+0x1c4>)
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	4a13      	ldr	r2, [pc, #76]	@ (800314c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003100:	f043 0308 	orr.w	r3, r3, #8
 8003104:	61d3      	str	r3, [r2, #28]
 8003106:	4b11      	ldr	r3, [pc, #68]	@ (800314c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003112:	4b0e      	ldr	r3, [pc, #56]	@ (800314c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	4a0d      	ldr	r2, [pc, #52]	@ (800314c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003118:	f043 0304 	orr.w	r3, r3, #4
 800311c:	6193      	str	r3, [r2, #24]
 800311e:	4b0b      	ldr	r3, [pc, #44]	@ (800314c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	f003 0304 	and.w	r3, r3, #4
 8003126:	60bb      	str	r3, [r7, #8]
 8003128:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800312a:	2303      	movs	r3, #3
 800312c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800312e:	2300      	movs	r3, #0
 8003130:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003132:	2300      	movs	r3, #0
 8003134:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003136:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800313a:	4619      	mov	r1, r3
 800313c:	4804      	ldr	r0, [pc, #16]	@ (8003150 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800313e:	f000 ff29 	bl	8003f94 <HAL_GPIO_Init>
}
 8003142:	bf00      	nop
 8003144:	3740      	adds	r7, #64	@ 0x40
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	40021000 	.word	0x40021000
 8003150:	40010800 	.word	0x40010800
 8003154:	40010c00 	.word	0x40010c00
 8003158:	40010000 	.word	0x40010000
 800315c:	40000400 	.word	0x40000400
 8003160:	40000800 	.word	0x40000800
 8003164:	40000c00 	.word	0x40000c00

08003168 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b08a      	sub	sp, #40	@ 0x28
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003170:	f107 0314 	add.w	r3, r7, #20
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	605a      	str	r2, [r3, #4]
 800317a:	609a      	str	r2, [r3, #8]
 800317c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a34      	ldr	r2, [pc, #208]	@ (8003254 <HAL_TIM_MspPostInit+0xec>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d143      	bne.n	8003210 <HAL_TIM_MspPostInit+0xa8>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003188:	4b33      	ldr	r3, [pc, #204]	@ (8003258 <HAL_TIM_MspPostInit+0xf0>)
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	4a32      	ldr	r2, [pc, #200]	@ (8003258 <HAL_TIM_MspPostInit+0xf0>)
 800318e:	f043 0308 	orr.w	r3, r3, #8
 8003192:	6193      	str	r3, [r2, #24]
 8003194:	4b30      	ldr	r3, [pc, #192]	@ (8003258 <HAL_TIM_MspPostInit+0xf0>)
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	f003 0308 	and.w	r3, r3, #8
 800319c:	613b      	str	r3, [r7, #16]
 800319e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031a0:	4b2d      	ldr	r3, [pc, #180]	@ (8003258 <HAL_TIM_MspPostInit+0xf0>)
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	4a2c      	ldr	r2, [pc, #176]	@ (8003258 <HAL_TIM_MspPostInit+0xf0>)
 80031a6:	f043 0304 	orr.w	r3, r3, #4
 80031aa:	6193      	str	r3, [r2, #24]
 80031ac:	4b2a      	ldr	r3, [pc, #168]	@ (8003258 <HAL_TIM_MspPostInit+0xf0>)
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	f003 0304 	and.w	r3, r3, #4
 80031b4:	60fb      	str	r3, [r7, #12]
 80031b6:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> TIM1_CH2N
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80031b8:	2303      	movs	r3, #3
 80031ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031bc:	2302      	movs	r3, #2
 80031be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c0:	2302      	movs	r3, #2
 80031c2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031c4:	f107 0314 	add.w	r3, r7, #20
 80031c8:	4619      	mov	r1, r3
 80031ca:	4824      	ldr	r0, [pc, #144]	@ (800325c <HAL_TIM_MspPostInit+0xf4>)
 80031cc:	f000 fee2 	bl	8003f94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 80031d0:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 80031d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d6:	2302      	movs	r3, #2
 80031d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031da:	2302      	movs	r3, #2
 80031dc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031de:	f107 0314 	add.w	r3, r7, #20
 80031e2:	4619      	mov	r1, r3
 80031e4:	481e      	ldr	r0, [pc, #120]	@ (8003260 <HAL_TIM_MspPostInit+0xf8>)
 80031e6:	f000 fed5 	bl	8003f94 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 80031ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003264 <HAL_TIM_MspPostInit+0xfc>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80031f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80031f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80031f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fa:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80031fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003202:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003206:	627b      	str	r3, [r7, #36]	@ 0x24
 8003208:	4a16      	ldr	r2, [pc, #88]	@ (8003264 <HAL_TIM_MspPostInit+0xfc>)
 800320a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800320e:	e01d      	b.n	800324c <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM8)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a14      	ldr	r2, [pc, #80]	@ (8003268 <HAL_TIM_MspPostInit+0x100>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d118      	bne.n	800324c <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800321a:	4b0f      	ldr	r3, [pc, #60]	@ (8003258 <HAL_TIM_MspPostInit+0xf0>)
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	4a0e      	ldr	r2, [pc, #56]	@ (8003258 <HAL_TIM_MspPostInit+0xf0>)
 8003220:	f043 0310 	orr.w	r3, r3, #16
 8003224:	6193      	str	r3, [r2, #24]
 8003226:	4b0c      	ldr	r3, [pc, #48]	@ (8003258 <HAL_TIM_MspPostInit+0xf0>)
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	f003 0310 	and.w	r3, r3, #16
 800322e:	60bb      	str	r3, [r7, #8]
 8003230:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003232:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8003236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003238:	2302      	movs	r3, #2
 800323a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800323c:	2302      	movs	r3, #2
 800323e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003240:	f107 0314 	add.w	r3, r7, #20
 8003244:	4619      	mov	r1, r3
 8003246:	4809      	ldr	r0, [pc, #36]	@ (800326c <HAL_TIM_MspPostInit+0x104>)
 8003248:	f000 fea4 	bl	8003f94 <HAL_GPIO_Init>
}
 800324c:	bf00      	nop
 800324e:	3728      	adds	r7, #40	@ 0x28
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40012c00 	.word	0x40012c00
 8003258:	40021000 	.word	0x40021000
 800325c:	40010c00 	.word	0x40010c00
 8003260:	40010800 	.word	0x40010800
 8003264:	40010000 	.word	0x40010000
 8003268:	40013400 	.word	0x40013400
 800326c:	40011000 	.word	0x40011000

08003270 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003274:	4b11      	ldr	r3, [pc, #68]	@ (80032bc <MX_USART1_UART_Init+0x4c>)
 8003276:	4a12      	ldr	r2, [pc, #72]	@ (80032c0 <MX_USART1_UART_Init+0x50>)
 8003278:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800327a:	4b10      	ldr	r3, [pc, #64]	@ (80032bc <MX_USART1_UART_Init+0x4c>)
 800327c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003280:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003282:	4b0e      	ldr	r3, [pc, #56]	@ (80032bc <MX_USART1_UART_Init+0x4c>)
 8003284:	2200      	movs	r2, #0
 8003286:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003288:	4b0c      	ldr	r3, [pc, #48]	@ (80032bc <MX_USART1_UART_Init+0x4c>)
 800328a:	2200      	movs	r2, #0
 800328c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800328e:	4b0b      	ldr	r3, [pc, #44]	@ (80032bc <MX_USART1_UART_Init+0x4c>)
 8003290:	2200      	movs	r2, #0
 8003292:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003294:	4b09      	ldr	r3, [pc, #36]	@ (80032bc <MX_USART1_UART_Init+0x4c>)
 8003296:	220c      	movs	r2, #12
 8003298:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800329a:	4b08      	ldr	r3, [pc, #32]	@ (80032bc <MX_USART1_UART_Init+0x4c>)
 800329c:	2200      	movs	r2, #0
 800329e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80032a0:	4b06      	ldr	r3, [pc, #24]	@ (80032bc <MX_USART1_UART_Init+0x4c>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80032a6:	4805      	ldr	r0, [pc, #20]	@ (80032bc <MX_USART1_UART_Init+0x4c>)
 80032a8:	f004 fd4d 	bl	8007d46 <HAL_UART_Init>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80032b2:	f7ff f9c5 	bl	8002640 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80032b6:	bf00      	nop
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	20001e08 	.word	0x20001e08
 80032c0:	40013800 	.word	0x40013800

080032c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b088      	sub	sp, #32
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032cc:	f107 0310 	add.w	r3, r7, #16
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	605a      	str	r2, [r3, #4]
 80032d6:	609a      	str	r2, [r3, #8]
 80032d8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a47      	ldr	r2, [pc, #284]	@ (80033fc <HAL_UART_MspInit+0x138>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	f040 8086 	bne.w	80033f2 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80032e6:	4b46      	ldr	r3, [pc, #280]	@ (8003400 <HAL_UART_MspInit+0x13c>)
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	4a45      	ldr	r2, [pc, #276]	@ (8003400 <HAL_UART_MspInit+0x13c>)
 80032ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032f0:	6193      	str	r3, [r2, #24]
 80032f2:	4b43      	ldr	r3, [pc, #268]	@ (8003400 <HAL_UART_MspInit+0x13c>)
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032fe:	4b40      	ldr	r3, [pc, #256]	@ (8003400 <HAL_UART_MspInit+0x13c>)
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	4a3f      	ldr	r2, [pc, #252]	@ (8003400 <HAL_UART_MspInit+0x13c>)
 8003304:	f043 0304 	orr.w	r3, r3, #4
 8003308:	6193      	str	r3, [r2, #24]
 800330a:	4b3d      	ldr	r3, [pc, #244]	@ (8003400 <HAL_UART_MspInit+0x13c>)
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	f003 0304 	and.w	r3, r3, #4
 8003312:	60bb      	str	r3, [r7, #8]
 8003314:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003316:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800331a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800331c:	2302      	movs	r3, #2
 800331e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003320:	2303      	movs	r3, #3
 8003322:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003324:	f107 0310 	add.w	r3, r7, #16
 8003328:	4619      	mov	r1, r3
 800332a:	4836      	ldr	r0, [pc, #216]	@ (8003404 <HAL_UART_MspInit+0x140>)
 800332c:	f000 fe32 	bl	8003f94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003330:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003334:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003336:	2300      	movs	r3, #0
 8003338:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333a:	2300      	movs	r3, #0
 800333c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800333e:	f107 0310 	add.w	r3, r7, #16
 8003342:	4619      	mov	r1, r3
 8003344:	482f      	ldr	r0, [pc, #188]	@ (8003404 <HAL_UART_MspInit+0x140>)
 8003346:	f000 fe25 	bl	8003f94 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800334a:	4b2f      	ldr	r3, [pc, #188]	@ (8003408 <HAL_UART_MspInit+0x144>)
 800334c:	4a2f      	ldr	r2, [pc, #188]	@ (800340c <HAL_UART_MspInit+0x148>)
 800334e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003350:	4b2d      	ldr	r3, [pc, #180]	@ (8003408 <HAL_UART_MspInit+0x144>)
 8003352:	2210      	movs	r2, #16
 8003354:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003356:	4b2c      	ldr	r3, [pc, #176]	@ (8003408 <HAL_UART_MspInit+0x144>)
 8003358:	2200      	movs	r2, #0
 800335a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800335c:	4b2a      	ldr	r3, [pc, #168]	@ (8003408 <HAL_UART_MspInit+0x144>)
 800335e:	2280      	movs	r2, #128	@ 0x80
 8003360:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003362:	4b29      	ldr	r3, [pc, #164]	@ (8003408 <HAL_UART_MspInit+0x144>)
 8003364:	2200      	movs	r2, #0
 8003366:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003368:	4b27      	ldr	r3, [pc, #156]	@ (8003408 <HAL_UART_MspInit+0x144>)
 800336a:	2200      	movs	r2, #0
 800336c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800336e:	4b26      	ldr	r3, [pc, #152]	@ (8003408 <HAL_UART_MspInit+0x144>)
 8003370:	2200      	movs	r2, #0
 8003372:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003374:	4b24      	ldr	r3, [pc, #144]	@ (8003408 <HAL_UART_MspInit+0x144>)
 8003376:	2200      	movs	r2, #0
 8003378:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800337a:	4823      	ldr	r0, [pc, #140]	@ (8003408 <HAL_UART_MspInit+0x144>)
 800337c:	f000 fa06 	bl	800378c <HAL_DMA_Init>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8003386:	f7ff f95b 	bl	8002640 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a1e      	ldr	r2, [pc, #120]	@ (8003408 <HAL_UART_MspInit+0x144>)
 800338e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003390:	4a1d      	ldr	r2, [pc, #116]	@ (8003408 <HAL_UART_MspInit+0x144>)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003396:	4b1e      	ldr	r3, [pc, #120]	@ (8003410 <HAL_UART_MspInit+0x14c>)
 8003398:	4a1e      	ldr	r2, [pc, #120]	@ (8003414 <HAL_UART_MspInit+0x150>)
 800339a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800339c:	4b1c      	ldr	r3, [pc, #112]	@ (8003410 <HAL_UART_MspInit+0x14c>)
 800339e:	2200      	movs	r2, #0
 80033a0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003410 <HAL_UART_MspInit+0x14c>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80033a8:	4b19      	ldr	r3, [pc, #100]	@ (8003410 <HAL_UART_MspInit+0x14c>)
 80033aa:	2280      	movs	r2, #128	@ 0x80
 80033ac:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033ae:	4b18      	ldr	r3, [pc, #96]	@ (8003410 <HAL_UART_MspInit+0x14c>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033b4:	4b16      	ldr	r3, [pc, #88]	@ (8003410 <HAL_UART_MspInit+0x14c>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80033ba:	4b15      	ldr	r3, [pc, #84]	@ (8003410 <HAL_UART_MspInit+0x14c>)
 80033bc:	2200      	movs	r2, #0
 80033be:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80033c0:	4b13      	ldr	r3, [pc, #76]	@ (8003410 <HAL_UART_MspInit+0x14c>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80033c6:	4812      	ldr	r0, [pc, #72]	@ (8003410 <HAL_UART_MspInit+0x14c>)
 80033c8:	f000 f9e0 	bl	800378c <HAL_DMA_Init>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80033d2:	f7ff f935 	bl	8002640 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a0d      	ldr	r2, [pc, #52]	@ (8003410 <HAL_UART_MspInit+0x14c>)
 80033da:	63da      	str	r2, [r3, #60]	@ 0x3c
 80033dc:	4a0c      	ldr	r2, [pc, #48]	@ (8003410 <HAL_UART_MspInit+0x14c>)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80033e2:	2200      	movs	r2, #0
 80033e4:	2100      	movs	r1, #0
 80033e6:	2025      	movs	r0, #37	@ 0x25
 80033e8:	f000 f999 	bl	800371e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80033ec:	2025      	movs	r0, #37	@ 0x25
 80033ee:	f000 f9b2 	bl	8003756 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80033f2:	bf00      	nop
 80033f4:	3720      	adds	r7, #32
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40013800 	.word	0x40013800
 8003400:	40021000 	.word	0x40021000
 8003404:	40010800 	.word	0x40010800
 8003408:	20001e50 	.word	0x20001e50
 800340c:	40020044 	.word	0x40020044
 8003410:	20001e94 	.word	0x20001e94
 8003414:	40020058 	.word	0x40020058

08003418 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003418:	480c      	ldr	r0, [pc, #48]	@ (800344c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800341a:	490d      	ldr	r1, [pc, #52]	@ (8003450 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800341c:	4a0d      	ldr	r2, [pc, #52]	@ (8003454 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800341e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003420:	e002      	b.n	8003428 <LoopCopyDataInit>

08003422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003426:	3304      	adds	r3, #4

08003428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800342a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800342c:	d3f9      	bcc.n	8003422 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800342e:	4a0a      	ldr	r2, [pc, #40]	@ (8003458 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003430:	4c0a      	ldr	r4, [pc, #40]	@ (800345c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003434:	e001      	b.n	800343a <LoopFillZerobss>

08003436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003438:	3204      	adds	r2, #4

0800343a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800343a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800343c:	d3fb      	bcc.n	8003436 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800343e:	f7ff fa3f 	bl	80028c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003442:	f005 fd51 	bl	8008ee8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003446:	f7ff f895 	bl	8002574 <main>
  bx lr
 800344a:	4770      	bx	lr
  ldr r0, =_sdata
 800344c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003450:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8003454:	08009bb8 	.word	0x08009bb8
  ldr r2, =_sbss
 8003458:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800345c:	20002028 	.word	0x20002028

08003460 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003460:	e7fe      	b.n	8003460 <ADC1_2_IRQHandler>
	...

08003464 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003468:	4b08      	ldr	r3, [pc, #32]	@ (800348c <HAL_Init+0x28>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a07      	ldr	r2, [pc, #28]	@ (800348c <HAL_Init+0x28>)
 800346e:	f043 0310 	orr.w	r3, r3, #16
 8003472:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003474:	2003      	movs	r0, #3
 8003476:	f000 f947 	bl	8003708 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800347a:	200f      	movs	r0, #15
 800347c:	f000 f808 	bl	8003490 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003480:	f7ff f8e4 	bl	800264c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40022000 	.word	0x40022000

08003490 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003498:	4b12      	ldr	r3, [pc, #72]	@ (80034e4 <HAL_InitTick+0x54>)
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	4b12      	ldr	r3, [pc, #72]	@ (80034e8 <HAL_InitTick+0x58>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	4619      	mov	r1, r3
 80034a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80034aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 f95f 	bl	8003772 <HAL_SYSTICK_Config>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e00e      	b.n	80034dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b0f      	cmp	r3, #15
 80034c2:	d80a      	bhi.n	80034da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034c4:	2200      	movs	r2, #0
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80034cc:	f000 f927 	bl	800371e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034d0:	4a06      	ldr	r2, [pc, #24]	@ (80034ec <HAL_InitTick+0x5c>)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
 80034d8:	e000      	b.n	80034dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	2000000c 	.word	0x2000000c
 80034e8:	20000014 	.word	0x20000014
 80034ec:	20000010 	.word	0x20000010

080034f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034f4:	4b05      	ldr	r3, [pc, #20]	@ (800350c <HAL_IncTick+0x1c>)
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	461a      	mov	r2, r3
 80034fa:	4b05      	ldr	r3, [pc, #20]	@ (8003510 <HAL_IncTick+0x20>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4413      	add	r3, r2
 8003500:	4a03      	ldr	r2, [pc, #12]	@ (8003510 <HAL_IncTick+0x20>)
 8003502:	6013      	str	r3, [r2, #0]
}
 8003504:	bf00      	nop
 8003506:	46bd      	mov	sp, r7
 8003508:	bc80      	pop	{r7}
 800350a:	4770      	bx	lr
 800350c:	20000014 	.word	0x20000014
 8003510:	20001ed8 	.word	0x20001ed8

08003514 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
  return uwTick;
 8003518:	4b02      	ldr	r3, [pc, #8]	@ (8003524 <HAL_GetTick+0x10>)
 800351a:	681b      	ldr	r3, [r3, #0]
}
 800351c:	4618      	mov	r0, r3
 800351e:	46bd      	mov	sp, r7
 8003520:	bc80      	pop	{r7}
 8003522:	4770      	bx	lr
 8003524:	20001ed8 	.word	0x20001ed8

08003528 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003530:	f7ff fff0 	bl	8003514 <HAL_GetTick>
 8003534:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003540:	d005      	beq.n	800354e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003542:	4b0a      	ldr	r3, [pc, #40]	@ (800356c <HAL_Delay+0x44>)
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	461a      	mov	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	4413      	add	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800354e:	bf00      	nop
 8003550:	f7ff ffe0 	bl	8003514 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	429a      	cmp	r2, r3
 800355e:	d8f7      	bhi.n	8003550 <HAL_Delay+0x28>
  {
  }
}
 8003560:	bf00      	nop
 8003562:	bf00      	nop
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	20000014 	.word	0x20000014

08003570 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f003 0307 	and.w	r3, r3, #7
 800357e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003580:	4b0c      	ldr	r3, [pc, #48]	@ (80035b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800358c:	4013      	ands	r3, r2
 800358e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003598:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800359c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035a2:	4a04      	ldr	r2, [pc, #16]	@ (80035b4 <__NVIC_SetPriorityGrouping+0x44>)
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	60d3      	str	r3, [r2, #12]
}
 80035a8:	bf00      	nop
 80035aa:	3714      	adds	r7, #20
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bc80      	pop	{r7}
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	e000ed00 	.word	0xe000ed00

080035b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035bc:	4b04      	ldr	r3, [pc, #16]	@ (80035d0 <__NVIC_GetPriorityGrouping+0x18>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	0a1b      	lsrs	r3, r3, #8
 80035c2:	f003 0307 	and.w	r3, r3, #7
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bc80      	pop	{r7}
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	e000ed00 	.word	0xe000ed00

080035d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	4603      	mov	r3, r0
 80035dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	db0b      	blt.n	80035fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035e6:	79fb      	ldrb	r3, [r7, #7]
 80035e8:	f003 021f 	and.w	r2, r3, #31
 80035ec:	4906      	ldr	r1, [pc, #24]	@ (8003608 <__NVIC_EnableIRQ+0x34>)
 80035ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f2:	095b      	lsrs	r3, r3, #5
 80035f4:	2001      	movs	r0, #1
 80035f6:	fa00 f202 	lsl.w	r2, r0, r2
 80035fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	bc80      	pop	{r7}
 8003606:	4770      	bx	lr
 8003608:	e000e100 	.word	0xe000e100

0800360c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	4603      	mov	r3, r0
 8003614:	6039      	str	r1, [r7, #0]
 8003616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361c:	2b00      	cmp	r3, #0
 800361e:	db0a      	blt.n	8003636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	b2da      	uxtb	r2, r3
 8003624:	490c      	ldr	r1, [pc, #48]	@ (8003658 <__NVIC_SetPriority+0x4c>)
 8003626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800362a:	0112      	lsls	r2, r2, #4
 800362c:	b2d2      	uxtb	r2, r2
 800362e:	440b      	add	r3, r1
 8003630:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003634:	e00a      	b.n	800364c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	b2da      	uxtb	r2, r3
 800363a:	4908      	ldr	r1, [pc, #32]	@ (800365c <__NVIC_SetPriority+0x50>)
 800363c:	79fb      	ldrb	r3, [r7, #7]
 800363e:	f003 030f 	and.w	r3, r3, #15
 8003642:	3b04      	subs	r3, #4
 8003644:	0112      	lsls	r2, r2, #4
 8003646:	b2d2      	uxtb	r2, r2
 8003648:	440b      	add	r3, r1
 800364a:	761a      	strb	r2, [r3, #24]
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	bc80      	pop	{r7}
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	e000e100 	.word	0xe000e100
 800365c:	e000ed00 	.word	0xe000ed00

08003660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003660:	b480      	push	{r7}
 8003662:	b089      	sub	sp, #36	@ 0x24
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	f1c3 0307 	rsb	r3, r3, #7
 800367a:	2b04      	cmp	r3, #4
 800367c:	bf28      	it	cs
 800367e:	2304      	movcs	r3, #4
 8003680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	3304      	adds	r3, #4
 8003686:	2b06      	cmp	r3, #6
 8003688:	d902      	bls.n	8003690 <NVIC_EncodePriority+0x30>
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	3b03      	subs	r3, #3
 800368e:	e000      	b.n	8003692 <NVIC_EncodePriority+0x32>
 8003690:	2300      	movs	r3, #0
 8003692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003694:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	fa02 f303 	lsl.w	r3, r2, r3
 800369e:	43da      	mvns	r2, r3
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	401a      	ands	r2, r3
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036a8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	fa01 f303 	lsl.w	r3, r1, r3
 80036b2:	43d9      	mvns	r1, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036b8:	4313      	orrs	r3, r2
         );
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3724      	adds	r7, #36	@ 0x24
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr

080036c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036d4:	d301      	bcc.n	80036da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036d6:	2301      	movs	r3, #1
 80036d8:	e00f      	b.n	80036fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036da:	4a0a      	ldr	r2, [pc, #40]	@ (8003704 <SysTick_Config+0x40>)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	3b01      	subs	r3, #1
 80036e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036e2:	210f      	movs	r1, #15
 80036e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80036e8:	f7ff ff90 	bl	800360c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036ec:	4b05      	ldr	r3, [pc, #20]	@ (8003704 <SysTick_Config+0x40>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036f2:	4b04      	ldr	r3, [pc, #16]	@ (8003704 <SysTick_Config+0x40>)
 80036f4:	2207      	movs	r2, #7
 80036f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	e000e010 	.word	0xe000e010

08003708 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f7ff ff2d 	bl	8003570 <__NVIC_SetPriorityGrouping>
}
 8003716:	bf00      	nop
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800371e:	b580      	push	{r7, lr}
 8003720:	b086      	sub	sp, #24
 8003722:	af00      	add	r7, sp, #0
 8003724:	4603      	mov	r3, r0
 8003726:	60b9      	str	r1, [r7, #8]
 8003728:	607a      	str	r2, [r7, #4]
 800372a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800372c:	2300      	movs	r3, #0
 800372e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003730:	f7ff ff42 	bl	80035b8 <__NVIC_GetPriorityGrouping>
 8003734:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	68b9      	ldr	r1, [r7, #8]
 800373a:	6978      	ldr	r0, [r7, #20]
 800373c:	f7ff ff90 	bl	8003660 <NVIC_EncodePriority>
 8003740:	4602      	mov	r2, r0
 8003742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003746:	4611      	mov	r1, r2
 8003748:	4618      	mov	r0, r3
 800374a:	f7ff ff5f 	bl	800360c <__NVIC_SetPriority>
}
 800374e:	bf00      	nop
 8003750:	3718      	adds	r7, #24
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b082      	sub	sp, #8
 800375a:	af00      	add	r7, sp, #0
 800375c:	4603      	mov	r3, r0
 800375e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff ff35 	bl	80035d4 <__NVIC_EnableIRQ>
}
 800376a:	bf00      	nop
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b082      	sub	sp, #8
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7ff ffa2 	bl	80036c4 <SysTick_Config>
 8003780:	4603      	mov	r3, r0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
	...

0800378c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e059      	b.n	8003856 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	461a      	mov	r2, r3
 80037a8:	4b2d      	ldr	r3, [pc, #180]	@ (8003860 <HAL_DMA_Init+0xd4>)
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d80f      	bhi.n	80037ce <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	461a      	mov	r2, r3
 80037b4:	4b2b      	ldr	r3, [pc, #172]	@ (8003864 <HAL_DMA_Init+0xd8>)
 80037b6:	4413      	add	r3, r2
 80037b8:	4a2b      	ldr	r2, [pc, #172]	@ (8003868 <HAL_DMA_Init+0xdc>)
 80037ba:	fba2 2303 	umull	r2, r3, r2, r3
 80037be:	091b      	lsrs	r3, r3, #4
 80037c0:	009a      	lsls	r2, r3, #2
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a28      	ldr	r2, [pc, #160]	@ (800386c <HAL_DMA_Init+0xe0>)
 80037ca:	63da      	str	r2, [r3, #60]	@ 0x3c
 80037cc:	e00e      	b.n	80037ec <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	461a      	mov	r2, r3
 80037d4:	4b26      	ldr	r3, [pc, #152]	@ (8003870 <HAL_DMA_Init+0xe4>)
 80037d6:	4413      	add	r3, r2
 80037d8:	4a23      	ldr	r2, [pc, #140]	@ (8003868 <HAL_DMA_Init+0xdc>)
 80037da:	fba2 2303 	umull	r2, r3, r2, r3
 80037de:	091b      	lsrs	r3, r3, #4
 80037e0:	009a      	lsls	r2, r3, #2
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a22      	ldr	r2, [pc, #136]	@ (8003874 <HAL_DMA_Init+0xe8>)
 80037ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2202      	movs	r2, #2
 80037f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003802:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003806:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003810:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800381c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003828:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	4313      	orrs	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3714      	adds	r7, #20
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr
 8003860:	40020407 	.word	0x40020407
 8003864:	bffdfff8 	.word	0xbffdfff8
 8003868:	cccccccd 	.word	0xcccccccd
 800386c:	40020000 	.word	0x40020000
 8003870:	bffdfbf8 	.word	0xbffdfbf8
 8003874:	40020400 	.word	0x40020400

08003878 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003880:	2300      	movs	r3, #0
 8003882:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d008      	beq.n	80038a2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2204      	movs	r2, #4
 8003894:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e020      	b.n	80038e4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 020e 	bic.w	r2, r2, #14
 80038b0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 0201 	bic.w	r2, r2, #1
 80038c0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ca:	2101      	movs	r1, #1
 80038cc:	fa01 f202 	lsl.w	r2, r1, r2
 80038d0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80038e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3714      	adds	r7, #20
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bc80      	pop	{r7}
 80038ec:	4770      	bx	lr
	...

080038f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038f8:	2300      	movs	r3, #0
 80038fa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d005      	beq.n	8003914 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2204      	movs	r2, #4
 800390c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	73fb      	strb	r3, [r7, #15]
 8003912:	e0d6      	b.n	8003ac2 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 020e 	bic.w	r2, r2, #14
 8003922:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 0201 	bic.w	r2, r2, #1
 8003932:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	461a      	mov	r2, r3
 800393a:	4b64      	ldr	r3, [pc, #400]	@ (8003acc <HAL_DMA_Abort_IT+0x1dc>)
 800393c:	429a      	cmp	r2, r3
 800393e:	d958      	bls.n	80039f2 <HAL_DMA_Abort_IT+0x102>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a62      	ldr	r2, [pc, #392]	@ (8003ad0 <HAL_DMA_Abort_IT+0x1e0>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d04f      	beq.n	80039ea <HAL_DMA_Abort_IT+0xfa>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a61      	ldr	r2, [pc, #388]	@ (8003ad4 <HAL_DMA_Abort_IT+0x1e4>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d048      	beq.n	80039e6 <HAL_DMA_Abort_IT+0xf6>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a5f      	ldr	r2, [pc, #380]	@ (8003ad8 <HAL_DMA_Abort_IT+0x1e8>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d040      	beq.n	80039e0 <HAL_DMA_Abort_IT+0xf0>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a5e      	ldr	r2, [pc, #376]	@ (8003adc <HAL_DMA_Abort_IT+0x1ec>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d038      	beq.n	80039da <HAL_DMA_Abort_IT+0xea>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a5c      	ldr	r2, [pc, #368]	@ (8003ae0 <HAL_DMA_Abort_IT+0x1f0>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d030      	beq.n	80039d4 <HAL_DMA_Abort_IT+0xe4>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a5b      	ldr	r2, [pc, #364]	@ (8003ae4 <HAL_DMA_Abort_IT+0x1f4>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d028      	beq.n	80039ce <HAL_DMA_Abort_IT+0xde>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a52      	ldr	r2, [pc, #328]	@ (8003acc <HAL_DMA_Abort_IT+0x1dc>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d020      	beq.n	80039c8 <HAL_DMA_Abort_IT+0xd8>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a57      	ldr	r2, [pc, #348]	@ (8003ae8 <HAL_DMA_Abort_IT+0x1f8>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d019      	beq.n	80039c4 <HAL_DMA_Abort_IT+0xd4>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a55      	ldr	r2, [pc, #340]	@ (8003aec <HAL_DMA_Abort_IT+0x1fc>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d012      	beq.n	80039c0 <HAL_DMA_Abort_IT+0xd0>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a54      	ldr	r2, [pc, #336]	@ (8003af0 <HAL_DMA_Abort_IT+0x200>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d00a      	beq.n	80039ba <HAL_DMA_Abort_IT+0xca>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a52      	ldr	r2, [pc, #328]	@ (8003af4 <HAL_DMA_Abort_IT+0x204>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d102      	bne.n	80039b4 <HAL_DMA_Abort_IT+0xc4>
 80039ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039b2:	e01b      	b.n	80039ec <HAL_DMA_Abort_IT+0xfc>
 80039b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80039b8:	e018      	b.n	80039ec <HAL_DMA_Abort_IT+0xfc>
 80039ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80039be:	e015      	b.n	80039ec <HAL_DMA_Abort_IT+0xfc>
 80039c0:	2310      	movs	r3, #16
 80039c2:	e013      	b.n	80039ec <HAL_DMA_Abort_IT+0xfc>
 80039c4:	2301      	movs	r3, #1
 80039c6:	e011      	b.n	80039ec <HAL_DMA_Abort_IT+0xfc>
 80039c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80039cc:	e00e      	b.n	80039ec <HAL_DMA_Abort_IT+0xfc>
 80039ce:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80039d2:	e00b      	b.n	80039ec <HAL_DMA_Abort_IT+0xfc>
 80039d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80039d8:	e008      	b.n	80039ec <HAL_DMA_Abort_IT+0xfc>
 80039da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039de:	e005      	b.n	80039ec <HAL_DMA_Abort_IT+0xfc>
 80039e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80039e4:	e002      	b.n	80039ec <HAL_DMA_Abort_IT+0xfc>
 80039e6:	2310      	movs	r3, #16
 80039e8:	e000      	b.n	80039ec <HAL_DMA_Abort_IT+0xfc>
 80039ea:	2301      	movs	r3, #1
 80039ec:	4a42      	ldr	r2, [pc, #264]	@ (8003af8 <HAL_DMA_Abort_IT+0x208>)
 80039ee:	6053      	str	r3, [r2, #4]
 80039f0:	e057      	b.n	8003aa2 <HAL_DMA_Abort_IT+0x1b2>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a36      	ldr	r2, [pc, #216]	@ (8003ad0 <HAL_DMA_Abort_IT+0x1e0>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d04f      	beq.n	8003a9c <HAL_DMA_Abort_IT+0x1ac>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a34      	ldr	r2, [pc, #208]	@ (8003ad4 <HAL_DMA_Abort_IT+0x1e4>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d048      	beq.n	8003a98 <HAL_DMA_Abort_IT+0x1a8>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a33      	ldr	r2, [pc, #204]	@ (8003ad8 <HAL_DMA_Abort_IT+0x1e8>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d040      	beq.n	8003a92 <HAL_DMA_Abort_IT+0x1a2>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a31      	ldr	r2, [pc, #196]	@ (8003adc <HAL_DMA_Abort_IT+0x1ec>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d038      	beq.n	8003a8c <HAL_DMA_Abort_IT+0x19c>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a30      	ldr	r2, [pc, #192]	@ (8003ae0 <HAL_DMA_Abort_IT+0x1f0>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d030      	beq.n	8003a86 <HAL_DMA_Abort_IT+0x196>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a2e      	ldr	r2, [pc, #184]	@ (8003ae4 <HAL_DMA_Abort_IT+0x1f4>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d028      	beq.n	8003a80 <HAL_DMA_Abort_IT+0x190>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a26      	ldr	r2, [pc, #152]	@ (8003acc <HAL_DMA_Abort_IT+0x1dc>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d020      	beq.n	8003a7a <HAL_DMA_Abort_IT+0x18a>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a2a      	ldr	r2, [pc, #168]	@ (8003ae8 <HAL_DMA_Abort_IT+0x1f8>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d019      	beq.n	8003a76 <HAL_DMA_Abort_IT+0x186>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a29      	ldr	r2, [pc, #164]	@ (8003aec <HAL_DMA_Abort_IT+0x1fc>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d012      	beq.n	8003a72 <HAL_DMA_Abort_IT+0x182>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a27      	ldr	r2, [pc, #156]	@ (8003af0 <HAL_DMA_Abort_IT+0x200>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d00a      	beq.n	8003a6c <HAL_DMA_Abort_IT+0x17c>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a26      	ldr	r2, [pc, #152]	@ (8003af4 <HAL_DMA_Abort_IT+0x204>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d102      	bne.n	8003a66 <HAL_DMA_Abort_IT+0x176>
 8003a60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a64:	e01b      	b.n	8003a9e <HAL_DMA_Abort_IT+0x1ae>
 8003a66:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003a6a:	e018      	b.n	8003a9e <HAL_DMA_Abort_IT+0x1ae>
 8003a6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a70:	e015      	b.n	8003a9e <HAL_DMA_Abort_IT+0x1ae>
 8003a72:	2310      	movs	r3, #16
 8003a74:	e013      	b.n	8003a9e <HAL_DMA_Abort_IT+0x1ae>
 8003a76:	2301      	movs	r3, #1
 8003a78:	e011      	b.n	8003a9e <HAL_DMA_Abort_IT+0x1ae>
 8003a7a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a7e:	e00e      	b.n	8003a9e <HAL_DMA_Abort_IT+0x1ae>
 8003a80:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003a84:	e00b      	b.n	8003a9e <HAL_DMA_Abort_IT+0x1ae>
 8003a86:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003a8a:	e008      	b.n	8003a9e <HAL_DMA_Abort_IT+0x1ae>
 8003a8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a90:	e005      	b.n	8003a9e <HAL_DMA_Abort_IT+0x1ae>
 8003a92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a96:	e002      	b.n	8003a9e <HAL_DMA_Abort_IT+0x1ae>
 8003a98:	2310      	movs	r3, #16
 8003a9a:	e000      	b.n	8003a9e <HAL_DMA_Abort_IT+0x1ae>
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	4a17      	ldr	r2, [pc, #92]	@ (8003afc <HAL_DMA_Abort_IT+0x20c>)
 8003aa0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	4798      	blx	r3
    } 
  }
  return status;
 8003ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	40020080 	.word	0x40020080
 8003ad0:	40020008 	.word	0x40020008
 8003ad4:	4002001c 	.word	0x4002001c
 8003ad8:	40020030 	.word	0x40020030
 8003adc:	40020044 	.word	0x40020044
 8003ae0:	40020058 	.word	0x40020058
 8003ae4:	4002006c 	.word	0x4002006c
 8003ae8:	40020408 	.word	0x40020408
 8003aec:	4002041c 	.word	0x4002041c
 8003af0:	40020430 	.word	0x40020430
 8003af4:	40020444 	.word	0x40020444
 8003af8:	40020400 	.word	0x40020400
 8003afc:	40020000 	.word	0x40020000

08003b00 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1c:	2204      	movs	r2, #4
 8003b1e:	409a      	lsls	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4013      	ands	r3, r2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 80f1 	beq.w	8003d0c <HAL_DMA_IRQHandler+0x20c>
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f000 80eb 	beq.w	8003d0c <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0320 	and.w	r3, r3, #32
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d107      	bne.n	8003b54 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 0204 	bic.w	r2, r2, #4
 8003b52:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	461a      	mov	r2, r3
 8003b5a:	4b5f      	ldr	r3, [pc, #380]	@ (8003cd8 <HAL_DMA_IRQHandler+0x1d8>)
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d958      	bls.n	8003c12 <HAL_DMA_IRQHandler+0x112>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a5d      	ldr	r2, [pc, #372]	@ (8003cdc <HAL_DMA_IRQHandler+0x1dc>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d04f      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x10a>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a5c      	ldr	r2, [pc, #368]	@ (8003ce0 <HAL_DMA_IRQHandler+0x1e0>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d048      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x106>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a5a      	ldr	r2, [pc, #360]	@ (8003ce4 <HAL_DMA_IRQHandler+0x1e4>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d040      	beq.n	8003c00 <HAL_DMA_IRQHandler+0x100>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a59      	ldr	r2, [pc, #356]	@ (8003ce8 <HAL_DMA_IRQHandler+0x1e8>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d038      	beq.n	8003bfa <HAL_DMA_IRQHandler+0xfa>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a57      	ldr	r2, [pc, #348]	@ (8003cec <HAL_DMA_IRQHandler+0x1ec>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d030      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0xf4>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a56      	ldr	r2, [pc, #344]	@ (8003cf0 <HAL_DMA_IRQHandler+0x1f0>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d028      	beq.n	8003bee <HAL_DMA_IRQHandler+0xee>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a4d      	ldr	r2, [pc, #308]	@ (8003cd8 <HAL_DMA_IRQHandler+0x1d8>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d020      	beq.n	8003be8 <HAL_DMA_IRQHandler+0xe8>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a52      	ldr	r2, [pc, #328]	@ (8003cf4 <HAL_DMA_IRQHandler+0x1f4>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d019      	beq.n	8003be4 <HAL_DMA_IRQHandler+0xe4>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a50      	ldr	r2, [pc, #320]	@ (8003cf8 <HAL_DMA_IRQHandler+0x1f8>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d012      	beq.n	8003be0 <HAL_DMA_IRQHandler+0xe0>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a4f      	ldr	r2, [pc, #316]	@ (8003cfc <HAL_DMA_IRQHandler+0x1fc>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d00a      	beq.n	8003bda <HAL_DMA_IRQHandler+0xda>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a4d      	ldr	r2, [pc, #308]	@ (8003d00 <HAL_DMA_IRQHandler+0x200>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d102      	bne.n	8003bd4 <HAL_DMA_IRQHandler+0xd4>
 8003bce:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003bd2:	e01b      	b.n	8003c0c <HAL_DMA_IRQHandler+0x10c>
 8003bd4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003bd8:	e018      	b.n	8003c0c <HAL_DMA_IRQHandler+0x10c>
 8003bda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003bde:	e015      	b.n	8003c0c <HAL_DMA_IRQHandler+0x10c>
 8003be0:	2340      	movs	r3, #64	@ 0x40
 8003be2:	e013      	b.n	8003c0c <HAL_DMA_IRQHandler+0x10c>
 8003be4:	2304      	movs	r3, #4
 8003be6:	e011      	b.n	8003c0c <HAL_DMA_IRQHandler+0x10c>
 8003be8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003bec:	e00e      	b.n	8003c0c <HAL_DMA_IRQHandler+0x10c>
 8003bee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003bf2:	e00b      	b.n	8003c0c <HAL_DMA_IRQHandler+0x10c>
 8003bf4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003bf8:	e008      	b.n	8003c0c <HAL_DMA_IRQHandler+0x10c>
 8003bfa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003bfe:	e005      	b.n	8003c0c <HAL_DMA_IRQHandler+0x10c>
 8003c00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c04:	e002      	b.n	8003c0c <HAL_DMA_IRQHandler+0x10c>
 8003c06:	2340      	movs	r3, #64	@ 0x40
 8003c08:	e000      	b.n	8003c0c <HAL_DMA_IRQHandler+0x10c>
 8003c0a:	2304      	movs	r3, #4
 8003c0c:	4a3d      	ldr	r2, [pc, #244]	@ (8003d04 <HAL_DMA_IRQHandler+0x204>)
 8003c0e:	6053      	str	r3, [r2, #4]
 8003c10:	e057      	b.n	8003cc2 <HAL_DMA_IRQHandler+0x1c2>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a31      	ldr	r2, [pc, #196]	@ (8003cdc <HAL_DMA_IRQHandler+0x1dc>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d04f      	beq.n	8003cbc <HAL_DMA_IRQHandler+0x1bc>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a2f      	ldr	r2, [pc, #188]	@ (8003ce0 <HAL_DMA_IRQHandler+0x1e0>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d048      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x1b8>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a2e      	ldr	r2, [pc, #184]	@ (8003ce4 <HAL_DMA_IRQHandler+0x1e4>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d040      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x1b2>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a2c      	ldr	r2, [pc, #176]	@ (8003ce8 <HAL_DMA_IRQHandler+0x1e8>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d038      	beq.n	8003cac <HAL_DMA_IRQHandler+0x1ac>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a2b      	ldr	r2, [pc, #172]	@ (8003cec <HAL_DMA_IRQHandler+0x1ec>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d030      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0x1a6>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a29      	ldr	r2, [pc, #164]	@ (8003cf0 <HAL_DMA_IRQHandler+0x1f0>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d028      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x1a0>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a21      	ldr	r2, [pc, #132]	@ (8003cd8 <HAL_DMA_IRQHandler+0x1d8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d020      	beq.n	8003c9a <HAL_DMA_IRQHandler+0x19a>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a25      	ldr	r2, [pc, #148]	@ (8003cf4 <HAL_DMA_IRQHandler+0x1f4>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d019      	beq.n	8003c96 <HAL_DMA_IRQHandler+0x196>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a24      	ldr	r2, [pc, #144]	@ (8003cf8 <HAL_DMA_IRQHandler+0x1f8>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d012      	beq.n	8003c92 <HAL_DMA_IRQHandler+0x192>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a22      	ldr	r2, [pc, #136]	@ (8003cfc <HAL_DMA_IRQHandler+0x1fc>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d00a      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x18c>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a21      	ldr	r2, [pc, #132]	@ (8003d00 <HAL_DMA_IRQHandler+0x200>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d102      	bne.n	8003c86 <HAL_DMA_IRQHandler+0x186>
 8003c80:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003c84:	e01b      	b.n	8003cbe <HAL_DMA_IRQHandler+0x1be>
 8003c86:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003c8a:	e018      	b.n	8003cbe <HAL_DMA_IRQHandler+0x1be>
 8003c8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c90:	e015      	b.n	8003cbe <HAL_DMA_IRQHandler+0x1be>
 8003c92:	2340      	movs	r3, #64	@ 0x40
 8003c94:	e013      	b.n	8003cbe <HAL_DMA_IRQHandler+0x1be>
 8003c96:	2304      	movs	r3, #4
 8003c98:	e011      	b.n	8003cbe <HAL_DMA_IRQHandler+0x1be>
 8003c9a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003c9e:	e00e      	b.n	8003cbe <HAL_DMA_IRQHandler+0x1be>
 8003ca0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003ca4:	e00b      	b.n	8003cbe <HAL_DMA_IRQHandler+0x1be>
 8003ca6:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003caa:	e008      	b.n	8003cbe <HAL_DMA_IRQHandler+0x1be>
 8003cac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003cb0:	e005      	b.n	8003cbe <HAL_DMA_IRQHandler+0x1be>
 8003cb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003cb6:	e002      	b.n	8003cbe <HAL_DMA_IRQHandler+0x1be>
 8003cb8:	2340      	movs	r3, #64	@ 0x40
 8003cba:	e000      	b.n	8003cbe <HAL_DMA_IRQHandler+0x1be>
 8003cbc:	2304      	movs	r3, #4
 8003cbe:	4a12      	ldr	r2, [pc, #72]	@ (8003d08 <HAL_DMA_IRQHandler+0x208>)
 8003cc0:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f000 8136 	beq.w	8003f38 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003cd4:	e130      	b.n	8003f38 <HAL_DMA_IRQHandler+0x438>
 8003cd6:	bf00      	nop
 8003cd8:	40020080 	.word	0x40020080
 8003cdc:	40020008 	.word	0x40020008
 8003ce0:	4002001c 	.word	0x4002001c
 8003ce4:	40020030 	.word	0x40020030
 8003ce8:	40020044 	.word	0x40020044
 8003cec:	40020058 	.word	0x40020058
 8003cf0:	4002006c 	.word	0x4002006c
 8003cf4:	40020408 	.word	0x40020408
 8003cf8:	4002041c 	.word	0x4002041c
 8003cfc:	40020430 	.word	0x40020430
 8003d00:	40020444 	.word	0x40020444
 8003d04:	40020400 	.word	0x40020400
 8003d08:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d10:	2202      	movs	r2, #2
 8003d12:	409a      	lsls	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4013      	ands	r3, r2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 80dd 	beq.w	8003ed8 <HAL_DMA_IRQHandler+0x3d8>
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 80d7 	beq.w	8003ed8 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0320 	and.w	r3, r3, #32
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10b      	bne.n	8003d50 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 020a 	bic.w	r2, r2, #10
 8003d46:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	461a      	mov	r2, r3
 8003d56:	4b7b      	ldr	r3, [pc, #492]	@ (8003f44 <HAL_DMA_IRQHandler+0x444>)
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d958      	bls.n	8003e0e <HAL_DMA_IRQHandler+0x30e>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a79      	ldr	r2, [pc, #484]	@ (8003f48 <HAL_DMA_IRQHandler+0x448>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d04f      	beq.n	8003e06 <HAL_DMA_IRQHandler+0x306>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a78      	ldr	r2, [pc, #480]	@ (8003f4c <HAL_DMA_IRQHandler+0x44c>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d048      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x302>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a76      	ldr	r2, [pc, #472]	@ (8003f50 <HAL_DMA_IRQHandler+0x450>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d040      	beq.n	8003dfc <HAL_DMA_IRQHandler+0x2fc>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a75      	ldr	r2, [pc, #468]	@ (8003f54 <HAL_DMA_IRQHandler+0x454>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d038      	beq.n	8003df6 <HAL_DMA_IRQHandler+0x2f6>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a73      	ldr	r2, [pc, #460]	@ (8003f58 <HAL_DMA_IRQHandler+0x458>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d030      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x2f0>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a72      	ldr	r2, [pc, #456]	@ (8003f5c <HAL_DMA_IRQHandler+0x45c>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d028      	beq.n	8003dea <HAL_DMA_IRQHandler+0x2ea>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a69      	ldr	r2, [pc, #420]	@ (8003f44 <HAL_DMA_IRQHandler+0x444>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d020      	beq.n	8003de4 <HAL_DMA_IRQHandler+0x2e4>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a6e      	ldr	r2, [pc, #440]	@ (8003f60 <HAL_DMA_IRQHandler+0x460>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d019      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x2e0>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a6c      	ldr	r2, [pc, #432]	@ (8003f64 <HAL_DMA_IRQHandler+0x464>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d012      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x2dc>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a6b      	ldr	r2, [pc, #428]	@ (8003f68 <HAL_DMA_IRQHandler+0x468>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d00a      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0x2d6>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a69      	ldr	r2, [pc, #420]	@ (8003f6c <HAL_DMA_IRQHandler+0x46c>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d102      	bne.n	8003dd0 <HAL_DMA_IRQHandler+0x2d0>
 8003dca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003dce:	e01b      	b.n	8003e08 <HAL_DMA_IRQHandler+0x308>
 8003dd0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003dd4:	e018      	b.n	8003e08 <HAL_DMA_IRQHandler+0x308>
 8003dd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003dda:	e015      	b.n	8003e08 <HAL_DMA_IRQHandler+0x308>
 8003ddc:	2320      	movs	r3, #32
 8003dde:	e013      	b.n	8003e08 <HAL_DMA_IRQHandler+0x308>
 8003de0:	2302      	movs	r3, #2
 8003de2:	e011      	b.n	8003e08 <HAL_DMA_IRQHandler+0x308>
 8003de4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003de8:	e00e      	b.n	8003e08 <HAL_DMA_IRQHandler+0x308>
 8003dea:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003dee:	e00b      	b.n	8003e08 <HAL_DMA_IRQHandler+0x308>
 8003df0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003df4:	e008      	b.n	8003e08 <HAL_DMA_IRQHandler+0x308>
 8003df6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003dfa:	e005      	b.n	8003e08 <HAL_DMA_IRQHandler+0x308>
 8003dfc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e00:	e002      	b.n	8003e08 <HAL_DMA_IRQHandler+0x308>
 8003e02:	2320      	movs	r3, #32
 8003e04:	e000      	b.n	8003e08 <HAL_DMA_IRQHandler+0x308>
 8003e06:	2302      	movs	r3, #2
 8003e08:	4a59      	ldr	r2, [pc, #356]	@ (8003f70 <HAL_DMA_IRQHandler+0x470>)
 8003e0a:	6053      	str	r3, [r2, #4]
 8003e0c:	e057      	b.n	8003ebe <HAL_DMA_IRQHandler+0x3be>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a4d      	ldr	r2, [pc, #308]	@ (8003f48 <HAL_DMA_IRQHandler+0x448>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d04f      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x3b8>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a4b      	ldr	r2, [pc, #300]	@ (8003f4c <HAL_DMA_IRQHandler+0x44c>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d048      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x3b4>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a4a      	ldr	r2, [pc, #296]	@ (8003f50 <HAL_DMA_IRQHandler+0x450>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d040      	beq.n	8003eae <HAL_DMA_IRQHandler+0x3ae>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a48      	ldr	r2, [pc, #288]	@ (8003f54 <HAL_DMA_IRQHandler+0x454>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d038      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x3a8>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a47      	ldr	r2, [pc, #284]	@ (8003f58 <HAL_DMA_IRQHandler+0x458>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d030      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0x3a2>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a45      	ldr	r2, [pc, #276]	@ (8003f5c <HAL_DMA_IRQHandler+0x45c>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d028      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x39c>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a3d      	ldr	r2, [pc, #244]	@ (8003f44 <HAL_DMA_IRQHandler+0x444>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d020      	beq.n	8003e96 <HAL_DMA_IRQHandler+0x396>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a41      	ldr	r2, [pc, #260]	@ (8003f60 <HAL_DMA_IRQHandler+0x460>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d019      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x392>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a40      	ldr	r2, [pc, #256]	@ (8003f64 <HAL_DMA_IRQHandler+0x464>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d012      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x38e>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a3e      	ldr	r2, [pc, #248]	@ (8003f68 <HAL_DMA_IRQHandler+0x468>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d00a      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x388>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a3d      	ldr	r2, [pc, #244]	@ (8003f6c <HAL_DMA_IRQHandler+0x46c>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d102      	bne.n	8003e82 <HAL_DMA_IRQHandler+0x382>
 8003e7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003e80:	e01b      	b.n	8003eba <HAL_DMA_IRQHandler+0x3ba>
 8003e82:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e86:	e018      	b.n	8003eba <HAL_DMA_IRQHandler+0x3ba>
 8003e88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e8c:	e015      	b.n	8003eba <HAL_DMA_IRQHandler+0x3ba>
 8003e8e:	2320      	movs	r3, #32
 8003e90:	e013      	b.n	8003eba <HAL_DMA_IRQHandler+0x3ba>
 8003e92:	2302      	movs	r3, #2
 8003e94:	e011      	b.n	8003eba <HAL_DMA_IRQHandler+0x3ba>
 8003e96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e9a:	e00e      	b.n	8003eba <HAL_DMA_IRQHandler+0x3ba>
 8003e9c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003ea0:	e00b      	b.n	8003eba <HAL_DMA_IRQHandler+0x3ba>
 8003ea2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ea6:	e008      	b.n	8003eba <HAL_DMA_IRQHandler+0x3ba>
 8003ea8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003eac:	e005      	b.n	8003eba <HAL_DMA_IRQHandler+0x3ba>
 8003eae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003eb2:	e002      	b.n	8003eba <HAL_DMA_IRQHandler+0x3ba>
 8003eb4:	2320      	movs	r3, #32
 8003eb6:	e000      	b.n	8003eba <HAL_DMA_IRQHandler+0x3ba>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	4a2e      	ldr	r2, [pc, #184]	@ (8003f74 <HAL_DMA_IRQHandler+0x474>)
 8003ebc:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d034      	beq.n	8003f38 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003ed6:	e02f      	b.n	8003f38 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003edc:	2208      	movs	r2, #8
 8003ede:	409a      	lsls	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d028      	beq.n	8003f3a <HAL_DMA_IRQHandler+0x43a>
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	f003 0308 	and.w	r3, r3, #8
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d023      	beq.n	8003f3a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 020e 	bic.w	r2, r2, #14
 8003f00:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f10:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d004      	beq.n	8003f3a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	4798      	blx	r3
    }
  }
  return;
 8003f38:	bf00      	nop
 8003f3a:	bf00      	nop
}
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	40020080 	.word	0x40020080
 8003f48:	40020008 	.word	0x40020008
 8003f4c:	4002001c 	.word	0x4002001c
 8003f50:	40020030 	.word	0x40020030
 8003f54:	40020044 	.word	0x40020044
 8003f58:	40020058 	.word	0x40020058
 8003f5c:	4002006c 	.word	0x4002006c
 8003f60:	40020408 	.word	0x40020408
 8003f64:	4002041c 	.word	0x4002041c
 8003f68:	40020430 	.word	0x40020430
 8003f6c:	40020444 	.word	0x40020444
 8003f70:	40020400 	.word	0x40020400
 8003f74:	40020000 	.word	0x40020000

08003f78 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003f86:	b2db      	uxtb	r3, r3
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bc80      	pop	{r7}
 8003f90:	4770      	bx	lr
	...

08003f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b08b      	sub	sp, #44	@ 0x2c
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fa6:	e179      	b.n	800429c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003fa8:	2201      	movs	r2, #1
 8003faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fac:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	69fa      	ldr	r2, [r7, #28]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	f040 8168 	bne.w	8004296 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	4a96      	ldr	r2, [pc, #600]	@ (8004224 <HAL_GPIO_Init+0x290>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d05e      	beq.n	800408e <HAL_GPIO_Init+0xfa>
 8003fd0:	4a94      	ldr	r2, [pc, #592]	@ (8004224 <HAL_GPIO_Init+0x290>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d875      	bhi.n	80040c2 <HAL_GPIO_Init+0x12e>
 8003fd6:	4a94      	ldr	r2, [pc, #592]	@ (8004228 <HAL_GPIO_Init+0x294>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d058      	beq.n	800408e <HAL_GPIO_Init+0xfa>
 8003fdc:	4a92      	ldr	r2, [pc, #584]	@ (8004228 <HAL_GPIO_Init+0x294>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d86f      	bhi.n	80040c2 <HAL_GPIO_Init+0x12e>
 8003fe2:	4a92      	ldr	r2, [pc, #584]	@ (800422c <HAL_GPIO_Init+0x298>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d052      	beq.n	800408e <HAL_GPIO_Init+0xfa>
 8003fe8:	4a90      	ldr	r2, [pc, #576]	@ (800422c <HAL_GPIO_Init+0x298>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d869      	bhi.n	80040c2 <HAL_GPIO_Init+0x12e>
 8003fee:	4a90      	ldr	r2, [pc, #576]	@ (8004230 <HAL_GPIO_Init+0x29c>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d04c      	beq.n	800408e <HAL_GPIO_Init+0xfa>
 8003ff4:	4a8e      	ldr	r2, [pc, #568]	@ (8004230 <HAL_GPIO_Init+0x29c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d863      	bhi.n	80040c2 <HAL_GPIO_Init+0x12e>
 8003ffa:	4a8e      	ldr	r2, [pc, #568]	@ (8004234 <HAL_GPIO_Init+0x2a0>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d046      	beq.n	800408e <HAL_GPIO_Init+0xfa>
 8004000:	4a8c      	ldr	r2, [pc, #560]	@ (8004234 <HAL_GPIO_Init+0x2a0>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d85d      	bhi.n	80040c2 <HAL_GPIO_Init+0x12e>
 8004006:	2b12      	cmp	r3, #18
 8004008:	d82a      	bhi.n	8004060 <HAL_GPIO_Init+0xcc>
 800400a:	2b12      	cmp	r3, #18
 800400c:	d859      	bhi.n	80040c2 <HAL_GPIO_Init+0x12e>
 800400e:	a201      	add	r2, pc, #4	@ (adr r2, 8004014 <HAL_GPIO_Init+0x80>)
 8004010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004014:	0800408f 	.word	0x0800408f
 8004018:	08004069 	.word	0x08004069
 800401c:	0800407b 	.word	0x0800407b
 8004020:	080040bd 	.word	0x080040bd
 8004024:	080040c3 	.word	0x080040c3
 8004028:	080040c3 	.word	0x080040c3
 800402c:	080040c3 	.word	0x080040c3
 8004030:	080040c3 	.word	0x080040c3
 8004034:	080040c3 	.word	0x080040c3
 8004038:	080040c3 	.word	0x080040c3
 800403c:	080040c3 	.word	0x080040c3
 8004040:	080040c3 	.word	0x080040c3
 8004044:	080040c3 	.word	0x080040c3
 8004048:	080040c3 	.word	0x080040c3
 800404c:	080040c3 	.word	0x080040c3
 8004050:	080040c3 	.word	0x080040c3
 8004054:	080040c3 	.word	0x080040c3
 8004058:	08004071 	.word	0x08004071
 800405c:	08004085 	.word	0x08004085
 8004060:	4a75      	ldr	r2, [pc, #468]	@ (8004238 <HAL_GPIO_Init+0x2a4>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d013      	beq.n	800408e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004066:	e02c      	b.n	80040c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	623b      	str	r3, [r7, #32]
          break;
 800406e:	e029      	b.n	80040c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	3304      	adds	r3, #4
 8004076:	623b      	str	r3, [r7, #32]
          break;
 8004078:	e024      	b.n	80040c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	3308      	adds	r3, #8
 8004080:	623b      	str	r3, [r7, #32]
          break;
 8004082:	e01f      	b.n	80040c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	330c      	adds	r3, #12
 800408a:	623b      	str	r3, [r7, #32]
          break;
 800408c:	e01a      	b.n	80040c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d102      	bne.n	800409c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004096:	2304      	movs	r3, #4
 8004098:	623b      	str	r3, [r7, #32]
          break;
 800409a:	e013      	b.n	80040c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d105      	bne.n	80040b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80040a4:	2308      	movs	r3, #8
 80040a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	69fa      	ldr	r2, [r7, #28]
 80040ac:	611a      	str	r2, [r3, #16]
          break;
 80040ae:	e009      	b.n	80040c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80040b0:	2308      	movs	r3, #8
 80040b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	69fa      	ldr	r2, [r7, #28]
 80040b8:	615a      	str	r2, [r3, #20]
          break;
 80040ba:	e003      	b.n	80040c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80040bc:	2300      	movs	r3, #0
 80040be:	623b      	str	r3, [r7, #32]
          break;
 80040c0:	e000      	b.n	80040c4 <HAL_GPIO_Init+0x130>
          break;
 80040c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	2bff      	cmp	r3, #255	@ 0xff
 80040c8:	d801      	bhi.n	80040ce <HAL_GPIO_Init+0x13a>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	e001      	b.n	80040d2 <HAL_GPIO_Init+0x13e>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	3304      	adds	r3, #4
 80040d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	2bff      	cmp	r3, #255	@ 0xff
 80040d8:	d802      	bhi.n	80040e0 <HAL_GPIO_Init+0x14c>
 80040da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	e002      	b.n	80040e6 <HAL_GPIO_Init+0x152>
 80040e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e2:	3b08      	subs	r3, #8
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	210f      	movs	r1, #15
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	fa01 f303 	lsl.w	r3, r1, r3
 80040f4:	43db      	mvns	r3, r3
 80040f6:	401a      	ands	r2, r3
 80040f8:	6a39      	ldr	r1, [r7, #32]
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004100:	431a      	orrs	r2, r3
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800410e:	2b00      	cmp	r3, #0
 8004110:	f000 80c1 	beq.w	8004296 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004114:	4b49      	ldr	r3, [pc, #292]	@ (800423c <HAL_GPIO_Init+0x2a8>)
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	4a48      	ldr	r2, [pc, #288]	@ (800423c <HAL_GPIO_Init+0x2a8>)
 800411a:	f043 0301 	orr.w	r3, r3, #1
 800411e:	6193      	str	r3, [r2, #24]
 8004120:	4b46      	ldr	r3, [pc, #280]	@ (800423c <HAL_GPIO_Init+0x2a8>)
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	60bb      	str	r3, [r7, #8]
 800412a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800412c:	4a44      	ldr	r2, [pc, #272]	@ (8004240 <HAL_GPIO_Init+0x2ac>)
 800412e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004130:	089b      	lsrs	r3, r3, #2
 8004132:	3302      	adds	r3, #2
 8004134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004138:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800413a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413c:	f003 0303 	and.w	r3, r3, #3
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	220f      	movs	r2, #15
 8004144:	fa02 f303 	lsl.w	r3, r2, r3
 8004148:	43db      	mvns	r3, r3
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	4013      	ands	r3, r2
 800414e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a3c      	ldr	r2, [pc, #240]	@ (8004244 <HAL_GPIO_Init+0x2b0>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d01f      	beq.n	8004198 <HAL_GPIO_Init+0x204>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a3b      	ldr	r2, [pc, #236]	@ (8004248 <HAL_GPIO_Init+0x2b4>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d019      	beq.n	8004194 <HAL_GPIO_Init+0x200>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a3a      	ldr	r2, [pc, #232]	@ (800424c <HAL_GPIO_Init+0x2b8>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d013      	beq.n	8004190 <HAL_GPIO_Init+0x1fc>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a39      	ldr	r2, [pc, #228]	@ (8004250 <HAL_GPIO_Init+0x2bc>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d00d      	beq.n	800418c <HAL_GPIO_Init+0x1f8>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a38      	ldr	r2, [pc, #224]	@ (8004254 <HAL_GPIO_Init+0x2c0>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d007      	beq.n	8004188 <HAL_GPIO_Init+0x1f4>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a37      	ldr	r2, [pc, #220]	@ (8004258 <HAL_GPIO_Init+0x2c4>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d101      	bne.n	8004184 <HAL_GPIO_Init+0x1f0>
 8004180:	2305      	movs	r3, #5
 8004182:	e00a      	b.n	800419a <HAL_GPIO_Init+0x206>
 8004184:	2306      	movs	r3, #6
 8004186:	e008      	b.n	800419a <HAL_GPIO_Init+0x206>
 8004188:	2304      	movs	r3, #4
 800418a:	e006      	b.n	800419a <HAL_GPIO_Init+0x206>
 800418c:	2303      	movs	r3, #3
 800418e:	e004      	b.n	800419a <HAL_GPIO_Init+0x206>
 8004190:	2302      	movs	r3, #2
 8004192:	e002      	b.n	800419a <HAL_GPIO_Init+0x206>
 8004194:	2301      	movs	r3, #1
 8004196:	e000      	b.n	800419a <HAL_GPIO_Init+0x206>
 8004198:	2300      	movs	r3, #0
 800419a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800419c:	f002 0203 	and.w	r2, r2, #3
 80041a0:	0092      	lsls	r2, r2, #2
 80041a2:	4093      	lsls	r3, r2
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80041aa:	4925      	ldr	r1, [pc, #148]	@ (8004240 <HAL_GPIO_Init+0x2ac>)
 80041ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ae:	089b      	lsrs	r3, r3, #2
 80041b0:	3302      	adds	r3, #2
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d006      	beq.n	80041d2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80041c4:	4b25      	ldr	r3, [pc, #148]	@ (800425c <HAL_GPIO_Init+0x2c8>)
 80041c6:	689a      	ldr	r2, [r3, #8]
 80041c8:	4924      	ldr	r1, [pc, #144]	@ (800425c <HAL_GPIO_Init+0x2c8>)
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	608b      	str	r3, [r1, #8]
 80041d0:	e006      	b.n	80041e0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80041d2:	4b22      	ldr	r3, [pc, #136]	@ (800425c <HAL_GPIO_Init+0x2c8>)
 80041d4:	689a      	ldr	r2, [r3, #8]
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	43db      	mvns	r3, r3
 80041da:	4920      	ldr	r1, [pc, #128]	@ (800425c <HAL_GPIO_Init+0x2c8>)
 80041dc:	4013      	ands	r3, r2
 80041de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d006      	beq.n	80041fa <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80041ec:	4b1b      	ldr	r3, [pc, #108]	@ (800425c <HAL_GPIO_Init+0x2c8>)
 80041ee:	68da      	ldr	r2, [r3, #12]
 80041f0:	491a      	ldr	r1, [pc, #104]	@ (800425c <HAL_GPIO_Init+0x2c8>)
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	60cb      	str	r3, [r1, #12]
 80041f8:	e006      	b.n	8004208 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80041fa:	4b18      	ldr	r3, [pc, #96]	@ (800425c <HAL_GPIO_Init+0x2c8>)
 80041fc:	68da      	ldr	r2, [r3, #12]
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	43db      	mvns	r3, r3
 8004202:	4916      	ldr	r1, [pc, #88]	@ (800425c <HAL_GPIO_Init+0x2c8>)
 8004204:	4013      	ands	r3, r2
 8004206:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d025      	beq.n	8004260 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004214:	4b11      	ldr	r3, [pc, #68]	@ (800425c <HAL_GPIO_Init+0x2c8>)
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	4910      	ldr	r1, [pc, #64]	@ (800425c <HAL_GPIO_Init+0x2c8>)
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	4313      	orrs	r3, r2
 800421e:	604b      	str	r3, [r1, #4]
 8004220:	e025      	b.n	800426e <HAL_GPIO_Init+0x2da>
 8004222:	bf00      	nop
 8004224:	10320000 	.word	0x10320000
 8004228:	10310000 	.word	0x10310000
 800422c:	10220000 	.word	0x10220000
 8004230:	10210000 	.word	0x10210000
 8004234:	10120000 	.word	0x10120000
 8004238:	10110000 	.word	0x10110000
 800423c:	40021000 	.word	0x40021000
 8004240:	40010000 	.word	0x40010000
 8004244:	40010800 	.word	0x40010800
 8004248:	40010c00 	.word	0x40010c00
 800424c:	40011000 	.word	0x40011000
 8004250:	40011400 	.word	0x40011400
 8004254:	40011800 	.word	0x40011800
 8004258:	40011c00 	.word	0x40011c00
 800425c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004260:	4b15      	ldr	r3, [pc, #84]	@ (80042b8 <HAL_GPIO_Init+0x324>)
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	43db      	mvns	r3, r3
 8004268:	4913      	ldr	r1, [pc, #76]	@ (80042b8 <HAL_GPIO_Init+0x324>)
 800426a:	4013      	ands	r3, r2
 800426c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d006      	beq.n	8004288 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800427a:	4b0f      	ldr	r3, [pc, #60]	@ (80042b8 <HAL_GPIO_Init+0x324>)
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	490e      	ldr	r1, [pc, #56]	@ (80042b8 <HAL_GPIO_Init+0x324>)
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	4313      	orrs	r3, r2
 8004284:	600b      	str	r3, [r1, #0]
 8004286:	e006      	b.n	8004296 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004288:	4b0b      	ldr	r3, [pc, #44]	@ (80042b8 <HAL_GPIO_Init+0x324>)
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	43db      	mvns	r3, r3
 8004290:	4909      	ldr	r1, [pc, #36]	@ (80042b8 <HAL_GPIO_Init+0x324>)
 8004292:	4013      	ands	r3, r2
 8004294:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004298:	3301      	adds	r3, #1
 800429a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a2:	fa22 f303 	lsr.w	r3, r2, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f47f ae7e 	bne.w	8003fa8 <HAL_GPIO_Init+0x14>
  }
}
 80042ac:	bf00      	nop
 80042ae:	bf00      	nop
 80042b0:	372c      	adds	r7, #44	@ 0x2c
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bc80      	pop	{r7}
 80042b6:	4770      	bx	lr
 80042b8:	40010400 	.word	0x40010400

080042bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	460b      	mov	r3, r1
 80042c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	887b      	ldrh	r3, [r7, #2]
 80042ce:	4013      	ands	r3, r2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d002      	beq.n	80042da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80042d4:	2301      	movs	r3, #1
 80042d6:	73fb      	strb	r3, [r7, #15]
 80042d8:	e001      	b.n	80042de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80042da:	2300      	movs	r3, #0
 80042dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80042de:	7bfb      	ldrb	r3, [r7, #15]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3714      	adds	r7, #20
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bc80      	pop	{r7}
 80042e8:	4770      	bx	lr

080042ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042ea:	b480      	push	{r7}
 80042ec:	b083      	sub	sp, #12
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
 80042f2:	460b      	mov	r3, r1
 80042f4:	807b      	strh	r3, [r7, #2]
 80042f6:	4613      	mov	r3, r2
 80042f8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042fa:	787b      	ldrb	r3, [r7, #1]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d003      	beq.n	8004308 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004300:	887a      	ldrh	r2, [r7, #2]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004306:	e003      	b.n	8004310 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004308:	887b      	ldrh	r3, [r7, #2]
 800430a:	041a      	lsls	r2, r3, #16
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	611a      	str	r2, [r3, #16]
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	bc80      	pop	{r7}
 8004318:	4770      	bx	lr

0800431a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800431a:	b480      	push	{r7}
 800431c:	b085      	sub	sp, #20
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
 8004322:	460b      	mov	r3, r1
 8004324:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800432c:	887a      	ldrh	r2, [r7, #2]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	4013      	ands	r3, r2
 8004332:	041a      	lsls	r2, r3, #16
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	43d9      	mvns	r1, r3
 8004338:	887b      	ldrh	r3, [r7, #2]
 800433a:	400b      	ands	r3, r1
 800433c:	431a      	orrs	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	611a      	str	r2, [r3, #16]
}
 8004342:	bf00      	nop
 8004344:	3714      	adds	r7, #20
 8004346:	46bd      	mov	sp, r7
 8004348:	bc80      	pop	{r7}
 800434a:	4770      	bx	lr

0800434c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e12b      	b.n	80045b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d106      	bne.n	8004378 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7fe f8ae 	bl	80024d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2224      	movs	r2, #36	@ 0x24
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 0201 	bic.w	r2, r2, #1
 800438e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800439e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80043ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80043b0:	f002 fa68 	bl	8006884 <HAL_RCC_GetPCLK1Freq>
 80043b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	4a81      	ldr	r2, [pc, #516]	@ (80045c0 <HAL_I2C_Init+0x274>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d807      	bhi.n	80043d0 <HAL_I2C_Init+0x84>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	4a80      	ldr	r2, [pc, #512]	@ (80045c4 <HAL_I2C_Init+0x278>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	bf94      	ite	ls
 80043c8:	2301      	movls	r3, #1
 80043ca:	2300      	movhi	r3, #0
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	e006      	b.n	80043de <HAL_I2C_Init+0x92>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4a7d      	ldr	r2, [pc, #500]	@ (80045c8 <HAL_I2C_Init+0x27c>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	bf94      	ite	ls
 80043d8:	2301      	movls	r3, #1
 80043da:	2300      	movhi	r3, #0
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e0e7      	b.n	80045b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	4a78      	ldr	r2, [pc, #480]	@ (80045cc <HAL_I2C_Init+0x280>)
 80043ea:	fba2 2303 	umull	r2, r3, r2, r3
 80043ee:	0c9b      	lsrs	r3, r3, #18
 80043f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	430a      	orrs	r2, r1
 8004404:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	4a6a      	ldr	r2, [pc, #424]	@ (80045c0 <HAL_I2C_Init+0x274>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d802      	bhi.n	8004420 <HAL_I2C_Init+0xd4>
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	3301      	adds	r3, #1
 800441e:	e009      	b.n	8004434 <HAL_I2C_Init+0xe8>
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004426:	fb02 f303 	mul.w	r3, r2, r3
 800442a:	4a69      	ldr	r2, [pc, #420]	@ (80045d0 <HAL_I2C_Init+0x284>)
 800442c:	fba2 2303 	umull	r2, r3, r2, r3
 8004430:	099b      	lsrs	r3, r3, #6
 8004432:	3301      	adds	r3, #1
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	6812      	ldr	r2, [r2, #0]
 8004438:	430b      	orrs	r3, r1
 800443a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004446:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	495c      	ldr	r1, [pc, #368]	@ (80045c0 <HAL_I2C_Init+0x274>)
 8004450:	428b      	cmp	r3, r1
 8004452:	d819      	bhi.n	8004488 <HAL_I2C_Init+0x13c>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	1e59      	subs	r1, r3, #1
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004462:	1c59      	adds	r1, r3, #1
 8004464:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004468:	400b      	ands	r3, r1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00a      	beq.n	8004484 <HAL_I2C_Init+0x138>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	1e59      	subs	r1, r3, #1
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	fbb1 f3f3 	udiv	r3, r1, r3
 800447c:	3301      	adds	r3, #1
 800447e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004482:	e051      	b.n	8004528 <HAL_I2C_Init+0x1dc>
 8004484:	2304      	movs	r3, #4
 8004486:	e04f      	b.n	8004528 <HAL_I2C_Init+0x1dc>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d111      	bne.n	80044b4 <HAL_I2C_Init+0x168>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	1e58      	subs	r0, r3, #1
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6859      	ldr	r1, [r3, #4]
 8004498:	460b      	mov	r3, r1
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	440b      	add	r3, r1
 800449e:	fbb0 f3f3 	udiv	r3, r0, r3
 80044a2:	3301      	adds	r3, #1
 80044a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	bf0c      	ite	eq
 80044ac:	2301      	moveq	r3, #1
 80044ae:	2300      	movne	r3, #0
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	e012      	b.n	80044da <HAL_I2C_Init+0x18e>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	1e58      	subs	r0, r3, #1
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6859      	ldr	r1, [r3, #4]
 80044bc:	460b      	mov	r3, r1
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	440b      	add	r3, r1
 80044c2:	0099      	lsls	r1, r3, #2
 80044c4:	440b      	add	r3, r1
 80044c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80044ca:	3301      	adds	r3, #1
 80044cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	bf0c      	ite	eq
 80044d4:	2301      	moveq	r3, #1
 80044d6:	2300      	movne	r3, #0
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <HAL_I2C_Init+0x196>
 80044de:	2301      	movs	r3, #1
 80044e0:	e022      	b.n	8004528 <HAL_I2C_Init+0x1dc>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10e      	bne.n	8004508 <HAL_I2C_Init+0x1bc>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	1e58      	subs	r0, r3, #1
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6859      	ldr	r1, [r3, #4]
 80044f2:	460b      	mov	r3, r1
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	440b      	add	r3, r1
 80044f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80044fc:	3301      	adds	r3, #1
 80044fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004502:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004506:	e00f      	b.n	8004528 <HAL_I2C_Init+0x1dc>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	1e58      	subs	r0, r3, #1
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6859      	ldr	r1, [r3, #4]
 8004510:	460b      	mov	r3, r1
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	440b      	add	r3, r1
 8004516:	0099      	lsls	r1, r3, #2
 8004518:	440b      	add	r3, r1
 800451a:	fbb0 f3f3 	udiv	r3, r0, r3
 800451e:	3301      	adds	r3, #1
 8004520:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004524:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004528:	6879      	ldr	r1, [r7, #4]
 800452a:	6809      	ldr	r1, [r1, #0]
 800452c:	4313      	orrs	r3, r2
 800452e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	69da      	ldr	r2, [r3, #28]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	431a      	orrs	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004556:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	6911      	ldr	r1, [r2, #16]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	68d2      	ldr	r2, [r2, #12]
 8004562:	4311      	orrs	r1, r2
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	6812      	ldr	r2, [r2, #0]
 8004568:	430b      	orrs	r3, r1
 800456a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	695a      	ldr	r2, [r3, #20]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	431a      	orrs	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	430a      	orrs	r2, r1
 8004586:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f042 0201 	orr.w	r2, r2, #1
 8004596:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2220      	movs	r2, #32
 80045a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	000186a0 	.word	0x000186a0
 80045c4:	001e847f 	.word	0x001e847f
 80045c8:	003d08ff 	.word	0x003d08ff
 80045cc:	431bde83 	.word	0x431bde83
 80045d0:	10624dd3 	.word	0x10624dd3

080045d4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045e6:	2b80      	cmp	r3, #128	@ 0x80
 80045e8:	d103      	bne.n	80045f2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2200      	movs	r2, #0
 80045f0:	611a      	str	r2, [r3, #16]
  }
}
 80045f2:	bf00      	nop
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bc80      	pop	{r7}
 80045fa:	4770      	bx	lr

080045fc <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b087      	sub	sp, #28
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	603b      	str	r3, [r7, #0]
 8004608:	4613      	mov	r3, r2
 800460a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004612:	b2db      	uxtb	r3, r3
 8004614:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004618:	2b28      	cmp	r3, #40	@ 0x28
 800461a:	d15b      	bne.n	80046d4 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d002      	beq.n	8004628 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 8004622:	88fb      	ldrh	r3, [r7, #6]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d101      	bne.n	800462c <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e054      	b.n	80046d6 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004632:	2b01      	cmp	r3, #1
 8004634:	d101      	bne.n	800463a <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 8004636:	2302      	movs	r3, #2
 8004638:	e04d      	b.n	80046d6 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	2b01      	cmp	r3, #1
 800464e:	d007      	beq.n	8004660 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f042 0201 	orr.w	r2, r2, #1
 800465e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800466e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	222a      	movs	r2, #42	@ 0x2a
 8004674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2220      	movs	r2, #32
 800467c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	88fa      	ldrh	r2, [r7, #6]
 8004690:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004696:	b29a      	uxth	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	683a      	ldr	r2, [r7, #0]
 80046a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046a2:	2300      	movs	r3, #0
 80046a4:	617b      	str	r3, [r7, #20]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	695b      	ldr	r3, [r3, #20]
 80046ac:	617b      	str	r3, [r7, #20]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	617b      	str	r3, [r7, #20]
 80046b6:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685a      	ldr	r2, [r3, #4]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80046ce:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80046d0:	2300      	movs	r3, #0
 80046d2:	e000      	b.n	80046d6 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 80046d4:	2302      	movs	r3, #2
  }
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	371c      	adds	r7, #28
 80046da:	46bd      	mov	sp, r7
 80046dc:	bc80      	pop	{r7}
 80046de:	4770      	bx	lr

080046e0 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	2b20      	cmp	r3, #32
 80046f2:	d124      	bne.n	800473e <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2228      	movs	r2, #40	@ 0x28
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b01      	cmp	r3, #1
 8004708:	d007      	beq.n	800471a <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f042 0201 	orr.w	r2, r2, #1
 8004718:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004728:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004738:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800473a:	2300      	movs	r3, #0
 800473c:	e000      	b.n	8004740 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800473e:	2302      	movs	r3, #2
  }
}
 8004740:	4618      	mov	r0, r3
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	bc80      	pop	{r7}
 8004748:	4770      	bx	lr

0800474a <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b088      	sub	sp, #32
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004752:	2300      	movs	r3, #0
 8004754:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004762:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800476a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004772:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004774:	7bfb      	ldrb	r3, [r7, #15]
 8004776:	2b10      	cmp	r3, #16
 8004778:	d003      	beq.n	8004782 <HAL_I2C_EV_IRQHandler+0x38>
 800477a:	7bfb      	ldrb	r3, [r7, #15]
 800477c:	2b40      	cmp	r3, #64	@ 0x40
 800477e:	f040 80c1 	bne.w	8004904 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10d      	bne.n	80047b8 <HAL_I2C_EV_IRQHandler+0x6e>
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80047a2:	d003      	beq.n	80047ac <HAL_I2C_EV_IRQHandler+0x62>
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80047aa:	d101      	bne.n	80047b0 <HAL_I2C_EV_IRQHandler+0x66>
 80047ac:	2301      	movs	r3, #1
 80047ae:	e000      	b.n	80047b2 <HAL_I2C_EV_IRQHandler+0x68>
 80047b0:	2300      	movs	r3, #0
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	f000 8132 	beq.w	8004a1c <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00c      	beq.n	80047dc <HAL_I2C_EV_IRQHandler+0x92>
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	0a5b      	lsrs	r3, r3, #9
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d006      	beq.n	80047dc <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f001 fc74 	bl	80060bc <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 fd71 	bl	80052bc <I2C_Master_SB>
 80047da:	e092      	b.n	8004902 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	08db      	lsrs	r3, r3, #3
 80047e0:	f003 0301 	and.w	r3, r3, #1
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d009      	beq.n	80047fc <HAL_I2C_EV_IRQHandler+0xb2>
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	0a5b      	lsrs	r3, r3, #9
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d003      	beq.n	80047fc <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 fde6 	bl	80053c6 <I2C_Master_ADD10>
 80047fa:	e082      	b.n	8004902 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	085b      	lsrs	r3, r3, #1
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	2b00      	cmp	r3, #0
 8004806:	d009      	beq.n	800481c <HAL_I2C_EV_IRQHandler+0xd2>
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	0a5b      	lsrs	r3, r3, #9
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	2b00      	cmp	r3, #0
 8004812:	d003      	beq.n	800481c <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 fdff 	bl	8005418 <I2C_Master_ADDR>
 800481a:	e072      	b.n	8004902 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	089b      	lsrs	r3, r3, #2
 8004820:	f003 0301 	and.w	r3, r3, #1
 8004824:	2b00      	cmp	r3, #0
 8004826:	d03b      	beq.n	80048a0 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004832:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004836:	f000 80f3 	beq.w	8004a20 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	09db      	lsrs	r3, r3, #7
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00f      	beq.n	8004866 <HAL_I2C_EV_IRQHandler+0x11c>
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	0a9b      	lsrs	r3, r3, #10
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d009      	beq.n	8004866 <HAL_I2C_EV_IRQHandler+0x11c>
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	089b      	lsrs	r3, r3, #2
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d103      	bne.n	8004866 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f9c9 	bl	8004bf6 <I2C_MasterTransmit_TXE>
 8004864:	e04d      	b.n	8004902 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	089b      	lsrs	r3, r3, #2
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	f000 80d6 	beq.w	8004a20 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	0a5b      	lsrs	r3, r3, #9
 8004878:	f003 0301 	and.w	r3, r3, #1
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 80cf 	beq.w	8004a20 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004882:	7bbb      	ldrb	r3, [r7, #14]
 8004884:	2b21      	cmp	r3, #33	@ 0x21
 8004886:	d103      	bne.n	8004890 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 fa50 	bl	8004d2e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800488e:	e0c7      	b.n	8004a20 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004890:	7bfb      	ldrb	r3, [r7, #15]
 8004892:	2b40      	cmp	r3, #64	@ 0x40
 8004894:	f040 80c4 	bne.w	8004a20 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 fabe 	bl	8004e1a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800489e:	e0bf      	b.n	8004a20 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048ae:	f000 80b7 	beq.w	8004a20 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	099b      	lsrs	r3, r3, #6
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00f      	beq.n	80048de <HAL_I2C_EV_IRQHandler+0x194>
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	0a9b      	lsrs	r3, r3, #10
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d009      	beq.n	80048de <HAL_I2C_EV_IRQHandler+0x194>
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	089b      	lsrs	r3, r3, #2
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d103      	bne.n	80048de <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 fb37 	bl	8004f4a <I2C_MasterReceive_RXNE>
 80048dc:	e011      	b.n	8004902 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	089b      	lsrs	r3, r3, #2
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f000 809a 	beq.w	8004a20 <HAL_I2C_EV_IRQHandler+0x2d6>
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	0a5b      	lsrs	r3, r3, #9
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f000 8093 	beq.w	8004a20 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 fbed 	bl	80050da <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004900:	e08e      	b.n	8004a20 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004902:	e08d      	b.n	8004a20 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004908:	2b00      	cmp	r3, #0
 800490a:	d004      	beq.n	8004916 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	61fb      	str	r3, [r7, #28]
 8004914:	e007      	b.n	8004926 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	085b      	lsrs	r3, r3, #1
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d012      	beq.n	8004958 <HAL_I2C_EV_IRQHandler+0x20e>
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	0a5b      	lsrs	r3, r3, #9
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00c      	beq.n	8004958 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004942:	2b00      	cmp	r3, #0
 8004944:	d003      	beq.n	800494e <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800494e:	69b9      	ldr	r1, [r7, #24]
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 ffb8 	bl	80058c6 <I2C_Slave_ADDR>
 8004956:	e066      	b.n	8004a26 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	091b      	lsrs	r3, r3, #4
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	2b00      	cmp	r3, #0
 8004962:	d009      	beq.n	8004978 <HAL_I2C_EV_IRQHandler+0x22e>
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	0a5b      	lsrs	r3, r3, #9
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b00      	cmp	r3, #0
 800496e:	d003      	beq.n	8004978 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 fff3 	bl	800595c <I2C_Slave_STOPF>
 8004976:	e056      	b.n	8004a26 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004978:	7bbb      	ldrb	r3, [r7, #14]
 800497a:	2b21      	cmp	r3, #33	@ 0x21
 800497c:	d002      	beq.n	8004984 <HAL_I2C_EV_IRQHandler+0x23a>
 800497e:	7bbb      	ldrb	r3, [r7, #14]
 8004980:	2b29      	cmp	r3, #41	@ 0x29
 8004982:	d125      	bne.n	80049d0 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	09db      	lsrs	r3, r3, #7
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00f      	beq.n	80049b0 <HAL_I2C_EV_IRQHandler+0x266>
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	0a9b      	lsrs	r3, r3, #10
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	2b00      	cmp	r3, #0
 800499a:	d009      	beq.n	80049b0 <HAL_I2C_EV_IRQHandler+0x266>
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	089b      	lsrs	r3, r3, #2
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d103      	bne.n	80049b0 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 fed0 	bl	800574e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049ae:	e039      	b.n	8004a24 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	089b      	lsrs	r3, r3, #2
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d033      	beq.n	8004a24 <HAL_I2C_EV_IRQHandler+0x2da>
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	0a5b      	lsrs	r3, r3, #9
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d02d      	beq.n	8004a24 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 fefd 	bl	80057c8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049ce:	e029      	b.n	8004a24 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	099b      	lsrs	r3, r3, #6
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00f      	beq.n	80049fc <HAL_I2C_EV_IRQHandler+0x2b2>
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	0a9b      	lsrs	r3, r3, #10
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d009      	beq.n	80049fc <HAL_I2C_EV_IRQHandler+0x2b2>
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	089b      	lsrs	r3, r3, #2
 80049ec:	f003 0301 	and.w	r3, r3, #1
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d103      	bne.n	80049fc <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 ff07 	bl	8005808 <I2C_SlaveReceive_RXNE>
 80049fa:	e014      	b.n	8004a26 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	089b      	lsrs	r3, r3, #2
 8004a00:	f003 0301 	and.w	r3, r3, #1
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00e      	beq.n	8004a26 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	0a5b      	lsrs	r3, r3, #9
 8004a0c:	f003 0301 	and.w	r3, r3, #1
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d008      	beq.n	8004a26 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 ff35 	bl	8005884 <I2C_SlaveReceive_BTF>
 8004a1a:	e004      	b.n	8004a26 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004a1c:	bf00      	nop
 8004a1e:	e002      	b.n	8004a26 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a20:	bf00      	nop
 8004a22:	e000      	b.n	8004a26 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a24:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004a26:	3720      	adds	r7, #32
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b08a      	sub	sp, #40	@ 0x28
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004a44:	2300      	movs	r3, #0
 8004a46:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a4e:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a50:	6a3b      	ldr	r3, [r7, #32]
 8004a52:	0a1b      	lsrs	r3, r3, #8
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d016      	beq.n	8004a8a <HAL_I2C_ER_IRQHandler+0x5e>
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	0a1b      	lsrs	r3, r3, #8
 8004a60:	f003 0301 	and.w	r3, r3, #1
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d010      	beq.n	8004a8a <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6a:	f043 0301 	orr.w	r3, r3, #1
 8004a6e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004a78:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a88:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a8a:	6a3b      	ldr	r3, [r7, #32]
 8004a8c:	0a5b      	lsrs	r3, r3, #9
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00e      	beq.n	8004ab4 <HAL_I2C_ER_IRQHandler+0x88>
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	0a1b      	lsrs	r3, r3, #8
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d008      	beq.n	8004ab4 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa4:	f043 0302 	orr.w	r3, r3, #2
 8004aa8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8004ab2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004ab4:	6a3b      	ldr	r3, [r7, #32]
 8004ab6:	0a9b      	lsrs	r3, r3, #10
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d03f      	beq.n	8004b40 <HAL_I2C_ER_IRQHandler+0x114>
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	0a1b      	lsrs	r3, r3, #8
 8004ac4:	f003 0301 	and.w	r3, r3, #1
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d039      	beq.n	8004b40 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8004acc:	7efb      	ldrb	r3, [r7, #27]
 8004ace:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ade:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ae4:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004ae6:	7ebb      	ldrb	r3, [r7, #26]
 8004ae8:	2b20      	cmp	r3, #32
 8004aea:	d112      	bne.n	8004b12 <HAL_I2C_ER_IRQHandler+0xe6>
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10f      	bne.n	8004b12 <HAL_I2C_ER_IRQHandler+0xe6>
 8004af2:	7cfb      	ldrb	r3, [r7, #19]
 8004af4:	2b21      	cmp	r3, #33	@ 0x21
 8004af6:	d008      	beq.n	8004b0a <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004af8:	7cfb      	ldrb	r3, [r7, #19]
 8004afa:	2b29      	cmp	r3, #41	@ 0x29
 8004afc:	d005      	beq.n	8004b0a <HAL_I2C_ER_IRQHandler+0xde>
 8004afe:	7cfb      	ldrb	r3, [r7, #19]
 8004b00:	2b28      	cmp	r3, #40	@ 0x28
 8004b02:	d106      	bne.n	8004b12 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2b21      	cmp	r3, #33	@ 0x21
 8004b08:	d103      	bne.n	8004b12 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f001 f856 	bl	8005bbc <I2C_Slave_AF>
 8004b10:	e016      	b.n	8004b40 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b1a:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1e:	f043 0304 	orr.w	r3, r3, #4
 8004b22:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004b24:	7efb      	ldrb	r3, [r7, #27]
 8004b26:	2b10      	cmp	r3, #16
 8004b28:	d002      	beq.n	8004b30 <HAL_I2C_ER_IRQHandler+0x104>
 8004b2a:	7efb      	ldrb	r3, [r7, #27]
 8004b2c:	2b40      	cmp	r3, #64	@ 0x40
 8004b2e:	d107      	bne.n	8004b40 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b3e:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004b40:	6a3b      	ldr	r3, [r7, #32]
 8004b42:	0adb      	lsrs	r3, r3, #11
 8004b44:	f003 0301 	and.w	r3, r3, #1
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00e      	beq.n	8004b6a <HAL_I2C_ER_IRQHandler+0x13e>
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	0a1b      	lsrs	r3, r3, #8
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d008      	beq.n	8004b6a <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5a:	f043 0308 	orr.w	r3, r3, #8
 8004b5e:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8004b68:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d008      	beq.n	8004b82 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b76:	431a      	orrs	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f001 f891 	bl	8005ca4 <I2C_ITError>
  }
}
 8004b82:	bf00      	nop
 8004b84:	3728      	adds	r7, #40	@ 0x28
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	b083      	sub	sp, #12
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004b92:	bf00      	nop
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bc80      	pop	{r7}
 8004b9a:	4770      	bx	lr

08004b9c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bc80      	pop	{r7}
 8004bac:	4770      	bx	lr

08004bae <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b083      	sub	sp, #12
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bc80      	pop	{r7}
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bc80      	pop	{r7}
 8004bd0:	4770      	bx	lr

08004bd2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b083      	sub	sp, #12
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004bda:	bf00      	nop
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bc80      	pop	{r7}
 8004be2:	4770      	bx	lr

08004be4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bc80      	pop	{r7}
 8004bf4:	4770      	bx	lr

08004bf6 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b084      	sub	sp, #16
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c04:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c0c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c12:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d150      	bne.n	8004cbe <I2C_MasterTransmit_TXE+0xc8>
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
 8004c1e:	2b21      	cmp	r3, #33	@ 0x21
 8004c20:	d14d      	bne.n	8004cbe <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	2b08      	cmp	r3, #8
 8004c26:	d01d      	beq.n	8004c64 <I2C_MasterTransmit_TXE+0x6e>
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	2b20      	cmp	r3, #32
 8004c2c:	d01a      	beq.n	8004c64 <I2C_MasterTransmit_TXE+0x6e>
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004c34:	d016      	beq.n	8004c64 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	685a      	ldr	r2, [r3, #4]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004c44:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2211      	movs	r2, #17
 8004c4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2220      	movs	r2, #32
 8004c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f7ff ff94 	bl	8004b8a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c62:	e060      	b.n	8004d26 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004c72:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c82:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b40      	cmp	r3, #64	@ 0x40
 8004c9c:	d107      	bne.n	8004cae <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7ff ff8a 	bl	8004bc0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004cac:	e03b      	b.n	8004d26 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7ff ff67 	bl	8004b8a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004cbc:	e033      	b.n	8004d26 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004cbe:	7bfb      	ldrb	r3, [r7, #15]
 8004cc0:	2b21      	cmp	r3, #33	@ 0x21
 8004cc2:	d005      	beq.n	8004cd0 <I2C_MasterTransmit_TXE+0xda>
 8004cc4:	7bbb      	ldrb	r3, [r7, #14]
 8004cc6:	2b40      	cmp	r3, #64	@ 0x40
 8004cc8:	d12d      	bne.n	8004d26 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004cca:	7bfb      	ldrb	r3, [r7, #15]
 8004ccc:	2b22      	cmp	r3, #34	@ 0x22
 8004cce:	d12a      	bne.n	8004d26 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d108      	bne.n	8004cec <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	685a      	ldr	r2, [r3, #4]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ce8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004cea:	e01c      	b.n	8004d26 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	2b40      	cmp	r3, #64	@ 0x40
 8004cf6:	d103      	bne.n	8004d00 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 f88e 	bl	8004e1a <I2C_MemoryTransmit_TXE_BTF>
}
 8004cfe:	e012      	b.n	8004d26 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d04:	781a      	ldrb	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d10:	1c5a      	adds	r2, r3, #1
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004d24:	e7ff      	b.n	8004d26 <I2C_MasterTransmit_TXE+0x130>
 8004d26:	bf00      	nop
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b084      	sub	sp, #16
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d3a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b21      	cmp	r3, #33	@ 0x21
 8004d46:	d164      	bne.n	8004e12 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d012      	beq.n	8004d78 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d56:	781a      	ldrb	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d62:	1c5a      	adds	r2, r3, #1
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004d76:	e04c      	b.n	8004e12 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2b08      	cmp	r3, #8
 8004d7c:	d01d      	beq.n	8004dba <I2C_MasterTransmit_BTF+0x8c>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2b20      	cmp	r3, #32
 8004d82:	d01a      	beq.n	8004dba <I2C_MasterTransmit_BTF+0x8c>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004d8a:	d016      	beq.n	8004dba <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	685a      	ldr	r2, [r3, #4]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004d9a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2211      	movs	r2, #17
 8004da0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2220      	movs	r2, #32
 8004dae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7ff fee9 	bl	8004b8a <HAL_I2C_MasterTxCpltCallback>
}
 8004db8:	e02b      	b.n	8004e12 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004dc8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dd8:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2220      	movs	r2, #32
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	2b40      	cmp	r3, #64	@ 0x40
 8004df2:	d107      	bne.n	8004e04 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f7ff fedf 	bl	8004bc0 <HAL_I2C_MemTxCpltCallback>
}
 8004e02:	e006      	b.n	8004e12 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f7ff febc 	bl	8004b8a <HAL_I2C_MasterTxCpltCallback>
}
 8004e12:	bf00      	nop
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b084      	sub	sp, #16
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e28:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d11d      	bne.n	8004e6e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d10b      	bne.n	8004e52 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e3e:	b2da      	uxtb	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e4a:	1c9a      	adds	r2, r3, #2
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004e50:	e077      	b.n	8004f42 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	121b      	asrs	r3, r3, #8
 8004e5a:	b2da      	uxtb	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e66:	1c5a      	adds	r2, r3, #1
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004e6c:	e069      	b.n	8004f42 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d10b      	bne.n	8004e8e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e7a:	b2da      	uxtb	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e86:	1c5a      	adds	r2, r3, #1
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004e8c:	e059      	b.n	8004f42 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d152      	bne.n	8004f3c <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004e96:	7bfb      	ldrb	r3, [r7, #15]
 8004e98:	2b22      	cmp	r3, #34	@ 0x22
 8004e9a:	d10d      	bne.n	8004eb8 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004eaa:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eb0:	1c5a      	adds	r2, r3, #1
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004eb6:	e044      	b.n	8004f42 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d015      	beq.n	8004eee <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004ec2:	7bfb      	ldrb	r3, [r7, #15]
 8004ec4:	2b21      	cmp	r3, #33	@ 0x21
 8004ec6:	d112      	bne.n	8004eee <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ecc:	781a      	ldrb	r2, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed8:	1c5a      	adds	r2, r3, #1
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004eec:	e029      	b.n	8004f42 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d124      	bne.n	8004f42 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004ef8:	7bfb      	ldrb	r3, [r7, #15]
 8004efa:	2b21      	cmp	r3, #33	@ 0x21
 8004efc:	d121      	bne.n	8004f42 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004f0c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f1c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2220      	movs	r2, #32
 8004f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f7ff fe43 	bl	8004bc0 <HAL_I2C_MemTxCpltCallback>
}
 8004f3a:	e002      	b.n	8004f42 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7ff fb49 	bl	80045d4 <I2C_Flush_DR>
}
 8004f42:	bf00      	nop
 8004f44:	3710      	adds	r7, #16
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b084      	sub	sp, #16
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b22      	cmp	r3, #34	@ 0x22
 8004f5c:	f040 80b9 	bne.w	80050d2 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f64:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	2b03      	cmp	r3, #3
 8004f72:	d921      	bls.n	8004fb8 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	691a      	ldr	r2, [r3, #16]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7e:	b2d2      	uxtb	r2, r2
 8004f80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f86:	1c5a      	adds	r2, r3, #1
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	3b01      	subs	r3, #1
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	2b03      	cmp	r3, #3
 8004fa2:	f040 8096 	bne.w	80050d2 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fb4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004fb6:	e08c      	b.n	80050d2 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d07f      	beq.n	80050c0 <I2C_MasterReceive_RXNE+0x176>
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d002      	beq.n	8004fcc <I2C_MasterReceive_RXNE+0x82>
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d179      	bne.n	80050c0 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f001 f843 	bl	8006058 <I2C_WaitOnSTOPRequestThroughIT>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d14c      	bne.n	8005072 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fe6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	685a      	ldr	r2, [r3, #4]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004ff6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	691a      	ldr	r2, [r3, #16]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005002:	b2d2      	uxtb	r2, r2
 8005004:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800500a:	1c5a      	adds	r2, r3, #1
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005014:	b29b      	uxth	r3, r3
 8005016:	3b01      	subs	r3, #1
 8005018:	b29a      	uxth	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2220      	movs	r2, #32
 8005022:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b40      	cmp	r3, #64	@ 0x40
 8005030:	d10a      	bne.n	8005048 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f7ff fdc6 	bl	8004bd2 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005046:	e044      	b.n	80050d2 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2b08      	cmp	r3, #8
 8005054:	d002      	beq.n	800505c <I2C_MasterReceive_RXNE+0x112>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2b20      	cmp	r3, #32
 800505a:	d103      	bne.n	8005064 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	631a      	str	r2, [r3, #48]	@ 0x30
 8005062:	e002      	b.n	800506a <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2212      	movs	r2, #18
 8005068:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f7ff fd96 	bl	8004b9c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005070:	e02f      	b.n	80050d2 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	685a      	ldr	r2, [r3, #4]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005080:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	691a      	ldr	r2, [r3, #16]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800508c:	b2d2      	uxtb	r2, r2
 800508e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005094:	1c5a      	adds	r2, r3, #1
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800509e:	b29b      	uxth	r3, r3
 80050a0:	3b01      	subs	r3, #1
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2220      	movs	r2, #32
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f7fd f864 	bl	8002186 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80050be:	e008      	b.n	80050d2 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050ce:	605a      	str	r2, [r3, #4]
}
 80050d0:	e7ff      	b.n	80050d2 <I2C_MasterReceive_RXNE+0x188>
 80050d2:	bf00      	nop
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b084      	sub	sp, #16
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	2b04      	cmp	r3, #4
 80050f0:	d11b      	bne.n	800512a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005100:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	691a      	ldr	r2, [r3, #16]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800510c:	b2d2      	uxtb	r2, r2
 800510e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005114:	1c5a      	adds	r2, r3, #1
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800511e:	b29b      	uxth	r3, r3
 8005120:	3b01      	subs	r3, #1
 8005122:	b29a      	uxth	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005128:	e0c4      	b.n	80052b4 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800512e:	b29b      	uxth	r3, r3
 8005130:	2b03      	cmp	r3, #3
 8005132:	d129      	bne.n	8005188 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	685a      	ldr	r2, [r3, #4]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005142:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2b04      	cmp	r3, #4
 8005148:	d00a      	beq.n	8005160 <I2C_MasterReceive_BTF+0x86>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2b02      	cmp	r3, #2
 800514e:	d007      	beq.n	8005160 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800515e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	691a      	ldr	r2, [r3, #16]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800516a:	b2d2      	uxtb	r2, r2
 800516c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005172:	1c5a      	adds	r2, r3, #1
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800517c:	b29b      	uxth	r3, r3
 800517e:	3b01      	subs	r3, #1
 8005180:	b29a      	uxth	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005186:	e095      	b.n	80052b4 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800518c:	b29b      	uxth	r3, r3
 800518e:	2b02      	cmp	r3, #2
 8005190:	d17d      	bne.n	800528e <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d002      	beq.n	800519e <I2C_MasterReceive_BTF+0xc4>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2b10      	cmp	r3, #16
 800519c:	d108      	bne.n	80051b0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051ac:	601a      	str	r2, [r3, #0]
 80051ae:	e016      	b.n	80051de <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2b04      	cmp	r3, #4
 80051b4:	d002      	beq.n	80051bc <I2C_MasterReceive_BTF+0xe2>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d108      	bne.n	80051ce <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80051ca:	601a      	str	r2, [r3, #0]
 80051cc:	e007      	b.n	80051de <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051dc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	691a      	ldr	r2, [r3, #16]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e8:	b2d2      	uxtb	r2, r2
 80051ea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f0:	1c5a      	adds	r2, r3, #1
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	3b01      	subs	r3, #1
 80051fe:	b29a      	uxth	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	691a      	ldr	r2, [r3, #16]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520e:	b2d2      	uxtb	r2, r2
 8005210:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005216:	1c5a      	adds	r2, r3, #1
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005220:	b29b      	uxth	r3, r3
 8005222:	3b01      	subs	r3, #1
 8005224:	b29a      	uxth	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	685a      	ldr	r2, [r3, #4]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005238:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2220      	movs	r2, #32
 800523e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b40      	cmp	r3, #64	@ 0x40
 800524c:	d10a      	bne.n	8005264 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f7ff fcb8 	bl	8004bd2 <HAL_I2C_MemRxCpltCallback>
}
 8005262:	e027      	b.n	80052b4 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2b08      	cmp	r3, #8
 8005270:	d002      	beq.n	8005278 <I2C_MasterReceive_BTF+0x19e>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2b20      	cmp	r3, #32
 8005276:	d103      	bne.n	8005280 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	631a      	str	r2, [r3, #48]	@ 0x30
 800527e:	e002      	b.n	8005286 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2212      	movs	r2, #18
 8005284:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f7ff fc88 	bl	8004b9c <HAL_I2C_MasterRxCpltCallback>
}
 800528c:	e012      	b.n	80052b4 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	691a      	ldr	r2, [r3, #16]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005298:	b2d2      	uxtb	r2, r2
 800529a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a0:	1c5a      	adds	r2, r3, #1
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	3b01      	subs	r3, #1
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80052b4:	bf00      	nop
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b40      	cmp	r3, #64	@ 0x40
 80052ce:	d117      	bne.n	8005300 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d109      	bne.n	80052ec <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	461a      	mov	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80052e8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80052ea:	e067      	b.n	80053bc <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	f043 0301 	orr.w	r3, r3, #1
 80052f6:	b2da      	uxtb	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	611a      	str	r2, [r3, #16]
}
 80052fe:	e05d      	b.n	80053bc <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005308:	d133      	bne.n	8005372 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b21      	cmp	r3, #33	@ 0x21
 8005314:	d109      	bne.n	800532a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800531a:	b2db      	uxtb	r3, r3
 800531c:	461a      	mov	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005326:	611a      	str	r2, [r3, #16]
 8005328:	e008      	b.n	800533c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800532e:	b2db      	uxtb	r3, r3
 8005330:	f043 0301 	orr.w	r3, r3, #1
 8005334:	b2da      	uxtb	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005340:	2b00      	cmp	r3, #0
 8005342:	d004      	beq.n	800534e <I2C_Master_SB+0x92>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800534a:	2b00      	cmp	r3, #0
 800534c:	d108      	bne.n	8005360 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005352:	2b00      	cmp	r3, #0
 8005354:	d032      	beq.n	80053bc <I2C_Master_SB+0x100>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800535a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800535c:	2b00      	cmp	r3, #0
 800535e:	d02d      	beq.n	80053bc <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	685a      	ldr	r2, [r3, #4]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800536e:	605a      	str	r2, [r3, #4]
}
 8005370:	e024      	b.n	80053bc <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005376:	2b00      	cmp	r3, #0
 8005378:	d10e      	bne.n	8005398 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800537e:	b29b      	uxth	r3, r3
 8005380:	11db      	asrs	r3, r3, #7
 8005382:	b2db      	uxtb	r3, r3
 8005384:	f003 0306 	and.w	r3, r3, #6
 8005388:	b2db      	uxtb	r3, r3
 800538a:	f063 030f 	orn	r3, r3, #15
 800538e:	b2da      	uxtb	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	611a      	str	r2, [r3, #16]
}
 8005396:	e011      	b.n	80053bc <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800539c:	2b01      	cmp	r3, #1
 800539e:	d10d      	bne.n	80053bc <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	11db      	asrs	r3, r3, #7
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	f003 0306 	and.w	r3, r3, #6
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	f063 030e 	orn	r3, r3, #14
 80053b4:	b2da      	uxtb	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	611a      	str	r2, [r3, #16]
}
 80053bc:	bf00      	nop
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bc80      	pop	{r7}
 80053c4:	4770      	bx	lr

080053c6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80053c6:	b480      	push	{r7}
 80053c8:	b083      	sub	sp, #12
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053d2:	b2da      	uxtb	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d004      	beq.n	80053ec <I2C_Master_ADD10+0x26>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d108      	bne.n	80053fe <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00c      	beq.n	800540e <I2C_Master_ADD10+0x48>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d007      	beq.n	800540e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	685a      	ldr	r2, [r3, #4]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800540c:	605a      	str	r2, [r3, #4]
  }
}
 800540e:	bf00      	nop
 8005410:	370c      	adds	r7, #12
 8005412:	46bd      	mov	sp, r7
 8005414:	bc80      	pop	{r7}
 8005416:	4770      	bx	lr

08005418 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005418:	b480      	push	{r7}
 800541a:	b091      	sub	sp, #68	@ 0x44
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005426:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800542e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005434:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b22      	cmp	r3, #34	@ 0x22
 8005440:	f040 8174 	bne.w	800572c <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005448:	2b00      	cmp	r3, #0
 800544a:	d10f      	bne.n	800546c <I2C_Master_ADDR+0x54>
 800544c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005450:	2b40      	cmp	r3, #64	@ 0x40
 8005452:	d10b      	bne.n	800546c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005454:	2300      	movs	r3, #0
 8005456:	633b      	str	r3, [r7, #48]	@ 0x30
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	633b      	str	r3, [r7, #48]	@ 0x30
 8005468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800546a:	e16b      	b.n	8005744 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005470:	2b00      	cmp	r3, #0
 8005472:	d11d      	bne.n	80054b0 <I2C_Master_ADDR+0x98>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800547c:	d118      	bne.n	80054b0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800547e:	2300      	movs	r3, #0
 8005480:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	695b      	ldr	r3, [r3, #20]
 8005488:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054a2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054a8:	1c5a      	adds	r2, r3, #1
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	651a      	str	r2, [r3, #80]	@ 0x50
 80054ae:	e149      	b.n	8005744 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d113      	bne.n	80054e2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054ba:	2300      	movs	r3, #0
 80054bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	695b      	ldr	r3, [r3, #20]
 80054c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054de:	601a      	str	r2, [r3, #0]
 80054e0:	e120      	b.n	8005724 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	f040 808a 	bne.w	8005602 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80054ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80054f4:	d137      	bne.n	8005566 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005504:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005510:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005514:	d113      	bne.n	800553e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005524:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005526:	2300      	movs	r3, #0
 8005528:	627b      	str	r3, [r7, #36]	@ 0x24
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	695b      	ldr	r3, [r3, #20]
 8005530:	627b      	str	r3, [r7, #36]	@ 0x24
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	627b      	str	r3, [r7, #36]	@ 0x24
 800553a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800553c:	e0f2      	b.n	8005724 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800553e:	2300      	movs	r3, #0
 8005540:	623b      	str	r3, [r7, #32]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	695b      	ldr	r3, [r3, #20]
 8005548:	623b      	str	r3, [r7, #32]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	623b      	str	r3, [r7, #32]
 8005552:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005562:	601a      	str	r2, [r3, #0]
 8005564:	e0de      	b.n	8005724 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005568:	2b08      	cmp	r3, #8
 800556a:	d02e      	beq.n	80055ca <I2C_Master_ADDR+0x1b2>
 800556c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800556e:	2b20      	cmp	r3, #32
 8005570:	d02b      	beq.n	80055ca <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005574:	2b12      	cmp	r3, #18
 8005576:	d102      	bne.n	800557e <I2C_Master_ADDR+0x166>
 8005578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800557a:	2b01      	cmp	r3, #1
 800557c:	d125      	bne.n	80055ca <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800557e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005580:	2b04      	cmp	r3, #4
 8005582:	d00e      	beq.n	80055a2 <I2C_Master_ADDR+0x18a>
 8005584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005586:	2b02      	cmp	r3, #2
 8005588:	d00b      	beq.n	80055a2 <I2C_Master_ADDR+0x18a>
 800558a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800558c:	2b10      	cmp	r3, #16
 800558e:	d008      	beq.n	80055a2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800559e:	601a      	str	r2, [r3, #0]
 80055a0:	e007      	b.n	80055b2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80055b0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055b2:	2300      	movs	r3, #0
 80055b4:	61fb      	str	r3, [r7, #28]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	61fb      	str	r3, [r7, #28]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	61fb      	str	r3, [r7, #28]
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	e0ac      	b.n	8005724 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055d8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055da:	2300      	movs	r3, #0
 80055dc:	61bb      	str	r3, [r7, #24]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	61bb      	str	r3, [r7, #24]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	61bb      	str	r3, [r7, #24]
 80055ee:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055fe:	601a      	str	r2, [r3, #0]
 8005600:	e090      	b.n	8005724 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005606:	b29b      	uxth	r3, r3
 8005608:	2b02      	cmp	r3, #2
 800560a:	d158      	bne.n	80056be <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800560c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800560e:	2b04      	cmp	r3, #4
 8005610:	d021      	beq.n	8005656 <I2C_Master_ADDR+0x23e>
 8005612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005614:	2b02      	cmp	r3, #2
 8005616:	d01e      	beq.n	8005656 <I2C_Master_ADDR+0x23e>
 8005618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800561a:	2b10      	cmp	r3, #16
 800561c:	d01b      	beq.n	8005656 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800562c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800562e:	2300      	movs	r3, #0
 8005630:	617b      	str	r3, [r7, #20]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	617b      	str	r3, [r7, #20]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	617b      	str	r3, [r7, #20]
 8005642:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005652:	601a      	str	r2, [r3, #0]
 8005654:	e012      	b.n	800567c <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005664:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005666:	2300      	movs	r3, #0
 8005668:	613b      	str	r3, [r7, #16]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	695b      	ldr	r3, [r3, #20]
 8005670:	613b      	str	r3, [r7, #16]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	613b      	str	r3, [r7, #16]
 800567a:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005686:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800568a:	d14b      	bne.n	8005724 <I2C_Master_ADDR+0x30c>
 800568c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800568e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005692:	d00b      	beq.n	80056ac <I2C_Master_ADDR+0x294>
 8005694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005696:	2b01      	cmp	r3, #1
 8005698:	d008      	beq.n	80056ac <I2C_Master_ADDR+0x294>
 800569a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800569c:	2b08      	cmp	r3, #8
 800569e:	d005      	beq.n	80056ac <I2C_Master_ADDR+0x294>
 80056a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056a2:	2b10      	cmp	r3, #16
 80056a4:	d002      	beq.n	80056ac <I2C_Master_ADDR+0x294>
 80056a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056a8:	2b20      	cmp	r3, #32
 80056aa:	d13b      	bne.n	8005724 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	685a      	ldr	r2, [r3, #4]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80056ba:	605a      	str	r2, [r3, #4]
 80056bc:	e032      	b.n	8005724 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80056cc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056dc:	d117      	bne.n	800570e <I2C_Master_ADDR+0x2f6>
 80056de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80056e4:	d00b      	beq.n	80056fe <I2C_Master_ADDR+0x2e6>
 80056e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d008      	beq.n	80056fe <I2C_Master_ADDR+0x2e6>
 80056ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ee:	2b08      	cmp	r3, #8
 80056f0:	d005      	beq.n	80056fe <I2C_Master_ADDR+0x2e6>
 80056f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f4:	2b10      	cmp	r3, #16
 80056f6:	d002      	beq.n	80056fe <I2C_Master_ADDR+0x2e6>
 80056f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056fa:	2b20      	cmp	r3, #32
 80056fc:	d107      	bne.n	800570e <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	685a      	ldr	r2, [r3, #4]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800570c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800570e:	2300      	movs	r3, #0
 8005710:	60fb      	str	r3, [r7, #12]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	60fb      	str	r3, [r7, #12]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	60fb      	str	r3, [r7, #12]
 8005722:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800572a:	e00b      	b.n	8005744 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800572c:	2300      	movs	r3, #0
 800572e:	60bb      	str	r3, [r7, #8]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	60bb      	str	r3, [r7, #8]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	60bb      	str	r3, [r7, #8]
 8005740:	68bb      	ldr	r3, [r7, #8]
}
 8005742:	e7ff      	b.n	8005744 <I2C_Master_ADDR+0x32c>
 8005744:	bf00      	nop
 8005746:	3744      	adds	r7, #68	@ 0x44
 8005748:	46bd      	mov	sp, r7
 800574a:	bc80      	pop	{r7}
 800574c:	4770      	bx	lr

0800574e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b084      	sub	sp, #16
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800575c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005762:	b29b      	uxth	r3, r3
 8005764:	2b00      	cmp	r3, #0
 8005766:	d02b      	beq.n	80057c0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800576c:	781a      	ldrb	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005778:	1c5a      	adds	r2, r3, #1
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005782:	b29b      	uxth	r3, r3
 8005784:	3b01      	subs	r3, #1
 8005786:	b29a      	uxth	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005790:	b29b      	uxth	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d114      	bne.n	80057c0 <I2C_SlaveTransmit_TXE+0x72>
 8005796:	7bfb      	ldrb	r3, [r7, #15]
 8005798:	2b29      	cmp	r3, #41	@ 0x29
 800579a:	d111      	bne.n	80057c0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	685a      	ldr	r2, [r3, #4]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057aa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2221      	movs	r2, #33	@ 0x21
 80057b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2228      	movs	r2, #40	@ 0x28
 80057b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f7ff f9f7 	bl	8004bae <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80057c0:	bf00      	nop
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d011      	beq.n	80057fe <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057de:	781a      	ldrb	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ea:	1c5a      	adds	r2, r3, #1
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	3b01      	subs	r3, #1
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80057fe:	bf00      	nop
 8005800:	370c      	adds	r7, #12
 8005802:	46bd      	mov	sp, r7
 8005804:	bc80      	pop	{r7}
 8005806:	4770      	bx	lr

08005808 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005816:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800581c:	b29b      	uxth	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d02c      	beq.n	800587c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	691a      	ldr	r2, [r3, #16]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800582c:	b2d2      	uxtb	r2, r2
 800582e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005834:	1c5a      	adds	r2, r3, #1
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800583e:	b29b      	uxth	r3, r3
 8005840:	3b01      	subs	r3, #1
 8005842:	b29a      	uxth	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800584c:	b29b      	uxth	r3, r3
 800584e:	2b00      	cmp	r3, #0
 8005850:	d114      	bne.n	800587c <I2C_SlaveReceive_RXNE+0x74>
 8005852:	7bfb      	ldrb	r3, [r7, #15]
 8005854:	2b2a      	cmp	r3, #42	@ 0x2a
 8005856:	d111      	bne.n	800587c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	685a      	ldr	r2, [r3, #4]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005866:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2222      	movs	r2, #34	@ 0x22
 800586c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2228      	movs	r2, #40	@ 0x28
 8005872:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7fc fc38 	bl	80020ec <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800587c:	bf00      	nop
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005890:	b29b      	uxth	r3, r3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d012      	beq.n	80058bc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	691a      	ldr	r2, [r3, #16]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a0:	b2d2      	uxtb	r2, r2
 80058a2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a8:	1c5a      	adds	r2, r3, #1
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	3b01      	subs	r3, #1
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80058bc:	bf00      	nop
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bc80      	pop	{r7}
 80058c4:	4770      	bx	lr

080058c6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b084      	sub	sp, #16
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
 80058ce:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80058d0:	2300      	movs	r3, #0
 80058d2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80058e0:	2b28      	cmp	r3, #40	@ 0x28
 80058e2:	d127      	bne.n	8005934 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058f2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	089b      	lsrs	r3, r3, #2
 80058f8:	f003 0301 	and.w	r3, r3, #1
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d101      	bne.n	8005904 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005900:	2301      	movs	r3, #1
 8005902:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	09db      	lsrs	r3, r3, #7
 8005908:	f003 0301 	and.w	r3, r3, #1
 800590c:	2b00      	cmp	r3, #0
 800590e:	d103      	bne.n	8005918 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	81bb      	strh	r3, [r7, #12]
 8005916:	e002      	b.n	800591e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005926:	89ba      	ldrh	r2, [r7, #12]
 8005928:	7bfb      	ldrb	r3, [r7, #15]
 800592a:	4619      	mov	r1, r3
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f7fc fbc3 	bl	80020b8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005932:	e00e      	b.n	8005952 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005934:	2300      	movs	r3, #0
 8005936:	60bb      	str	r3, [r7, #8]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	60bb      	str	r3, [r7, #8]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	60bb      	str	r3, [r7, #8]
 8005948:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8005952:	bf00      	nop
 8005954:	3710      	adds	r7, #16
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
	...

0800595c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800596a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	685a      	ldr	r2, [r3, #4]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800597a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800597c:	2300      	movs	r3, #0
 800597e:	60bb      	str	r3, [r7, #8]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	60bb      	str	r3, [r7, #8]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f042 0201 	orr.w	r2, r2, #1
 8005996:	601a      	str	r2, [r3, #0]
 8005998:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059a8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059b8:	d172      	bne.n	8005aa0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80059ba:	7bfb      	ldrb	r3, [r7, #15]
 80059bc:	2b22      	cmp	r3, #34	@ 0x22
 80059be:	d002      	beq.n	80059c6 <I2C_Slave_STOPF+0x6a>
 80059c0:	7bfb      	ldrb	r3, [r7, #15]
 80059c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80059c4:	d135      	bne.n	8005a32 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059d8:	b29b      	uxth	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d005      	beq.n	80059ea <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e2:	f043 0204 	orr.w	r2, r3, #4
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059f8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7fe faba 	bl	8003f78 <HAL_DMA_GetState>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d049      	beq.n	8005a9e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a0e:	4a69      	ldr	r2, [pc, #420]	@ (8005bb4 <I2C_Slave_STOPF+0x258>)
 8005a10:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7fd ff6a 	bl	80038f0 <HAL_DMA_Abort_IT>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d03d      	beq.n	8005a9e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005a2c:	4610      	mov	r0, r2
 8005a2e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a30:	e035      	b.n	8005a9e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	b29a      	uxth	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d005      	beq.n	8005a56 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a4e:	f043 0204 	orr.w	r2, r3, #4
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	685a      	ldr	r2, [r3, #4]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a64:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7fe fa84 	bl	8003f78 <HAL_DMA_GetState>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d014      	beq.n	8005aa0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a7a:	4a4e      	ldr	r2, [pc, #312]	@ (8005bb4 <I2C_Slave_STOPF+0x258>)
 8005a7c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7fd ff34 	bl	80038f0 <HAL_DMA_Abort_IT>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d008      	beq.n	8005aa0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005a98:	4610      	mov	r0, r2
 8005a9a:	4798      	blx	r3
 8005a9c:	e000      	b.n	8005aa0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a9e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d03e      	beq.n	8005b28 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	695b      	ldr	r3, [r3, #20]
 8005ab0:	f003 0304 	and.w	r3, r3, #4
 8005ab4:	2b04      	cmp	r3, #4
 8005ab6:	d112      	bne.n	8005ade <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	691a      	ldr	r2, [r3, #16]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac2:	b2d2      	uxtb	r2, r2
 8005ac4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aca:	1c5a      	adds	r2, r3, #1
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	695b      	ldr	r3, [r3, #20]
 8005ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ae8:	2b40      	cmp	r3, #64	@ 0x40
 8005aea:	d112      	bne.n	8005b12 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	691a      	ldr	r2, [r3, #16]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af6:	b2d2      	uxtb	r2, r2
 8005af8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005afe:	1c5a      	adds	r2, r3, #1
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d005      	beq.n	8005b28 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b20:	f043 0204 	orr.w	r2, r3, #4
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d003      	beq.n	8005b38 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 f8b7 	bl	8005ca4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005b36:	e039      	b.n	8005bac <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005b38:	7bfb      	ldrb	r3, [r7, #15]
 8005b3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b3c:	d109      	bne.n	8005b52 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2228      	movs	r2, #40	@ 0x28
 8005b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f7fc facd 	bl	80020ec <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2b28      	cmp	r3, #40	@ 0x28
 8005b5c:	d111      	bne.n	8005b82 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a15      	ldr	r2, [pc, #84]	@ (8005bb8 <I2C_Slave_STOPF+0x25c>)
 8005b62:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2220      	movs	r2, #32
 8005b6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f7fc faf8 	bl	8002170 <HAL_I2C_ListenCpltCallback>
}
 8005b80:	e014      	b.n	8005bac <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b86:	2b22      	cmp	r3, #34	@ 0x22
 8005b88:	d002      	beq.n	8005b90 <I2C_Slave_STOPF+0x234>
 8005b8a:	7bfb      	ldrb	r3, [r7, #15]
 8005b8c:	2b22      	cmp	r3, #34	@ 0x22
 8005b8e:	d10d      	bne.n	8005bac <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2220      	movs	r2, #32
 8005b9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f7fc faa0 	bl	80020ec <HAL_I2C_SlaveRxCpltCallback>
}
 8005bac:	bf00      	nop
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	08005f09 	.word	0x08005f09
 8005bb8:	ffff0000 	.word	0xffff0000

08005bbc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bca:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	2b08      	cmp	r3, #8
 8005bd6:	d002      	beq.n	8005bde <I2C_Slave_AF+0x22>
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	2b20      	cmp	r3, #32
 8005bdc:	d129      	bne.n	8005c32 <I2C_Slave_AF+0x76>
 8005bde:	7bfb      	ldrb	r3, [r7, #15]
 8005be0:	2b28      	cmp	r3, #40	@ 0x28
 8005be2:	d126      	bne.n	8005c32 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a2e      	ldr	r2, [pc, #184]	@ (8005ca0 <I2C_Slave_AF+0xe4>)
 8005be8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005bf8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005c02:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c12:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f7fc faa0 	bl	8002170 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005c30:	e031      	b.n	8005c96 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005c32:	7bfb      	ldrb	r3, [r7, #15]
 8005c34:	2b21      	cmp	r3, #33	@ 0x21
 8005c36:	d129      	bne.n	8005c8c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a19      	ldr	r2, [pc, #100]	@ (8005ca0 <I2C_Slave_AF+0xe4>)
 8005c3c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2221      	movs	r2, #33	@ 0x21
 8005c42:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2220      	movs	r2, #32
 8005c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	685a      	ldr	r2, [r3, #4]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005c62:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005c6c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c7c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f7fe fca8 	bl	80045d4 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f7fe ff92 	bl	8004bae <HAL_I2C_SlaveTxCpltCallback>
}
 8005c8a:	e004      	b.n	8005c96 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005c94:	615a      	str	r2, [r3, #20]
}
 8005c96:	bf00      	nop
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	ffff0000 	.word	0xffff0000

08005ca4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cb2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005cba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005cbc:	7bbb      	ldrb	r3, [r7, #14]
 8005cbe:	2b10      	cmp	r3, #16
 8005cc0:	d002      	beq.n	8005cc8 <I2C_ITError+0x24>
 8005cc2:	7bbb      	ldrb	r3, [r7, #14]
 8005cc4:	2b40      	cmp	r3, #64	@ 0x40
 8005cc6:	d10a      	bne.n	8005cde <I2C_ITError+0x3a>
 8005cc8:	7bfb      	ldrb	r3, [r7, #15]
 8005cca:	2b22      	cmp	r3, #34	@ 0x22
 8005ccc:	d107      	bne.n	8005cde <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005cdc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005cde:	7bfb      	ldrb	r3, [r7, #15]
 8005ce0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005ce4:	2b28      	cmp	r3, #40	@ 0x28
 8005ce6:	d107      	bne.n	8005cf8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2228      	movs	r2, #40	@ 0x28
 8005cf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005cf6:	e015      	b.n	8005d24 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d06:	d00a      	beq.n	8005d1e <I2C_ITError+0x7a>
 8005d08:	7bfb      	ldrb	r3, [r7, #15]
 8005d0a:	2b60      	cmp	r3, #96	@ 0x60
 8005d0c:	d007      	beq.n	8005d1e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2220      	movs	r2, #32
 8005d12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d32:	d162      	bne.n	8005dfa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	685a      	ldr	r2, [r3, #4]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d42:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d48:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d020      	beq.n	8005d94 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d56:	4a6a      	ldr	r2, [pc, #424]	@ (8005f00 <I2C_ITError+0x25c>)
 8005d58:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7fd fdc6 	bl	80038f0 <HAL_DMA_Abort_IT>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f000 8089 	beq.w	8005e7e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f022 0201 	bic.w	r2, r2, #1
 8005d7a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2220      	movs	r2, #32
 8005d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005d8e:	4610      	mov	r0, r2
 8005d90:	4798      	blx	r3
 8005d92:	e074      	b.n	8005e7e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d98:	4a59      	ldr	r2, [pc, #356]	@ (8005f00 <I2C_ITError+0x25c>)
 8005d9a:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7fd fda5 	bl	80038f0 <HAL_DMA_Abort_IT>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d068      	beq.n	8005e7e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005db6:	2b40      	cmp	r3, #64	@ 0x40
 8005db8:	d10b      	bne.n	8005dd2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	691a      	ldr	r2, [r3, #16]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc4:	b2d2      	uxtb	r2, r2
 8005dc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dcc:	1c5a      	adds	r2, r3, #1
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f022 0201 	bic.w	r2, r2, #1
 8005de0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2220      	movs	r2, #32
 8005de6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005df4:	4610      	mov	r0, r2
 8005df6:	4798      	blx	r3
 8005df8:	e041      	b.n	8005e7e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b60      	cmp	r3, #96	@ 0x60
 8005e04:	d125      	bne.n	8005e52 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2220      	movs	r2, #32
 8005e0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e1e:	2b40      	cmp	r3, #64	@ 0x40
 8005e20:	d10b      	bne.n	8005e3a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	691a      	ldr	r2, [r3, #16]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e2c:	b2d2      	uxtb	r2, r2
 8005e2e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e34:	1c5a      	adds	r2, r3, #1
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f022 0201 	bic.w	r2, r2, #1
 8005e48:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7fe feca 	bl	8004be4 <HAL_I2C_AbortCpltCallback>
 8005e50:	e015      	b.n	8005e7e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	695b      	ldr	r3, [r3, #20]
 8005e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e5c:	2b40      	cmp	r3, #64	@ 0x40
 8005e5e:	d10b      	bne.n	8005e78 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	691a      	ldr	r2, [r3, #16]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e6a:	b2d2      	uxtb	r2, r2
 8005e6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e72:	1c5a      	adds	r2, r3, #1
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f7fc f984 	bl	8002186 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e82:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d10e      	bne.n	8005eac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d109      	bne.n	8005eac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d104      	bne.n	8005eac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d007      	beq.n	8005ebc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	685a      	ldr	r2, [r3, #4]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005eba:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ec2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec8:	f003 0304 	and.w	r3, r3, #4
 8005ecc:	2b04      	cmp	r3, #4
 8005ece:	d113      	bne.n	8005ef8 <I2C_ITError+0x254>
 8005ed0:	7bfb      	ldrb	r3, [r7, #15]
 8005ed2:	2b28      	cmp	r3, #40	@ 0x28
 8005ed4:	d110      	bne.n	8005ef8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a0a      	ldr	r2, [pc, #40]	@ (8005f04 <I2C_ITError+0x260>)
 8005eda:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2220      	movs	r2, #32
 8005ee6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f7fc f93c 	bl	8002170 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005ef8:	bf00      	nop
 8005efa:	3710      	adds	r7, #16
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	08005f09 	.word	0x08005f09
 8005f04:	ffff0000 	.word	0xffff0000

08005f08 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b086      	sub	sp, #24
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f10:	2300      	movs	r3, #0
 8005f12:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f18:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f20:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005f22:	4b4b      	ldr	r3, [pc, #300]	@ (8006050 <I2C_DMAAbort+0x148>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	08db      	lsrs	r3, r3, #3
 8005f28:	4a4a      	ldr	r2, [pc, #296]	@ (8006054 <I2C_DMAAbort+0x14c>)
 8005f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f2e:	0a1a      	lsrs	r2, r3, #8
 8005f30:	4613      	mov	r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4413      	add	r3, r2
 8005f36:	00da      	lsls	r2, r3, #3
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d106      	bne.n	8005f50 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f46:	f043 0220 	orr.w	r2, r3, #32
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005f4e:	e00a      	b.n	8005f66 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	3b01      	subs	r3, #1
 8005f54:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f64:	d0ea      	beq.n	8005f3c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d003      	beq.n	8005f76 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f72:	2200      	movs	r2, #0
 8005f74:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d003      	beq.n	8005f86 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f82:	2200      	movs	r2, #0
 8005f84:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f94:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d003      	beq.n	8005fac <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fa8:	2200      	movs	r2, #0
 8005faa:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d003      	beq.n	8005fbc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fb8:	2200      	movs	r2, #0
 8005fba:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f022 0201 	bic.w	r2, r2, #1
 8005fca:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	2b60      	cmp	r3, #96	@ 0x60
 8005fd6:	d10e      	bne.n	8005ff6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	2220      	movs	r2, #32
 8005fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	2200      	movs	r2, #0
 8005fec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005fee:	6978      	ldr	r0, [r7, #20]
 8005ff0:	f7fe fdf8 	bl	8004be4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005ff4:	e027      	b.n	8006046 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005ff6:	7cfb      	ldrb	r3, [r7, #19]
 8005ff8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005ffc:	2b28      	cmp	r3, #40	@ 0x28
 8005ffe:	d117      	bne.n	8006030 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f042 0201 	orr.w	r2, r2, #1
 800600e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800601e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	2200      	movs	r2, #0
 8006024:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	2228      	movs	r2, #40	@ 0x28
 800602a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800602e:	e007      	b.n	8006040 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	2220      	movs	r2, #32
 8006034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006040:	6978      	ldr	r0, [r7, #20]
 8006042:	f7fc f8a0 	bl	8002186 <HAL_I2C_ErrorCallback>
}
 8006046:	bf00      	nop
 8006048:	3718      	adds	r7, #24
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	2000000c 	.word	0x2000000c
 8006054:	14f8b589 	.word	0x14f8b589

08006058 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006058:	b480      	push	{r7}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006060:	2300      	movs	r3, #0
 8006062:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006064:	4b13      	ldr	r3, [pc, #76]	@ (80060b4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	08db      	lsrs	r3, r3, #3
 800606a:	4a13      	ldr	r2, [pc, #76]	@ (80060b8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800606c:	fba2 2303 	umull	r2, r3, r2, r3
 8006070:	0a1a      	lsrs	r2, r3, #8
 8006072:	4613      	mov	r3, r2
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	4413      	add	r3, r2
 8006078:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	3b01      	subs	r3, #1
 800607e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d107      	bne.n	8006096 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800608a:	f043 0220 	orr.w	r2, r3, #32
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e008      	b.n	80060a8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060a4:	d0e9      	beq.n	800607a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3714      	adds	r7, #20
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bc80      	pop	{r7}
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	2000000c 	.word	0x2000000c
 80060b8:	14f8b589 	.word	0x14f8b589

080060bc <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060c8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80060cc:	d103      	bne.n	80060d6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80060d4:	e007      	b.n	80060e6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060da:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80060de:	d102      	bne.n	80060e6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2208      	movs	r2, #8
 80060e4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80060e6:	bf00      	nop
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bc80      	pop	{r7}
 80060ee:	4770      	bx	lr

080060f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e272      	b.n	80065e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	2b00      	cmp	r3, #0
 800610c:	f000 8087 	beq.w	800621e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006110:	4b92      	ldr	r3, [pc, #584]	@ (800635c <HAL_RCC_OscConfig+0x26c>)
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	f003 030c 	and.w	r3, r3, #12
 8006118:	2b04      	cmp	r3, #4
 800611a:	d00c      	beq.n	8006136 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800611c:	4b8f      	ldr	r3, [pc, #572]	@ (800635c <HAL_RCC_OscConfig+0x26c>)
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	f003 030c 	and.w	r3, r3, #12
 8006124:	2b08      	cmp	r3, #8
 8006126:	d112      	bne.n	800614e <HAL_RCC_OscConfig+0x5e>
 8006128:	4b8c      	ldr	r3, [pc, #560]	@ (800635c <HAL_RCC_OscConfig+0x26c>)
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006130:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006134:	d10b      	bne.n	800614e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006136:	4b89      	ldr	r3, [pc, #548]	@ (800635c <HAL_RCC_OscConfig+0x26c>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800613e:	2b00      	cmp	r3, #0
 8006140:	d06c      	beq.n	800621c <HAL_RCC_OscConfig+0x12c>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d168      	bne.n	800621c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e24c      	b.n	80065e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006156:	d106      	bne.n	8006166 <HAL_RCC_OscConfig+0x76>
 8006158:	4b80      	ldr	r3, [pc, #512]	@ (800635c <HAL_RCC_OscConfig+0x26c>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a7f      	ldr	r2, [pc, #508]	@ (800635c <HAL_RCC_OscConfig+0x26c>)
 800615e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006162:	6013      	str	r3, [r2, #0]
 8006164:	e02e      	b.n	80061c4 <HAL_RCC_OscConfig+0xd4>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d10c      	bne.n	8006188 <HAL_RCC_OscConfig+0x98>
 800616e:	4b7b      	ldr	r3, [pc, #492]	@ (800635c <HAL_RCC_OscConfig+0x26c>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a7a      	ldr	r2, [pc, #488]	@ (800635c <HAL_RCC_OscConfig+0x26c>)
 8006174:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006178:	6013      	str	r3, [r2, #0]
 800617a:	4b78      	ldr	r3, [pc, #480]	@ (800635c <HAL_RCC_OscConfig+0x26c>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a77      	ldr	r2, [pc, #476]	@ (800635c <HAL_RCC_OscConfig+0x26c>)
 8006180:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006184:	6013      	str	r3, [r2, #0]
 8006186:	e01d      	b.n	80061c4 <HAL_RCC_OscConfig+0xd4>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006190:	d10c      	bne.n	80061ac <HAL_RCC_OscConfig+0xbc>
 8006192:	4b72      	ldr	r3, [pc, #456]	@ (800635c <HAL_RCC_OscConfig+0x26c>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a71      	ldr	r2, [pc, #452]	@ (800635c <HAL_RCC_OscConfig+0x26c>)
 8006198:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800619c:	6013      	str	r3, [r2, #0]
 800619e:	4b6f      	ldr	r3, [pc, #444]	@ (800635c <HAL_RCC_OscConfig+0x26c>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a6e      	ldr	r2, [pc, #440]	@ (800635c <HAL_RCC_OscConfig+0x26c>)
 80061a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061a8:	6013      	str	r3, [r2, #0]
 80061aa:	e00b      	b.n	80061c4 <HAL_RCC_OscConfig+0xd4>
 80061ac:	4b6b      	ldr	r3, [pc, #428]	@ (800635c <HAL_RCC_OscConfig+0x26c>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a6a      	ldr	r2, [pc, #424]	@ (800635c <HAL_RCC_OscConfig+0x26c>)
 80061b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061b6:	6013      	str	r3, [r2, #0]
 80061b8:	4b68      	ldr	r3, [pc, #416]	@ (800635c <HAL_RCC_OscConfig+0x26c>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a67      	ldr	r2, [pc, #412]	@ (800635c <HAL_RCC_OscConfig+0x26c>)
 80061be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80061c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d013      	beq.n	80061f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061cc:	f7fd f9a2 	bl	8003514 <HAL_GetTick>
 80061d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061d2:	e008      	b.n	80061e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061d4:	f7fd f99e 	bl	8003514 <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	2b64      	cmp	r3, #100	@ 0x64
 80061e0:	d901      	bls.n	80061e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e200      	b.n	80065e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061e6:	4b5d      	ldr	r3, [pc, #372]	@ (800635c <HAL_RCC_OscConfig+0x26c>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d0f0      	beq.n	80061d4 <HAL_RCC_OscConfig+0xe4>
 80061f2:	e014      	b.n	800621e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061f4:	f7fd f98e 	bl	8003514 <HAL_GetTick>
 80061f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061fa:	e008      	b.n	800620e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061fc:	f7fd f98a 	bl	8003514 <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	2b64      	cmp	r3, #100	@ 0x64
 8006208:	d901      	bls.n	800620e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	e1ec      	b.n	80065e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800620e:	4b53      	ldr	r3, [pc, #332]	@ (800635c <HAL_RCC_OscConfig+0x26c>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d1f0      	bne.n	80061fc <HAL_RCC_OscConfig+0x10c>
 800621a:	e000      	b.n	800621e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800621c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0302 	and.w	r3, r3, #2
 8006226:	2b00      	cmp	r3, #0
 8006228:	d063      	beq.n	80062f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800622a:	4b4c      	ldr	r3, [pc, #304]	@ (800635c <HAL_RCC_OscConfig+0x26c>)
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	f003 030c 	and.w	r3, r3, #12
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00b      	beq.n	800624e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006236:	4b49      	ldr	r3, [pc, #292]	@ (800635c <HAL_RCC_OscConfig+0x26c>)
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f003 030c 	and.w	r3, r3, #12
 800623e:	2b08      	cmp	r3, #8
 8006240:	d11c      	bne.n	800627c <HAL_RCC_OscConfig+0x18c>
 8006242:	4b46      	ldr	r3, [pc, #280]	@ (800635c <HAL_RCC_OscConfig+0x26c>)
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800624a:	2b00      	cmp	r3, #0
 800624c:	d116      	bne.n	800627c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800624e:	4b43      	ldr	r3, [pc, #268]	@ (800635c <HAL_RCC_OscConfig+0x26c>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 0302 	and.w	r3, r3, #2
 8006256:	2b00      	cmp	r3, #0
 8006258:	d005      	beq.n	8006266 <HAL_RCC_OscConfig+0x176>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	2b01      	cmp	r3, #1
 8006260:	d001      	beq.n	8006266 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e1c0      	b.n	80065e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006266:	4b3d      	ldr	r3, [pc, #244]	@ (800635c <HAL_RCC_OscConfig+0x26c>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	00db      	lsls	r3, r3, #3
 8006274:	4939      	ldr	r1, [pc, #228]	@ (800635c <HAL_RCC_OscConfig+0x26c>)
 8006276:	4313      	orrs	r3, r2
 8006278:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800627a:	e03a      	b.n	80062f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d020      	beq.n	80062c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006284:	4b36      	ldr	r3, [pc, #216]	@ (8006360 <HAL_RCC_OscConfig+0x270>)
 8006286:	2201      	movs	r2, #1
 8006288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800628a:	f7fd f943 	bl	8003514 <HAL_GetTick>
 800628e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006290:	e008      	b.n	80062a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006292:	f7fd f93f 	bl	8003514 <HAL_GetTick>
 8006296:	4602      	mov	r2, r0
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	2b02      	cmp	r3, #2
 800629e:	d901      	bls.n	80062a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	e1a1      	b.n	80065e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062a4:	4b2d      	ldr	r3, [pc, #180]	@ (800635c <HAL_RCC_OscConfig+0x26c>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0302 	and.w	r3, r3, #2
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d0f0      	beq.n	8006292 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062b0:	4b2a      	ldr	r3, [pc, #168]	@ (800635c <HAL_RCC_OscConfig+0x26c>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	695b      	ldr	r3, [r3, #20]
 80062bc:	00db      	lsls	r3, r3, #3
 80062be:	4927      	ldr	r1, [pc, #156]	@ (800635c <HAL_RCC_OscConfig+0x26c>)
 80062c0:	4313      	orrs	r3, r2
 80062c2:	600b      	str	r3, [r1, #0]
 80062c4:	e015      	b.n	80062f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062c6:	4b26      	ldr	r3, [pc, #152]	@ (8006360 <HAL_RCC_OscConfig+0x270>)
 80062c8:	2200      	movs	r2, #0
 80062ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062cc:	f7fd f922 	bl	8003514 <HAL_GetTick>
 80062d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062d2:	e008      	b.n	80062e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062d4:	f7fd f91e 	bl	8003514 <HAL_GetTick>
 80062d8:	4602      	mov	r2, r0
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d901      	bls.n	80062e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e180      	b.n	80065e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062e6:	4b1d      	ldr	r3, [pc, #116]	@ (800635c <HAL_RCC_OscConfig+0x26c>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0302 	and.w	r3, r3, #2
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1f0      	bne.n	80062d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 0308 	and.w	r3, r3, #8
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d03a      	beq.n	8006374 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d019      	beq.n	800633a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006306:	4b17      	ldr	r3, [pc, #92]	@ (8006364 <HAL_RCC_OscConfig+0x274>)
 8006308:	2201      	movs	r2, #1
 800630a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800630c:	f7fd f902 	bl	8003514 <HAL_GetTick>
 8006310:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006312:	e008      	b.n	8006326 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006314:	f7fd f8fe 	bl	8003514 <HAL_GetTick>
 8006318:	4602      	mov	r2, r0
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	2b02      	cmp	r3, #2
 8006320:	d901      	bls.n	8006326 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006322:	2303      	movs	r3, #3
 8006324:	e160      	b.n	80065e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006326:	4b0d      	ldr	r3, [pc, #52]	@ (800635c <HAL_RCC_OscConfig+0x26c>)
 8006328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800632a:	f003 0302 	and.w	r3, r3, #2
 800632e:	2b00      	cmp	r3, #0
 8006330:	d0f0      	beq.n	8006314 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006332:	2001      	movs	r0, #1
 8006334:	f000 face 	bl	80068d4 <RCC_Delay>
 8006338:	e01c      	b.n	8006374 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800633a:	4b0a      	ldr	r3, [pc, #40]	@ (8006364 <HAL_RCC_OscConfig+0x274>)
 800633c:	2200      	movs	r2, #0
 800633e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006340:	f7fd f8e8 	bl	8003514 <HAL_GetTick>
 8006344:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006346:	e00f      	b.n	8006368 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006348:	f7fd f8e4 	bl	8003514 <HAL_GetTick>
 800634c:	4602      	mov	r2, r0
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	2b02      	cmp	r3, #2
 8006354:	d908      	bls.n	8006368 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	e146      	b.n	80065e8 <HAL_RCC_OscConfig+0x4f8>
 800635a:	bf00      	nop
 800635c:	40021000 	.word	0x40021000
 8006360:	42420000 	.word	0x42420000
 8006364:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006368:	4b92      	ldr	r3, [pc, #584]	@ (80065b4 <HAL_RCC_OscConfig+0x4c4>)
 800636a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800636c:	f003 0302 	and.w	r3, r3, #2
 8006370:	2b00      	cmp	r3, #0
 8006372:	d1e9      	bne.n	8006348 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0304 	and.w	r3, r3, #4
 800637c:	2b00      	cmp	r3, #0
 800637e:	f000 80a6 	beq.w	80064ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006382:	2300      	movs	r3, #0
 8006384:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006386:	4b8b      	ldr	r3, [pc, #556]	@ (80065b4 <HAL_RCC_OscConfig+0x4c4>)
 8006388:	69db      	ldr	r3, [r3, #28]
 800638a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10d      	bne.n	80063ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006392:	4b88      	ldr	r3, [pc, #544]	@ (80065b4 <HAL_RCC_OscConfig+0x4c4>)
 8006394:	69db      	ldr	r3, [r3, #28]
 8006396:	4a87      	ldr	r2, [pc, #540]	@ (80065b4 <HAL_RCC_OscConfig+0x4c4>)
 8006398:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800639c:	61d3      	str	r3, [r2, #28]
 800639e:	4b85      	ldr	r3, [pc, #532]	@ (80065b4 <HAL_RCC_OscConfig+0x4c4>)
 80063a0:	69db      	ldr	r3, [r3, #28]
 80063a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063a6:	60bb      	str	r3, [r7, #8]
 80063a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063aa:	2301      	movs	r3, #1
 80063ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063ae:	4b82      	ldr	r3, [pc, #520]	@ (80065b8 <HAL_RCC_OscConfig+0x4c8>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d118      	bne.n	80063ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80063ba:	4b7f      	ldr	r3, [pc, #508]	@ (80065b8 <HAL_RCC_OscConfig+0x4c8>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a7e      	ldr	r2, [pc, #504]	@ (80065b8 <HAL_RCC_OscConfig+0x4c8>)
 80063c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063c6:	f7fd f8a5 	bl	8003514 <HAL_GetTick>
 80063ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063cc:	e008      	b.n	80063e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063ce:	f7fd f8a1 	bl	8003514 <HAL_GetTick>
 80063d2:	4602      	mov	r2, r0
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	2b64      	cmp	r3, #100	@ 0x64
 80063da:	d901      	bls.n	80063e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e103      	b.n	80065e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063e0:	4b75      	ldr	r3, [pc, #468]	@ (80065b8 <HAL_RCC_OscConfig+0x4c8>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d0f0      	beq.n	80063ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d106      	bne.n	8006402 <HAL_RCC_OscConfig+0x312>
 80063f4:	4b6f      	ldr	r3, [pc, #444]	@ (80065b4 <HAL_RCC_OscConfig+0x4c4>)
 80063f6:	6a1b      	ldr	r3, [r3, #32]
 80063f8:	4a6e      	ldr	r2, [pc, #440]	@ (80065b4 <HAL_RCC_OscConfig+0x4c4>)
 80063fa:	f043 0301 	orr.w	r3, r3, #1
 80063fe:	6213      	str	r3, [r2, #32]
 8006400:	e02d      	b.n	800645e <HAL_RCC_OscConfig+0x36e>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d10c      	bne.n	8006424 <HAL_RCC_OscConfig+0x334>
 800640a:	4b6a      	ldr	r3, [pc, #424]	@ (80065b4 <HAL_RCC_OscConfig+0x4c4>)
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	4a69      	ldr	r2, [pc, #420]	@ (80065b4 <HAL_RCC_OscConfig+0x4c4>)
 8006410:	f023 0301 	bic.w	r3, r3, #1
 8006414:	6213      	str	r3, [r2, #32]
 8006416:	4b67      	ldr	r3, [pc, #412]	@ (80065b4 <HAL_RCC_OscConfig+0x4c4>)
 8006418:	6a1b      	ldr	r3, [r3, #32]
 800641a:	4a66      	ldr	r2, [pc, #408]	@ (80065b4 <HAL_RCC_OscConfig+0x4c4>)
 800641c:	f023 0304 	bic.w	r3, r3, #4
 8006420:	6213      	str	r3, [r2, #32]
 8006422:	e01c      	b.n	800645e <HAL_RCC_OscConfig+0x36e>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	2b05      	cmp	r3, #5
 800642a:	d10c      	bne.n	8006446 <HAL_RCC_OscConfig+0x356>
 800642c:	4b61      	ldr	r3, [pc, #388]	@ (80065b4 <HAL_RCC_OscConfig+0x4c4>)
 800642e:	6a1b      	ldr	r3, [r3, #32]
 8006430:	4a60      	ldr	r2, [pc, #384]	@ (80065b4 <HAL_RCC_OscConfig+0x4c4>)
 8006432:	f043 0304 	orr.w	r3, r3, #4
 8006436:	6213      	str	r3, [r2, #32]
 8006438:	4b5e      	ldr	r3, [pc, #376]	@ (80065b4 <HAL_RCC_OscConfig+0x4c4>)
 800643a:	6a1b      	ldr	r3, [r3, #32]
 800643c:	4a5d      	ldr	r2, [pc, #372]	@ (80065b4 <HAL_RCC_OscConfig+0x4c4>)
 800643e:	f043 0301 	orr.w	r3, r3, #1
 8006442:	6213      	str	r3, [r2, #32]
 8006444:	e00b      	b.n	800645e <HAL_RCC_OscConfig+0x36e>
 8006446:	4b5b      	ldr	r3, [pc, #364]	@ (80065b4 <HAL_RCC_OscConfig+0x4c4>)
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	4a5a      	ldr	r2, [pc, #360]	@ (80065b4 <HAL_RCC_OscConfig+0x4c4>)
 800644c:	f023 0301 	bic.w	r3, r3, #1
 8006450:	6213      	str	r3, [r2, #32]
 8006452:	4b58      	ldr	r3, [pc, #352]	@ (80065b4 <HAL_RCC_OscConfig+0x4c4>)
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	4a57      	ldr	r2, [pc, #348]	@ (80065b4 <HAL_RCC_OscConfig+0x4c4>)
 8006458:	f023 0304 	bic.w	r3, r3, #4
 800645c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d015      	beq.n	8006492 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006466:	f7fd f855 	bl	8003514 <HAL_GetTick>
 800646a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800646c:	e00a      	b.n	8006484 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800646e:	f7fd f851 	bl	8003514 <HAL_GetTick>
 8006472:	4602      	mov	r2, r0
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	1ad3      	subs	r3, r2, r3
 8006478:	f241 3288 	movw	r2, #5000	@ 0x1388
 800647c:	4293      	cmp	r3, r2
 800647e:	d901      	bls.n	8006484 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e0b1      	b.n	80065e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006484:	4b4b      	ldr	r3, [pc, #300]	@ (80065b4 <HAL_RCC_OscConfig+0x4c4>)
 8006486:	6a1b      	ldr	r3, [r3, #32]
 8006488:	f003 0302 	and.w	r3, r3, #2
 800648c:	2b00      	cmp	r3, #0
 800648e:	d0ee      	beq.n	800646e <HAL_RCC_OscConfig+0x37e>
 8006490:	e014      	b.n	80064bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006492:	f7fd f83f 	bl	8003514 <HAL_GetTick>
 8006496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006498:	e00a      	b.n	80064b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800649a:	f7fd f83b 	bl	8003514 <HAL_GetTick>
 800649e:	4602      	mov	r2, r0
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d901      	bls.n	80064b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80064ac:	2303      	movs	r3, #3
 80064ae:	e09b      	b.n	80065e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064b0:	4b40      	ldr	r3, [pc, #256]	@ (80065b4 <HAL_RCC_OscConfig+0x4c4>)
 80064b2:	6a1b      	ldr	r3, [r3, #32]
 80064b4:	f003 0302 	and.w	r3, r3, #2
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d1ee      	bne.n	800649a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80064bc:	7dfb      	ldrb	r3, [r7, #23]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d105      	bne.n	80064ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064c2:	4b3c      	ldr	r3, [pc, #240]	@ (80065b4 <HAL_RCC_OscConfig+0x4c4>)
 80064c4:	69db      	ldr	r3, [r3, #28]
 80064c6:	4a3b      	ldr	r2, [pc, #236]	@ (80065b4 <HAL_RCC_OscConfig+0x4c4>)
 80064c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	69db      	ldr	r3, [r3, #28]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f000 8087 	beq.w	80065e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80064d8:	4b36      	ldr	r3, [pc, #216]	@ (80065b4 <HAL_RCC_OscConfig+0x4c4>)
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	f003 030c 	and.w	r3, r3, #12
 80064e0:	2b08      	cmp	r3, #8
 80064e2:	d061      	beq.n	80065a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	69db      	ldr	r3, [r3, #28]
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d146      	bne.n	800657a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064ec:	4b33      	ldr	r3, [pc, #204]	@ (80065bc <HAL_RCC_OscConfig+0x4cc>)
 80064ee:	2200      	movs	r2, #0
 80064f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064f2:	f7fd f80f 	bl	8003514 <HAL_GetTick>
 80064f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80064f8:	e008      	b.n	800650c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064fa:	f7fd f80b 	bl	8003514 <HAL_GetTick>
 80064fe:	4602      	mov	r2, r0
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	2b02      	cmp	r3, #2
 8006506:	d901      	bls.n	800650c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e06d      	b.n	80065e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800650c:	4b29      	ldr	r3, [pc, #164]	@ (80065b4 <HAL_RCC_OscConfig+0x4c4>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1f0      	bne.n	80064fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a1b      	ldr	r3, [r3, #32]
 800651c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006520:	d108      	bne.n	8006534 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006522:	4b24      	ldr	r3, [pc, #144]	@ (80065b4 <HAL_RCC_OscConfig+0x4c4>)
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	4921      	ldr	r1, [pc, #132]	@ (80065b4 <HAL_RCC_OscConfig+0x4c4>)
 8006530:	4313      	orrs	r3, r2
 8006532:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006534:	4b1f      	ldr	r3, [pc, #124]	@ (80065b4 <HAL_RCC_OscConfig+0x4c4>)
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a19      	ldr	r1, [r3, #32]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006544:	430b      	orrs	r3, r1
 8006546:	491b      	ldr	r1, [pc, #108]	@ (80065b4 <HAL_RCC_OscConfig+0x4c4>)
 8006548:	4313      	orrs	r3, r2
 800654a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800654c:	4b1b      	ldr	r3, [pc, #108]	@ (80065bc <HAL_RCC_OscConfig+0x4cc>)
 800654e:	2201      	movs	r2, #1
 8006550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006552:	f7fc ffdf 	bl	8003514 <HAL_GetTick>
 8006556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006558:	e008      	b.n	800656c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800655a:	f7fc ffdb 	bl	8003514 <HAL_GetTick>
 800655e:	4602      	mov	r2, r0
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	2b02      	cmp	r3, #2
 8006566:	d901      	bls.n	800656c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	e03d      	b.n	80065e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800656c:	4b11      	ldr	r3, [pc, #68]	@ (80065b4 <HAL_RCC_OscConfig+0x4c4>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006574:	2b00      	cmp	r3, #0
 8006576:	d0f0      	beq.n	800655a <HAL_RCC_OscConfig+0x46a>
 8006578:	e035      	b.n	80065e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800657a:	4b10      	ldr	r3, [pc, #64]	@ (80065bc <HAL_RCC_OscConfig+0x4cc>)
 800657c:	2200      	movs	r2, #0
 800657e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006580:	f7fc ffc8 	bl	8003514 <HAL_GetTick>
 8006584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006586:	e008      	b.n	800659a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006588:	f7fc ffc4 	bl	8003514 <HAL_GetTick>
 800658c:	4602      	mov	r2, r0
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	2b02      	cmp	r3, #2
 8006594:	d901      	bls.n	800659a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e026      	b.n	80065e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800659a:	4b06      	ldr	r3, [pc, #24]	@ (80065b4 <HAL_RCC_OscConfig+0x4c4>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1f0      	bne.n	8006588 <HAL_RCC_OscConfig+0x498>
 80065a6:	e01e      	b.n	80065e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	69db      	ldr	r3, [r3, #28]
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d107      	bne.n	80065c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e019      	b.n	80065e8 <HAL_RCC_OscConfig+0x4f8>
 80065b4:	40021000 	.word	0x40021000
 80065b8:	40007000 	.word	0x40007000
 80065bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80065c0:	4b0b      	ldr	r3, [pc, #44]	@ (80065f0 <HAL_RCC_OscConfig+0x500>)
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a1b      	ldr	r3, [r3, #32]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d106      	bne.n	80065e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065de:	429a      	cmp	r2, r3
 80065e0:	d001      	beq.n	80065e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e000      	b.n	80065e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3718      	adds	r7, #24
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	40021000 	.word	0x40021000

080065f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d101      	bne.n	8006608 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	e0d0      	b.n	80067aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006608:	4b6a      	ldr	r3, [pc, #424]	@ (80067b4 <HAL_RCC_ClockConfig+0x1c0>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0307 	and.w	r3, r3, #7
 8006610:	683a      	ldr	r2, [r7, #0]
 8006612:	429a      	cmp	r2, r3
 8006614:	d910      	bls.n	8006638 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006616:	4b67      	ldr	r3, [pc, #412]	@ (80067b4 <HAL_RCC_ClockConfig+0x1c0>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f023 0207 	bic.w	r2, r3, #7
 800661e:	4965      	ldr	r1, [pc, #404]	@ (80067b4 <HAL_RCC_ClockConfig+0x1c0>)
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	4313      	orrs	r3, r2
 8006624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006626:	4b63      	ldr	r3, [pc, #396]	@ (80067b4 <HAL_RCC_ClockConfig+0x1c0>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 0307 	and.w	r3, r3, #7
 800662e:	683a      	ldr	r2, [r7, #0]
 8006630:	429a      	cmp	r2, r3
 8006632:	d001      	beq.n	8006638 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e0b8      	b.n	80067aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0302 	and.w	r3, r3, #2
 8006640:	2b00      	cmp	r3, #0
 8006642:	d020      	beq.n	8006686 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 0304 	and.w	r3, r3, #4
 800664c:	2b00      	cmp	r3, #0
 800664e:	d005      	beq.n	800665c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006650:	4b59      	ldr	r3, [pc, #356]	@ (80067b8 <HAL_RCC_ClockConfig+0x1c4>)
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	4a58      	ldr	r2, [pc, #352]	@ (80067b8 <HAL_RCC_ClockConfig+0x1c4>)
 8006656:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800665a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0308 	and.w	r3, r3, #8
 8006664:	2b00      	cmp	r3, #0
 8006666:	d005      	beq.n	8006674 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006668:	4b53      	ldr	r3, [pc, #332]	@ (80067b8 <HAL_RCC_ClockConfig+0x1c4>)
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	4a52      	ldr	r2, [pc, #328]	@ (80067b8 <HAL_RCC_ClockConfig+0x1c4>)
 800666e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006672:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006674:	4b50      	ldr	r3, [pc, #320]	@ (80067b8 <HAL_RCC_ClockConfig+0x1c4>)
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	494d      	ldr	r1, [pc, #308]	@ (80067b8 <HAL_RCC_ClockConfig+0x1c4>)
 8006682:	4313      	orrs	r3, r2
 8006684:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 0301 	and.w	r3, r3, #1
 800668e:	2b00      	cmp	r3, #0
 8006690:	d040      	beq.n	8006714 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	2b01      	cmp	r3, #1
 8006698:	d107      	bne.n	80066aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800669a:	4b47      	ldr	r3, [pc, #284]	@ (80067b8 <HAL_RCC_ClockConfig+0x1c4>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d115      	bne.n	80066d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e07f      	b.n	80067aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	2b02      	cmp	r3, #2
 80066b0:	d107      	bne.n	80066c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066b2:	4b41      	ldr	r3, [pc, #260]	@ (80067b8 <HAL_RCC_ClockConfig+0x1c4>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d109      	bne.n	80066d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e073      	b.n	80067aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066c2:	4b3d      	ldr	r3, [pc, #244]	@ (80067b8 <HAL_RCC_ClockConfig+0x1c4>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 0302 	and.w	r3, r3, #2
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d101      	bne.n	80066d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e06b      	b.n	80067aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80066d2:	4b39      	ldr	r3, [pc, #228]	@ (80067b8 <HAL_RCC_ClockConfig+0x1c4>)
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	f023 0203 	bic.w	r2, r3, #3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	4936      	ldr	r1, [pc, #216]	@ (80067b8 <HAL_RCC_ClockConfig+0x1c4>)
 80066e0:	4313      	orrs	r3, r2
 80066e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80066e4:	f7fc ff16 	bl	8003514 <HAL_GetTick>
 80066e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066ea:	e00a      	b.n	8006702 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066ec:	f7fc ff12 	bl	8003514 <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d901      	bls.n	8006702 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	e053      	b.n	80067aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006702:	4b2d      	ldr	r3, [pc, #180]	@ (80067b8 <HAL_RCC_ClockConfig+0x1c4>)
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	f003 020c 	and.w	r2, r3, #12
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	429a      	cmp	r2, r3
 8006712:	d1eb      	bne.n	80066ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006714:	4b27      	ldr	r3, [pc, #156]	@ (80067b4 <HAL_RCC_ClockConfig+0x1c0>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 0307 	and.w	r3, r3, #7
 800671c:	683a      	ldr	r2, [r7, #0]
 800671e:	429a      	cmp	r2, r3
 8006720:	d210      	bcs.n	8006744 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006722:	4b24      	ldr	r3, [pc, #144]	@ (80067b4 <HAL_RCC_ClockConfig+0x1c0>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f023 0207 	bic.w	r2, r3, #7
 800672a:	4922      	ldr	r1, [pc, #136]	@ (80067b4 <HAL_RCC_ClockConfig+0x1c0>)
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	4313      	orrs	r3, r2
 8006730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006732:	4b20      	ldr	r3, [pc, #128]	@ (80067b4 <HAL_RCC_ClockConfig+0x1c0>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0307 	and.w	r3, r3, #7
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	429a      	cmp	r2, r3
 800673e:	d001      	beq.n	8006744 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e032      	b.n	80067aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0304 	and.w	r3, r3, #4
 800674c:	2b00      	cmp	r3, #0
 800674e:	d008      	beq.n	8006762 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006750:	4b19      	ldr	r3, [pc, #100]	@ (80067b8 <HAL_RCC_ClockConfig+0x1c4>)
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	4916      	ldr	r1, [pc, #88]	@ (80067b8 <HAL_RCC_ClockConfig+0x1c4>)
 800675e:	4313      	orrs	r3, r2
 8006760:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 0308 	and.w	r3, r3, #8
 800676a:	2b00      	cmp	r3, #0
 800676c:	d009      	beq.n	8006782 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800676e:	4b12      	ldr	r3, [pc, #72]	@ (80067b8 <HAL_RCC_ClockConfig+0x1c4>)
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	00db      	lsls	r3, r3, #3
 800677c:	490e      	ldr	r1, [pc, #56]	@ (80067b8 <HAL_RCC_ClockConfig+0x1c4>)
 800677e:	4313      	orrs	r3, r2
 8006780:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006782:	f000 f821 	bl	80067c8 <HAL_RCC_GetSysClockFreq>
 8006786:	4602      	mov	r2, r0
 8006788:	4b0b      	ldr	r3, [pc, #44]	@ (80067b8 <HAL_RCC_ClockConfig+0x1c4>)
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	091b      	lsrs	r3, r3, #4
 800678e:	f003 030f 	and.w	r3, r3, #15
 8006792:	490a      	ldr	r1, [pc, #40]	@ (80067bc <HAL_RCC_ClockConfig+0x1c8>)
 8006794:	5ccb      	ldrb	r3, [r1, r3]
 8006796:	fa22 f303 	lsr.w	r3, r2, r3
 800679a:	4a09      	ldr	r2, [pc, #36]	@ (80067c0 <HAL_RCC_ClockConfig+0x1cc>)
 800679c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800679e:	4b09      	ldr	r3, [pc, #36]	@ (80067c4 <HAL_RCC_ClockConfig+0x1d0>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7fc fe74 	bl	8003490 <HAL_InitTick>

  return HAL_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	40022000 	.word	0x40022000
 80067b8:	40021000 	.word	0x40021000
 80067bc:	08009b50 	.word	0x08009b50
 80067c0:	2000000c 	.word	0x2000000c
 80067c4:	20000010 	.word	0x20000010

080067c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b087      	sub	sp, #28
 80067cc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80067ce:	2300      	movs	r3, #0
 80067d0:	60fb      	str	r3, [r7, #12]
 80067d2:	2300      	movs	r3, #0
 80067d4:	60bb      	str	r3, [r7, #8]
 80067d6:	2300      	movs	r3, #0
 80067d8:	617b      	str	r3, [r7, #20]
 80067da:	2300      	movs	r3, #0
 80067dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80067de:	2300      	movs	r3, #0
 80067e0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80067e2:	4b1e      	ldr	r3, [pc, #120]	@ (800685c <HAL_RCC_GetSysClockFreq+0x94>)
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f003 030c 	and.w	r3, r3, #12
 80067ee:	2b04      	cmp	r3, #4
 80067f0:	d002      	beq.n	80067f8 <HAL_RCC_GetSysClockFreq+0x30>
 80067f2:	2b08      	cmp	r3, #8
 80067f4:	d003      	beq.n	80067fe <HAL_RCC_GetSysClockFreq+0x36>
 80067f6:	e027      	b.n	8006848 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80067f8:	4b19      	ldr	r3, [pc, #100]	@ (8006860 <HAL_RCC_GetSysClockFreq+0x98>)
 80067fa:	613b      	str	r3, [r7, #16]
      break;
 80067fc:	e027      	b.n	800684e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	0c9b      	lsrs	r3, r3, #18
 8006802:	f003 030f 	and.w	r3, r3, #15
 8006806:	4a17      	ldr	r2, [pc, #92]	@ (8006864 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006808:	5cd3      	ldrb	r3, [r2, r3]
 800680a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d010      	beq.n	8006838 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006816:	4b11      	ldr	r3, [pc, #68]	@ (800685c <HAL_RCC_GetSysClockFreq+0x94>)
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	0c5b      	lsrs	r3, r3, #17
 800681c:	f003 0301 	and.w	r3, r3, #1
 8006820:	4a11      	ldr	r2, [pc, #68]	@ (8006868 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006822:	5cd3      	ldrb	r3, [r2, r3]
 8006824:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a0d      	ldr	r2, [pc, #52]	@ (8006860 <HAL_RCC_GetSysClockFreq+0x98>)
 800682a:	fb03 f202 	mul.w	r2, r3, r2
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	fbb2 f3f3 	udiv	r3, r2, r3
 8006834:	617b      	str	r3, [r7, #20]
 8006836:	e004      	b.n	8006842 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4a0c      	ldr	r2, [pc, #48]	@ (800686c <HAL_RCC_GetSysClockFreq+0xa4>)
 800683c:	fb02 f303 	mul.w	r3, r2, r3
 8006840:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	613b      	str	r3, [r7, #16]
      break;
 8006846:	e002      	b.n	800684e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006848:	4b05      	ldr	r3, [pc, #20]	@ (8006860 <HAL_RCC_GetSysClockFreq+0x98>)
 800684a:	613b      	str	r3, [r7, #16]
      break;
 800684c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800684e:	693b      	ldr	r3, [r7, #16]
}
 8006850:	4618      	mov	r0, r3
 8006852:	371c      	adds	r7, #28
 8006854:	46bd      	mov	sp, r7
 8006856:	bc80      	pop	{r7}
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	40021000 	.word	0x40021000
 8006860:	007a1200 	.word	0x007a1200
 8006864:	08009b68 	.word	0x08009b68
 8006868:	08009b78 	.word	0x08009b78
 800686c:	003d0900 	.word	0x003d0900

08006870 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006870:	b480      	push	{r7}
 8006872:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006874:	4b02      	ldr	r3, [pc, #8]	@ (8006880 <HAL_RCC_GetHCLKFreq+0x10>)
 8006876:	681b      	ldr	r3, [r3, #0]
}
 8006878:	4618      	mov	r0, r3
 800687a:	46bd      	mov	sp, r7
 800687c:	bc80      	pop	{r7}
 800687e:	4770      	bx	lr
 8006880:	2000000c 	.word	0x2000000c

08006884 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006888:	f7ff fff2 	bl	8006870 <HAL_RCC_GetHCLKFreq>
 800688c:	4602      	mov	r2, r0
 800688e:	4b05      	ldr	r3, [pc, #20]	@ (80068a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	0a1b      	lsrs	r3, r3, #8
 8006894:	f003 0307 	and.w	r3, r3, #7
 8006898:	4903      	ldr	r1, [pc, #12]	@ (80068a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800689a:	5ccb      	ldrb	r3, [r1, r3]
 800689c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	40021000 	.word	0x40021000
 80068a8:	08009b60 	.word	0x08009b60

080068ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80068b0:	f7ff ffde 	bl	8006870 <HAL_RCC_GetHCLKFreq>
 80068b4:	4602      	mov	r2, r0
 80068b6:	4b05      	ldr	r3, [pc, #20]	@ (80068cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	0adb      	lsrs	r3, r3, #11
 80068bc:	f003 0307 	and.w	r3, r3, #7
 80068c0:	4903      	ldr	r1, [pc, #12]	@ (80068d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80068c2:	5ccb      	ldrb	r3, [r1, r3]
 80068c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	40021000 	.word	0x40021000
 80068d0:	08009b60 	.word	0x08009b60

080068d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b085      	sub	sp, #20
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80068dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006908 <RCC_Delay+0x34>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a0a      	ldr	r2, [pc, #40]	@ (800690c <RCC_Delay+0x38>)
 80068e2:	fba2 2303 	umull	r2, r3, r2, r3
 80068e6:	0a5b      	lsrs	r3, r3, #9
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	fb02 f303 	mul.w	r3, r2, r3
 80068ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80068f0:	bf00      	nop
  }
  while (Delay --);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	1e5a      	subs	r2, r3, #1
 80068f6:	60fa      	str	r2, [r7, #12]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d1f9      	bne.n	80068f0 <RCC_Delay+0x1c>
}
 80068fc:	bf00      	nop
 80068fe:	bf00      	nop
 8006900:	3714      	adds	r7, #20
 8006902:	46bd      	mov	sp, r7
 8006904:	bc80      	pop	{r7}
 8006906:	4770      	bx	lr
 8006908:	2000000c 	.word	0x2000000c
 800690c:	10624dd3 	.word	0x10624dd3

08006910 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d101      	bne.n	8006922 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e041      	b.n	80069a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b00      	cmp	r3, #0
 800692c:	d106      	bne.n	800693c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f7fc fad8 	bl	8002eec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2202      	movs	r2, #2
 8006940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	3304      	adds	r3, #4
 800694c:	4619      	mov	r1, r3
 800694e:	4610      	mov	r0, r2
 8006950:	f000 fd6e 	bl	8007430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3708      	adds	r7, #8
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
	...

080069b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d001      	beq.n	80069c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e044      	b.n	8006a52 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2202      	movs	r2, #2
 80069cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68da      	ldr	r2, [r3, #12]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f042 0201 	orr.w	r2, r2, #1
 80069de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a1d      	ldr	r2, [pc, #116]	@ (8006a5c <HAL_TIM_Base_Start_IT+0xac>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d018      	beq.n	8006a1c <HAL_TIM_Base_Start_IT+0x6c>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a1c      	ldr	r2, [pc, #112]	@ (8006a60 <HAL_TIM_Base_Start_IT+0xb0>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d013      	beq.n	8006a1c <HAL_TIM_Base_Start_IT+0x6c>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069fc:	d00e      	beq.n	8006a1c <HAL_TIM_Base_Start_IT+0x6c>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a18      	ldr	r2, [pc, #96]	@ (8006a64 <HAL_TIM_Base_Start_IT+0xb4>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d009      	beq.n	8006a1c <HAL_TIM_Base_Start_IT+0x6c>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a16      	ldr	r2, [pc, #88]	@ (8006a68 <HAL_TIM_Base_Start_IT+0xb8>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d004      	beq.n	8006a1c <HAL_TIM_Base_Start_IT+0x6c>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a15      	ldr	r2, [pc, #84]	@ (8006a6c <HAL_TIM_Base_Start_IT+0xbc>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d111      	bne.n	8006a40 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f003 0307 	and.w	r3, r3, #7
 8006a26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2b06      	cmp	r3, #6
 8006a2c:	d010      	beq.n	8006a50 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f042 0201 	orr.w	r2, r2, #1
 8006a3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a3e:	e007      	b.n	8006a50 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f042 0201 	orr.w	r2, r2, #1
 8006a4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3714      	adds	r7, #20
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bc80      	pop	{r7}
 8006a5a:	4770      	bx	lr
 8006a5c:	40012c00 	.word	0x40012c00
 8006a60:	40013400 	.word	0x40013400
 8006a64:	40000400 	.word	0x40000400
 8006a68:	40000800 	.word	0x40000800
 8006a6c:	40000c00 	.word	0x40000c00

08006a70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d101      	bne.n	8006a82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e041      	b.n	8006b06 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d106      	bne.n	8006a9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 f839 	bl	8006b0e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2202      	movs	r2, #2
 8006aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	3304      	adds	r3, #4
 8006aac:	4619      	mov	r1, r3
 8006aae:	4610      	mov	r0, r2
 8006ab0:	f000 fcbe 	bl	8007430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3708      	adds	r7, #8
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}

08006b0e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006b0e:	b480      	push	{r7}
 8006b10:	b083      	sub	sp, #12
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006b16:	bf00      	nop
 8006b18:	370c      	adds	r7, #12
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bc80      	pop	{r7}
 8006b1e:	4770      	bx	lr

08006b20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d109      	bne.n	8006b44 <HAL_TIM_PWM_Start+0x24>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	bf14      	ite	ne
 8006b3c:	2301      	movne	r3, #1
 8006b3e:	2300      	moveq	r3, #0
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	e022      	b.n	8006b8a <HAL_TIM_PWM_Start+0x6a>
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	2b04      	cmp	r3, #4
 8006b48:	d109      	bne.n	8006b5e <HAL_TIM_PWM_Start+0x3e>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	bf14      	ite	ne
 8006b56:	2301      	movne	r3, #1
 8006b58:	2300      	moveq	r3, #0
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	e015      	b.n	8006b8a <HAL_TIM_PWM_Start+0x6a>
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	2b08      	cmp	r3, #8
 8006b62:	d109      	bne.n	8006b78 <HAL_TIM_PWM_Start+0x58>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	bf14      	ite	ne
 8006b70:	2301      	movne	r3, #1
 8006b72:	2300      	moveq	r3, #0
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	e008      	b.n	8006b8a <HAL_TIM_PWM_Start+0x6a>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	bf14      	ite	ne
 8006b84:	2301      	movne	r3, #1
 8006b86:	2300      	moveq	r3, #0
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d001      	beq.n	8006b92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e072      	b.n	8006c78 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d104      	bne.n	8006ba2 <HAL_TIM_PWM_Start+0x82>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2202      	movs	r2, #2
 8006b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ba0:	e013      	b.n	8006bca <HAL_TIM_PWM_Start+0xaa>
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	2b04      	cmp	r3, #4
 8006ba6:	d104      	bne.n	8006bb2 <HAL_TIM_PWM_Start+0x92>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2202      	movs	r2, #2
 8006bac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006bb0:	e00b      	b.n	8006bca <HAL_TIM_PWM_Start+0xaa>
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	2b08      	cmp	r3, #8
 8006bb6:	d104      	bne.n	8006bc2 <HAL_TIM_PWM_Start+0xa2>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2202      	movs	r2, #2
 8006bbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006bc0:	e003      	b.n	8006bca <HAL_TIM_PWM_Start+0xaa>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2202      	movs	r2, #2
 8006bc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	6839      	ldr	r1, [r7, #0]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f000 fef4 	bl	80079c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a28      	ldr	r2, [pc, #160]	@ (8006c80 <HAL_TIM_PWM_Start+0x160>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d004      	beq.n	8006bec <HAL_TIM_PWM_Start+0xcc>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a27      	ldr	r2, [pc, #156]	@ (8006c84 <HAL_TIM_PWM_Start+0x164>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d101      	bne.n	8006bf0 <HAL_TIM_PWM_Start+0xd0>
 8006bec:	2301      	movs	r3, #1
 8006bee:	e000      	b.n	8006bf2 <HAL_TIM_PWM_Start+0xd2>
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d007      	beq.n	8006c06 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006c04:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a1d      	ldr	r2, [pc, #116]	@ (8006c80 <HAL_TIM_PWM_Start+0x160>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d018      	beq.n	8006c42 <HAL_TIM_PWM_Start+0x122>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a1b      	ldr	r2, [pc, #108]	@ (8006c84 <HAL_TIM_PWM_Start+0x164>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d013      	beq.n	8006c42 <HAL_TIM_PWM_Start+0x122>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c22:	d00e      	beq.n	8006c42 <HAL_TIM_PWM_Start+0x122>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a17      	ldr	r2, [pc, #92]	@ (8006c88 <HAL_TIM_PWM_Start+0x168>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d009      	beq.n	8006c42 <HAL_TIM_PWM_Start+0x122>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a16      	ldr	r2, [pc, #88]	@ (8006c8c <HAL_TIM_PWM_Start+0x16c>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d004      	beq.n	8006c42 <HAL_TIM_PWM_Start+0x122>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a14      	ldr	r2, [pc, #80]	@ (8006c90 <HAL_TIM_PWM_Start+0x170>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d111      	bne.n	8006c66 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	f003 0307 	and.w	r3, r3, #7
 8006c4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2b06      	cmp	r3, #6
 8006c52:	d010      	beq.n	8006c76 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f042 0201 	orr.w	r2, r2, #1
 8006c62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c64:	e007      	b.n	8006c76 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f042 0201 	orr.w	r2, r2, #1
 8006c74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3710      	adds	r7, #16
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	40012c00 	.word	0x40012c00
 8006c84:	40013400 	.word	0x40013400
 8006c88:	40000400 	.word	0x40000400
 8006c8c:	40000800 	.word	0x40000800
 8006c90:	40000c00 	.word	0x40000c00

08006c94 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b086      	sub	sp, #24
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d101      	bne.n	8006ca8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e093      	b.n	8006dd0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d106      	bne.n	8006cc2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f7fc f963 	bl	8002f88 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2202      	movs	r2, #2
 8006cc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	6812      	ldr	r2, [r2, #0]
 8006cd4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006cd8:	f023 0307 	bic.w	r3, r3, #7
 8006cdc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	3304      	adds	r3, #4
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	4610      	mov	r0, r2
 8006cea:	f000 fba1 	bl	8007430 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	699b      	ldr	r3, [r3, #24]
 8006cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	6a1b      	ldr	r3, [r3, #32]
 8006d04:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d16:	f023 0303 	bic.w	r3, r3, #3
 8006d1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	689a      	ldr	r2, [r3, #8]
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	021b      	lsls	r3, r3, #8
 8006d26:	4313      	orrs	r3, r2
 8006d28:	693a      	ldr	r2, [r7, #16]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006d34:	f023 030c 	bic.w	r3, r3, #12
 8006d38:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d40:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	68da      	ldr	r2, [r3, #12]
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	69db      	ldr	r3, [r3, #28]
 8006d4e:	021b      	lsls	r3, r3, #8
 8006d50:	4313      	orrs	r3, r2
 8006d52:	693a      	ldr	r2, [r7, #16]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	011a      	lsls	r2, r3, #4
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	6a1b      	ldr	r3, [r3, #32]
 8006d62:	031b      	lsls	r3, r3, #12
 8006d64:	4313      	orrs	r3, r2
 8006d66:	693a      	ldr	r2, [r7, #16]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006d72:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	685a      	ldr	r2, [r3, #4]
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	695b      	ldr	r3, [r3, #20]
 8006d7c:	011b      	lsls	r3, r3, #4
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	697a      	ldr	r2, [r7, #20]
 8006d8c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	693a      	ldr	r2, [r7, #16]
 8006d94:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2201      	movs	r2, #1
 8006da2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2201      	movs	r2, #1
 8006dba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3718      	adds	r7, #24
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006de8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006df0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006df8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006e00:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d110      	bne.n	8006e2a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e08:	7bfb      	ldrb	r3, [r7, #15]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d102      	bne.n	8006e14 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006e0e:	7b7b      	ldrb	r3, [r7, #13]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d001      	beq.n	8006e18 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e069      	b.n	8006eec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2202      	movs	r2, #2
 8006e1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2202      	movs	r2, #2
 8006e24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e28:	e031      	b.n	8006e8e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	2b04      	cmp	r3, #4
 8006e2e:	d110      	bne.n	8006e52 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e30:	7bbb      	ldrb	r3, [r7, #14]
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d102      	bne.n	8006e3c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006e36:	7b3b      	ldrb	r3, [r7, #12]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d001      	beq.n	8006e40 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e055      	b.n	8006eec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2202      	movs	r2, #2
 8006e44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2202      	movs	r2, #2
 8006e4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006e50:	e01d      	b.n	8006e8e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e52:	7bfb      	ldrb	r3, [r7, #15]
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d108      	bne.n	8006e6a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e58:	7bbb      	ldrb	r3, [r7, #14]
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d105      	bne.n	8006e6a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e5e:	7b7b      	ldrb	r3, [r7, #13]
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d102      	bne.n	8006e6a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006e64:	7b3b      	ldrb	r3, [r7, #12]
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d001      	beq.n	8006e6e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e03e      	b.n	8006eec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2202      	movs	r2, #2
 8006e72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2202      	movs	r2, #2
 8006e7a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2202      	movs	r2, #2
 8006e82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2202      	movs	r2, #2
 8006e8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d003      	beq.n	8006e9c <HAL_TIM_Encoder_Start+0xc4>
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	2b04      	cmp	r3, #4
 8006e98:	d008      	beq.n	8006eac <HAL_TIM_Encoder_Start+0xd4>
 8006e9a:	e00f      	b.n	8006ebc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	2100      	movs	r1, #0
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f000 fd8b 	bl	80079c0 <TIM_CCxChannelCmd>
      break;
 8006eaa:	e016      	b.n	8006eda <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	2104      	movs	r1, #4
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f000 fd83 	bl	80079c0 <TIM_CCxChannelCmd>
      break;
 8006eba:	e00e      	b.n	8006eda <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	2100      	movs	r1, #0
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f000 fd7b 	bl	80079c0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	2104      	movs	r1, #4
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f000 fd74 	bl	80079c0 <TIM_CCxChannelCmd>
      break;
 8006ed8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f042 0201 	orr.w	r2, r2, #1
 8006ee8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006eea:	2300      	movs	r3, #0
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	f003 0302 	and.w	r3, r3, #2
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d020      	beq.n	8006f58 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f003 0302 	and.w	r3, r3, #2
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d01b      	beq.n	8006f58 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f06f 0202 	mvn.w	r2, #2
 8006f28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	f003 0303 	and.w	r3, r3, #3
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d003      	beq.n	8006f46 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 fa5a 	bl	80073f8 <HAL_TIM_IC_CaptureCallback>
 8006f44:	e005      	b.n	8006f52 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fa4d 	bl	80073e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 fa5c 	bl	800740a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	f003 0304 	and.w	r3, r3, #4
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d020      	beq.n	8006fa4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f003 0304 	and.w	r3, r3, #4
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d01b      	beq.n	8006fa4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f06f 0204 	mvn.w	r2, #4
 8006f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2202      	movs	r2, #2
 8006f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d003      	beq.n	8006f92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 fa34 	bl	80073f8 <HAL_TIM_IC_CaptureCallback>
 8006f90:	e005      	b.n	8006f9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 fa27 	bl	80073e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 fa36 	bl	800740a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	f003 0308 	and.w	r3, r3, #8
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d020      	beq.n	8006ff0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f003 0308 	and.w	r3, r3, #8
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d01b      	beq.n	8006ff0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f06f 0208 	mvn.w	r2, #8
 8006fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2204      	movs	r2, #4
 8006fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	69db      	ldr	r3, [r3, #28]
 8006fce:	f003 0303 	and.w	r3, r3, #3
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d003      	beq.n	8006fde <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fa0e 	bl	80073f8 <HAL_TIM_IC_CaptureCallback>
 8006fdc:	e005      	b.n	8006fea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 fa01 	bl	80073e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 fa10 	bl	800740a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	f003 0310 	and.w	r3, r3, #16
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d020      	beq.n	800703c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f003 0310 	and.w	r3, r3, #16
 8007000:	2b00      	cmp	r3, #0
 8007002:	d01b      	beq.n	800703c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f06f 0210 	mvn.w	r2, #16
 800700c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2208      	movs	r2, #8
 8007012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	69db      	ldr	r3, [r3, #28]
 800701a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800701e:	2b00      	cmp	r3, #0
 8007020:	d003      	beq.n	800702a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 f9e8 	bl	80073f8 <HAL_TIM_IC_CaptureCallback>
 8007028:	e005      	b.n	8007036 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 f9db 	bl	80073e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 f9ea 	bl	800740a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	f003 0301 	and.w	r3, r3, #1
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00c      	beq.n	8007060 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f003 0301 	and.w	r3, r3, #1
 800704c:	2b00      	cmp	r3, #0
 800704e:	d007      	beq.n	8007060 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f06f 0201 	mvn.w	r2, #1
 8007058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f7fa ff88 	bl	8001f70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00c      	beq.n	8007084 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007070:	2b00      	cmp	r3, #0
 8007072:	d007      	beq.n	8007084 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800707c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 fe34 	bl	8007cec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00c      	beq.n	80070a8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007094:	2b00      	cmp	r3, #0
 8007096:	d007      	beq.n	80070a8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80070a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 f9ba 	bl	800741c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	f003 0320 	and.w	r3, r3, #32
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00c      	beq.n	80070cc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f003 0320 	and.w	r3, r3, #32
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d007      	beq.n	80070cc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f06f 0220 	mvn.w	r2, #32
 80070c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 fe07 	bl	8007cda <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070cc:	bf00      	nop
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b086      	sub	sp, #24
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070e0:	2300      	movs	r3, #0
 80070e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d101      	bne.n	80070f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80070ee:	2302      	movs	r3, #2
 80070f0:	e0ae      	b.n	8007250 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2201      	movs	r2, #1
 80070f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2b0c      	cmp	r3, #12
 80070fe:	f200 809f 	bhi.w	8007240 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007102:	a201      	add	r2, pc, #4	@ (adr r2, 8007108 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007108:	0800713d 	.word	0x0800713d
 800710c:	08007241 	.word	0x08007241
 8007110:	08007241 	.word	0x08007241
 8007114:	08007241 	.word	0x08007241
 8007118:	0800717d 	.word	0x0800717d
 800711c:	08007241 	.word	0x08007241
 8007120:	08007241 	.word	0x08007241
 8007124:	08007241 	.word	0x08007241
 8007128:	080071bf 	.word	0x080071bf
 800712c:	08007241 	.word	0x08007241
 8007130:	08007241 	.word	0x08007241
 8007134:	08007241 	.word	0x08007241
 8007138:	080071ff 	.word	0x080071ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68b9      	ldr	r1, [r7, #8]
 8007142:	4618      	mov	r0, r3
 8007144:	f000 f9fa 	bl	800753c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	699a      	ldr	r2, [r3, #24]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f042 0208 	orr.w	r2, r2, #8
 8007156:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	699a      	ldr	r2, [r3, #24]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f022 0204 	bic.w	r2, r2, #4
 8007166:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	6999      	ldr	r1, [r3, #24]
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	691a      	ldr	r2, [r3, #16]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	430a      	orrs	r2, r1
 8007178:	619a      	str	r2, [r3, #24]
      break;
 800717a:	e064      	b.n	8007246 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68b9      	ldr	r1, [r7, #8]
 8007182:	4618      	mov	r0, r3
 8007184:	f000 fa4a 	bl	800761c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	699a      	ldr	r2, [r3, #24]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	699a      	ldr	r2, [r3, #24]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	6999      	ldr	r1, [r3, #24]
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	021a      	lsls	r2, r3, #8
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	430a      	orrs	r2, r1
 80071ba:	619a      	str	r2, [r3, #24]
      break;
 80071bc:	e043      	b.n	8007246 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	68b9      	ldr	r1, [r7, #8]
 80071c4:	4618      	mov	r0, r3
 80071c6:	f000 fa9d 	bl	8007704 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	69da      	ldr	r2, [r3, #28]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f042 0208 	orr.w	r2, r2, #8
 80071d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	69da      	ldr	r2, [r3, #28]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f022 0204 	bic.w	r2, r2, #4
 80071e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	69d9      	ldr	r1, [r3, #28]
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	691a      	ldr	r2, [r3, #16]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	430a      	orrs	r2, r1
 80071fa:	61da      	str	r2, [r3, #28]
      break;
 80071fc:	e023      	b.n	8007246 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68b9      	ldr	r1, [r7, #8]
 8007204:	4618      	mov	r0, r3
 8007206:	f000 faf1 	bl	80077ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	69da      	ldr	r2, [r3, #28]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007218:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	69da      	ldr	r2, [r3, #28]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007228:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	69d9      	ldr	r1, [r3, #28]
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	021a      	lsls	r2, r3, #8
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	430a      	orrs	r2, r1
 800723c:	61da      	str	r2, [r3, #28]
      break;
 800723e:	e002      	b.n	8007246 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	75fb      	strb	r3, [r7, #23]
      break;
 8007244:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800724e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007250:	4618      	mov	r0, r3
 8007252:	3718      	adds	r7, #24
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007262:	2300      	movs	r3, #0
 8007264:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800726c:	2b01      	cmp	r3, #1
 800726e:	d101      	bne.n	8007274 <HAL_TIM_ConfigClockSource+0x1c>
 8007270:	2302      	movs	r3, #2
 8007272:	e0b4      	b.n	80073de <HAL_TIM_ConfigClockSource+0x186>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2202      	movs	r2, #2
 8007280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007292:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800729a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68ba      	ldr	r2, [r7, #8]
 80072a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072ac:	d03e      	beq.n	800732c <HAL_TIM_ConfigClockSource+0xd4>
 80072ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072b2:	f200 8087 	bhi.w	80073c4 <HAL_TIM_ConfigClockSource+0x16c>
 80072b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072ba:	f000 8086 	beq.w	80073ca <HAL_TIM_ConfigClockSource+0x172>
 80072be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072c2:	d87f      	bhi.n	80073c4 <HAL_TIM_ConfigClockSource+0x16c>
 80072c4:	2b70      	cmp	r3, #112	@ 0x70
 80072c6:	d01a      	beq.n	80072fe <HAL_TIM_ConfigClockSource+0xa6>
 80072c8:	2b70      	cmp	r3, #112	@ 0x70
 80072ca:	d87b      	bhi.n	80073c4 <HAL_TIM_ConfigClockSource+0x16c>
 80072cc:	2b60      	cmp	r3, #96	@ 0x60
 80072ce:	d050      	beq.n	8007372 <HAL_TIM_ConfigClockSource+0x11a>
 80072d0:	2b60      	cmp	r3, #96	@ 0x60
 80072d2:	d877      	bhi.n	80073c4 <HAL_TIM_ConfigClockSource+0x16c>
 80072d4:	2b50      	cmp	r3, #80	@ 0x50
 80072d6:	d03c      	beq.n	8007352 <HAL_TIM_ConfigClockSource+0xfa>
 80072d8:	2b50      	cmp	r3, #80	@ 0x50
 80072da:	d873      	bhi.n	80073c4 <HAL_TIM_ConfigClockSource+0x16c>
 80072dc:	2b40      	cmp	r3, #64	@ 0x40
 80072de:	d058      	beq.n	8007392 <HAL_TIM_ConfigClockSource+0x13a>
 80072e0:	2b40      	cmp	r3, #64	@ 0x40
 80072e2:	d86f      	bhi.n	80073c4 <HAL_TIM_ConfigClockSource+0x16c>
 80072e4:	2b30      	cmp	r3, #48	@ 0x30
 80072e6:	d064      	beq.n	80073b2 <HAL_TIM_ConfigClockSource+0x15a>
 80072e8:	2b30      	cmp	r3, #48	@ 0x30
 80072ea:	d86b      	bhi.n	80073c4 <HAL_TIM_ConfigClockSource+0x16c>
 80072ec:	2b20      	cmp	r3, #32
 80072ee:	d060      	beq.n	80073b2 <HAL_TIM_ConfigClockSource+0x15a>
 80072f0:	2b20      	cmp	r3, #32
 80072f2:	d867      	bhi.n	80073c4 <HAL_TIM_ConfigClockSource+0x16c>
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d05c      	beq.n	80073b2 <HAL_TIM_ConfigClockSource+0x15a>
 80072f8:	2b10      	cmp	r3, #16
 80072fa:	d05a      	beq.n	80073b2 <HAL_TIM_ConfigClockSource+0x15a>
 80072fc:	e062      	b.n	80073c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800730e:	f000 fb38 	bl	8007982 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007320:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	68ba      	ldr	r2, [r7, #8]
 8007328:	609a      	str	r2, [r3, #8]
      break;
 800732a:	e04f      	b.n	80073cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800733c:	f000 fb21 	bl	8007982 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	689a      	ldr	r2, [r3, #8]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800734e:	609a      	str	r2, [r3, #8]
      break;
 8007350:	e03c      	b.n	80073cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800735e:	461a      	mov	r2, r3
 8007360:	f000 fa98 	bl	8007894 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2150      	movs	r1, #80	@ 0x50
 800736a:	4618      	mov	r0, r3
 800736c:	f000 faef 	bl	800794e <TIM_ITRx_SetConfig>
      break;
 8007370:	e02c      	b.n	80073cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800737e:	461a      	mov	r2, r3
 8007380:	f000 fab6 	bl	80078f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2160      	movs	r1, #96	@ 0x60
 800738a:	4618      	mov	r0, r3
 800738c:	f000 fadf 	bl	800794e <TIM_ITRx_SetConfig>
      break;
 8007390:	e01c      	b.n	80073cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800739e:	461a      	mov	r2, r3
 80073a0:	f000 fa78 	bl	8007894 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2140      	movs	r1, #64	@ 0x40
 80073aa:	4618      	mov	r0, r3
 80073ac:	f000 facf 	bl	800794e <TIM_ITRx_SetConfig>
      break;
 80073b0:	e00c      	b.n	80073cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4619      	mov	r1, r3
 80073bc:	4610      	mov	r0, r2
 80073be:	f000 fac6 	bl	800794e <TIM_ITRx_SetConfig>
      break;
 80073c2:	e003      	b.n	80073cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	73fb      	strb	r3, [r7, #15]
      break;
 80073c8:	e000      	b.n	80073cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80073ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80073dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073e6:	b480      	push	{r7}
 80073e8:	b083      	sub	sp, #12
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80073ee:	bf00      	nop
 80073f0:	370c      	adds	r7, #12
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bc80      	pop	{r7}
 80073f6:	4770      	bx	lr

080073f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007400:	bf00      	nop
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	bc80      	pop	{r7}
 8007408:	4770      	bx	lr

0800740a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800740a:	b480      	push	{r7}
 800740c:	b083      	sub	sp, #12
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007412:	bf00      	nop
 8007414:	370c      	adds	r7, #12
 8007416:	46bd      	mov	sp, r7
 8007418:	bc80      	pop	{r7}
 800741a:	4770      	bx	lr

0800741c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007424:	bf00      	nop
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	bc80      	pop	{r7}
 800742c:	4770      	bx	lr
	...

08007430 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007430:	b480      	push	{r7}
 8007432:	b085      	sub	sp, #20
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	4a39      	ldr	r2, [pc, #228]	@ (8007528 <TIM_Base_SetConfig+0xf8>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d013      	beq.n	8007470 <TIM_Base_SetConfig+0x40>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4a38      	ldr	r2, [pc, #224]	@ (800752c <TIM_Base_SetConfig+0xfc>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d00f      	beq.n	8007470 <TIM_Base_SetConfig+0x40>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007456:	d00b      	beq.n	8007470 <TIM_Base_SetConfig+0x40>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4a35      	ldr	r2, [pc, #212]	@ (8007530 <TIM_Base_SetConfig+0x100>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d007      	beq.n	8007470 <TIM_Base_SetConfig+0x40>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4a34      	ldr	r2, [pc, #208]	@ (8007534 <TIM_Base_SetConfig+0x104>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d003      	beq.n	8007470 <TIM_Base_SetConfig+0x40>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	4a33      	ldr	r2, [pc, #204]	@ (8007538 <TIM_Base_SetConfig+0x108>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d108      	bne.n	8007482 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007476:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	4313      	orrs	r3, r2
 8007480:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4a28      	ldr	r2, [pc, #160]	@ (8007528 <TIM_Base_SetConfig+0xf8>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d013      	beq.n	80074b2 <TIM_Base_SetConfig+0x82>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a27      	ldr	r2, [pc, #156]	@ (800752c <TIM_Base_SetConfig+0xfc>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d00f      	beq.n	80074b2 <TIM_Base_SetConfig+0x82>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007498:	d00b      	beq.n	80074b2 <TIM_Base_SetConfig+0x82>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a24      	ldr	r2, [pc, #144]	@ (8007530 <TIM_Base_SetConfig+0x100>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d007      	beq.n	80074b2 <TIM_Base_SetConfig+0x82>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4a23      	ldr	r2, [pc, #140]	@ (8007534 <TIM_Base_SetConfig+0x104>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d003      	beq.n	80074b2 <TIM_Base_SetConfig+0x82>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a22      	ldr	r2, [pc, #136]	@ (8007538 <TIM_Base_SetConfig+0x108>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d108      	bne.n	80074c4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	4313      	orrs	r3, r2
 80074c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	695b      	ldr	r3, [r3, #20]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	689a      	ldr	r2, [r3, #8]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4a0f      	ldr	r2, [pc, #60]	@ (8007528 <TIM_Base_SetConfig+0xf8>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d003      	beq.n	80074f8 <TIM_Base_SetConfig+0xc8>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	4a0e      	ldr	r2, [pc, #56]	@ (800752c <TIM_Base_SetConfig+0xfc>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d103      	bne.n	8007500 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	691a      	ldr	r2, [r3, #16]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	f003 0301 	and.w	r3, r3, #1
 800750e:	2b00      	cmp	r3, #0
 8007510:	d005      	beq.n	800751e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	f023 0201 	bic.w	r2, r3, #1
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	611a      	str	r2, [r3, #16]
  }
}
 800751e:	bf00      	nop
 8007520:	3714      	adds	r7, #20
 8007522:	46bd      	mov	sp, r7
 8007524:	bc80      	pop	{r7}
 8007526:	4770      	bx	lr
 8007528:	40012c00 	.word	0x40012c00
 800752c:	40013400 	.word	0x40013400
 8007530:	40000400 	.word	0x40000400
 8007534:	40000800 	.word	0x40000800
 8007538:	40000c00 	.word	0x40000c00

0800753c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800753c:	b480      	push	{r7}
 800753e:	b087      	sub	sp, #28
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a1b      	ldr	r3, [r3, #32]
 800754a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6a1b      	ldr	r3, [r3, #32]
 8007550:	f023 0201 	bic.w	r2, r3, #1
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	699b      	ldr	r3, [r3, #24]
 8007562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800756a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f023 0303 	bic.w	r3, r3, #3
 8007572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68fa      	ldr	r2, [r7, #12]
 800757a:	4313      	orrs	r3, r2
 800757c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	f023 0302 	bic.w	r3, r3, #2
 8007584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	697a      	ldr	r2, [r7, #20]
 800758c:	4313      	orrs	r3, r2
 800758e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	4a20      	ldr	r2, [pc, #128]	@ (8007614 <TIM_OC1_SetConfig+0xd8>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d003      	beq.n	80075a0 <TIM_OC1_SetConfig+0x64>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a1f      	ldr	r2, [pc, #124]	@ (8007618 <TIM_OC1_SetConfig+0xdc>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d10c      	bne.n	80075ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	f023 0308 	bic.w	r3, r3, #8
 80075a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	697a      	ldr	r2, [r7, #20]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	f023 0304 	bic.w	r3, r3, #4
 80075b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a15      	ldr	r2, [pc, #84]	@ (8007614 <TIM_OC1_SetConfig+0xd8>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d003      	beq.n	80075ca <TIM_OC1_SetConfig+0x8e>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a14      	ldr	r2, [pc, #80]	@ (8007618 <TIM_OC1_SetConfig+0xdc>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d111      	bne.n	80075ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80075d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	695b      	ldr	r3, [r3, #20]
 80075de:	693a      	ldr	r2, [r7, #16]
 80075e0:	4313      	orrs	r3, r2
 80075e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	699b      	ldr	r3, [r3, #24]
 80075e8:	693a      	ldr	r2, [r7, #16]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	693a      	ldr	r2, [r7, #16]
 80075f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	68fa      	ldr	r2, [r7, #12]
 80075f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	685a      	ldr	r2, [r3, #4]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	697a      	ldr	r2, [r7, #20]
 8007606:	621a      	str	r2, [r3, #32]
}
 8007608:	bf00      	nop
 800760a:	371c      	adds	r7, #28
 800760c:	46bd      	mov	sp, r7
 800760e:	bc80      	pop	{r7}
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop
 8007614:	40012c00 	.word	0x40012c00
 8007618:	40013400 	.word	0x40013400

0800761c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800761c:	b480      	push	{r7}
 800761e:	b087      	sub	sp, #28
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a1b      	ldr	r3, [r3, #32]
 800762a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6a1b      	ldr	r3, [r3, #32]
 8007630:	f023 0210 	bic.w	r2, r3, #16
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	699b      	ldr	r3, [r3, #24]
 8007642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800764a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007652:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	021b      	lsls	r3, r3, #8
 800765a:	68fa      	ldr	r2, [r7, #12]
 800765c:	4313      	orrs	r3, r2
 800765e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	f023 0320 	bic.w	r3, r3, #32
 8007666:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	011b      	lsls	r3, r3, #4
 800766e:	697a      	ldr	r2, [r7, #20]
 8007670:	4313      	orrs	r3, r2
 8007672:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a21      	ldr	r2, [pc, #132]	@ (80076fc <TIM_OC2_SetConfig+0xe0>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d003      	beq.n	8007684 <TIM_OC2_SetConfig+0x68>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a20      	ldr	r2, [pc, #128]	@ (8007700 <TIM_OC2_SetConfig+0xe4>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d10d      	bne.n	80076a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800768a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	011b      	lsls	r3, r3, #4
 8007692:	697a      	ldr	r2, [r7, #20]
 8007694:	4313      	orrs	r3, r2
 8007696:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800769e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a16      	ldr	r2, [pc, #88]	@ (80076fc <TIM_OC2_SetConfig+0xe0>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d003      	beq.n	80076b0 <TIM_OC2_SetConfig+0x94>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a15      	ldr	r2, [pc, #84]	@ (8007700 <TIM_OC2_SetConfig+0xe4>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d113      	bne.n	80076d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80076b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80076be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	695b      	ldr	r3, [r3, #20]
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	693a      	ldr	r2, [r7, #16]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	699b      	ldr	r3, [r3, #24]
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	693a      	ldr	r2, [r7, #16]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	693a      	ldr	r2, [r7, #16]
 80076dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	68fa      	ldr	r2, [r7, #12]
 80076e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	685a      	ldr	r2, [r3, #4]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	697a      	ldr	r2, [r7, #20]
 80076f0:	621a      	str	r2, [r3, #32]
}
 80076f2:	bf00      	nop
 80076f4:	371c      	adds	r7, #28
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bc80      	pop	{r7}
 80076fa:	4770      	bx	lr
 80076fc:	40012c00 	.word	0x40012c00
 8007700:	40013400 	.word	0x40013400

08007704 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007704:	b480      	push	{r7}
 8007706:	b087      	sub	sp, #28
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a1b      	ldr	r3, [r3, #32]
 8007712:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6a1b      	ldr	r3, [r3, #32]
 8007718:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	69db      	ldr	r3, [r3, #28]
 800772a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f023 0303 	bic.w	r3, r3, #3
 800773a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	4313      	orrs	r3, r2
 8007744:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800774c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	021b      	lsls	r3, r3, #8
 8007754:	697a      	ldr	r2, [r7, #20]
 8007756:	4313      	orrs	r3, r2
 8007758:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a21      	ldr	r2, [pc, #132]	@ (80077e4 <TIM_OC3_SetConfig+0xe0>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d003      	beq.n	800776a <TIM_OC3_SetConfig+0x66>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a20      	ldr	r2, [pc, #128]	@ (80077e8 <TIM_OC3_SetConfig+0xe4>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d10d      	bne.n	8007786 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007770:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	021b      	lsls	r3, r3, #8
 8007778:	697a      	ldr	r2, [r7, #20]
 800777a:	4313      	orrs	r3, r2
 800777c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007784:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4a16      	ldr	r2, [pc, #88]	@ (80077e4 <TIM_OC3_SetConfig+0xe0>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d003      	beq.n	8007796 <TIM_OC3_SetConfig+0x92>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4a15      	ldr	r2, [pc, #84]	@ (80077e8 <TIM_OC3_SetConfig+0xe4>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d113      	bne.n	80077be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800779c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80077a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	695b      	ldr	r3, [r3, #20]
 80077aa:	011b      	lsls	r3, r3, #4
 80077ac:	693a      	ldr	r2, [r7, #16]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	699b      	ldr	r3, [r3, #24]
 80077b6:	011b      	lsls	r3, r3, #4
 80077b8:	693a      	ldr	r2, [r7, #16]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	693a      	ldr	r2, [r7, #16]
 80077c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	68fa      	ldr	r2, [r7, #12]
 80077c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	685a      	ldr	r2, [r3, #4]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	697a      	ldr	r2, [r7, #20]
 80077d6:	621a      	str	r2, [r3, #32]
}
 80077d8:	bf00      	nop
 80077da:	371c      	adds	r7, #28
 80077dc:	46bd      	mov	sp, r7
 80077de:	bc80      	pop	{r7}
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	40012c00 	.word	0x40012c00
 80077e8:	40013400 	.word	0x40013400

080077ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b087      	sub	sp, #28
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a1b      	ldr	r3, [r3, #32]
 80077fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6a1b      	ldr	r3, [r3, #32]
 8007800:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	69db      	ldr	r3, [r3, #28]
 8007812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800781a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007822:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	021b      	lsls	r3, r3, #8
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	4313      	orrs	r3, r2
 800782e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007836:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	031b      	lsls	r3, r3, #12
 800783e:	693a      	ldr	r2, [r7, #16]
 8007840:	4313      	orrs	r3, r2
 8007842:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a11      	ldr	r2, [pc, #68]	@ (800788c <TIM_OC4_SetConfig+0xa0>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d003      	beq.n	8007854 <TIM_OC4_SetConfig+0x68>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a10      	ldr	r2, [pc, #64]	@ (8007890 <TIM_OC4_SetConfig+0xa4>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d109      	bne.n	8007868 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800785a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	695b      	ldr	r3, [r3, #20]
 8007860:	019b      	lsls	r3, r3, #6
 8007862:	697a      	ldr	r2, [r7, #20]
 8007864:	4313      	orrs	r3, r2
 8007866:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	697a      	ldr	r2, [r7, #20]
 800786c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	685a      	ldr	r2, [r3, #4]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	693a      	ldr	r2, [r7, #16]
 8007880:	621a      	str	r2, [r3, #32]
}
 8007882:	bf00      	nop
 8007884:	371c      	adds	r7, #28
 8007886:	46bd      	mov	sp, r7
 8007888:	bc80      	pop	{r7}
 800788a:	4770      	bx	lr
 800788c:	40012c00 	.word	0x40012c00
 8007890:	40013400 	.word	0x40013400

08007894 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007894:	b480      	push	{r7}
 8007896:	b087      	sub	sp, #28
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6a1b      	ldr	r3, [r3, #32]
 80078a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6a1b      	ldr	r3, [r3, #32]
 80078aa:	f023 0201 	bic.w	r2, r3, #1
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	699b      	ldr	r3, [r3, #24]
 80078b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80078be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	011b      	lsls	r3, r3, #4
 80078c4:	693a      	ldr	r2, [r7, #16]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	f023 030a 	bic.w	r3, r3, #10
 80078d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80078d2:	697a      	ldr	r2, [r7, #20]
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	693a      	ldr	r2, [r7, #16]
 80078de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	697a      	ldr	r2, [r7, #20]
 80078e4:	621a      	str	r2, [r3, #32]
}
 80078e6:	bf00      	nop
 80078e8:	371c      	adds	r7, #28
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bc80      	pop	{r7}
 80078ee:	4770      	bx	lr

080078f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b087      	sub	sp, #28
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6a1b      	ldr	r3, [r3, #32]
 8007900:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6a1b      	ldr	r3, [r3, #32]
 8007906:	f023 0210 	bic.w	r2, r3, #16
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	699b      	ldr	r3, [r3, #24]
 8007912:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800791a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	031b      	lsls	r3, r3, #12
 8007920:	693a      	ldr	r2, [r7, #16]
 8007922:	4313      	orrs	r3, r2
 8007924:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800792c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	011b      	lsls	r3, r3, #4
 8007932:	697a      	ldr	r2, [r7, #20]
 8007934:	4313      	orrs	r3, r2
 8007936:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	693a      	ldr	r2, [r7, #16]
 800793c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	697a      	ldr	r2, [r7, #20]
 8007942:	621a      	str	r2, [r3, #32]
}
 8007944:	bf00      	nop
 8007946:	371c      	adds	r7, #28
 8007948:	46bd      	mov	sp, r7
 800794a:	bc80      	pop	{r7}
 800794c:	4770      	bx	lr

0800794e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800794e:	b480      	push	{r7}
 8007950:	b085      	sub	sp, #20
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007964:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007966:	683a      	ldr	r2, [r7, #0]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	4313      	orrs	r3, r2
 800796c:	f043 0307 	orr.w	r3, r3, #7
 8007970:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	609a      	str	r2, [r3, #8]
}
 8007978:	bf00      	nop
 800797a:	3714      	adds	r7, #20
 800797c:	46bd      	mov	sp, r7
 800797e:	bc80      	pop	{r7}
 8007980:	4770      	bx	lr

08007982 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007982:	b480      	push	{r7}
 8007984:	b087      	sub	sp, #28
 8007986:	af00      	add	r7, sp, #0
 8007988:	60f8      	str	r0, [r7, #12]
 800798a:	60b9      	str	r1, [r7, #8]
 800798c:	607a      	str	r2, [r7, #4]
 800798e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800799c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	021a      	lsls	r2, r3, #8
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	431a      	orrs	r2, r3
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	4313      	orrs	r3, r2
 80079aa:	697a      	ldr	r2, [r7, #20]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	697a      	ldr	r2, [r7, #20]
 80079b4:	609a      	str	r2, [r3, #8]
}
 80079b6:	bf00      	nop
 80079b8:	371c      	adds	r7, #28
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bc80      	pop	{r7}
 80079be:	4770      	bx	lr

080079c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b087      	sub	sp, #28
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	f003 031f 	and.w	r3, r3, #31
 80079d2:	2201      	movs	r2, #1
 80079d4:	fa02 f303 	lsl.w	r3, r2, r3
 80079d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6a1a      	ldr	r2, [r3, #32]
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	43db      	mvns	r3, r3
 80079e2:	401a      	ands	r2, r3
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6a1a      	ldr	r2, [r3, #32]
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	f003 031f 	and.w	r3, r3, #31
 80079f2:	6879      	ldr	r1, [r7, #4]
 80079f4:	fa01 f303 	lsl.w	r3, r1, r3
 80079f8:	431a      	orrs	r2, r3
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	621a      	str	r2, [r3, #32]
}
 80079fe:	bf00      	nop
 8007a00:	371c      	adds	r7, #28
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bc80      	pop	{r7}
 8007a06:	4770      	bx	lr

08007a08 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d109      	bne.n	8007a2c <HAL_TIMEx_PWMN_Start+0x24>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	bf14      	ite	ne
 8007a24:	2301      	movne	r3, #1
 8007a26:	2300      	moveq	r3, #0
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	e022      	b.n	8007a72 <HAL_TIMEx_PWMN_Start+0x6a>
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	2b04      	cmp	r3, #4
 8007a30:	d109      	bne.n	8007a46 <HAL_TIMEx_PWMN_Start+0x3e>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	bf14      	ite	ne
 8007a3e:	2301      	movne	r3, #1
 8007a40:	2300      	moveq	r3, #0
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	e015      	b.n	8007a72 <HAL_TIMEx_PWMN_Start+0x6a>
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	2b08      	cmp	r3, #8
 8007a4a:	d109      	bne.n	8007a60 <HAL_TIMEx_PWMN_Start+0x58>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	bf14      	ite	ne
 8007a58:	2301      	movne	r3, #1
 8007a5a:	2300      	moveq	r3, #0
 8007a5c:	b2db      	uxtb	r3, r3
 8007a5e:	e008      	b.n	8007a72 <HAL_TIMEx_PWMN_Start+0x6a>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	bf14      	ite	ne
 8007a6c:	2301      	movne	r3, #1
 8007a6e:	2300      	moveq	r3, #0
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d001      	beq.n	8007a7a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	e063      	b.n	8007b42 <HAL_TIMEx_PWMN_Start+0x13a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d104      	bne.n	8007a8a <HAL_TIMEx_PWMN_Start+0x82>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2202      	movs	r2, #2
 8007a84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a88:	e013      	b.n	8007ab2 <HAL_TIMEx_PWMN_Start+0xaa>
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	2b04      	cmp	r3, #4
 8007a8e:	d104      	bne.n	8007a9a <HAL_TIMEx_PWMN_Start+0x92>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2202      	movs	r2, #2
 8007a94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007a98:	e00b      	b.n	8007ab2 <HAL_TIMEx_PWMN_Start+0xaa>
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	2b08      	cmp	r3, #8
 8007a9e:	d104      	bne.n	8007aaa <HAL_TIMEx_PWMN_Start+0xa2>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2202      	movs	r2, #2
 8007aa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007aa8:	e003      	b.n	8007ab2 <HAL_TIMEx_PWMN_Start+0xaa>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2202      	movs	r2, #2
 8007aae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2204      	movs	r2, #4
 8007ab8:	6839      	ldr	r1, [r7, #0]
 8007aba:	4618      	mov	r0, r3
 8007abc:	f000 f91f 	bl	8007cfe <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007ace:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a1d      	ldr	r2, [pc, #116]	@ (8007b4c <HAL_TIMEx_PWMN_Start+0x144>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d018      	beq.n	8007b0c <HAL_TIMEx_PWMN_Start+0x104>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a1c      	ldr	r2, [pc, #112]	@ (8007b50 <HAL_TIMEx_PWMN_Start+0x148>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d013      	beq.n	8007b0c <HAL_TIMEx_PWMN_Start+0x104>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007aec:	d00e      	beq.n	8007b0c <HAL_TIMEx_PWMN_Start+0x104>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a18      	ldr	r2, [pc, #96]	@ (8007b54 <HAL_TIMEx_PWMN_Start+0x14c>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d009      	beq.n	8007b0c <HAL_TIMEx_PWMN_Start+0x104>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a16      	ldr	r2, [pc, #88]	@ (8007b58 <HAL_TIMEx_PWMN_Start+0x150>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d004      	beq.n	8007b0c <HAL_TIMEx_PWMN_Start+0x104>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a15      	ldr	r2, [pc, #84]	@ (8007b5c <HAL_TIMEx_PWMN_Start+0x154>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d111      	bne.n	8007b30 <HAL_TIMEx_PWMN_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	f003 0307 	and.w	r3, r3, #7
 8007b16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2b06      	cmp	r3, #6
 8007b1c:	d010      	beq.n	8007b40 <HAL_TIMEx_PWMN_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f042 0201 	orr.w	r2, r2, #1
 8007b2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b2e:	e007      	b.n	8007b40 <HAL_TIMEx_PWMN_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f042 0201 	orr.w	r2, r2, #1
 8007b3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3710      	adds	r7, #16
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	40012c00 	.word	0x40012c00
 8007b50:	40013400 	.word	0x40013400
 8007b54:	40000400 	.word	0x40000400
 8007b58:	40000800 	.word	0x40000800
 8007b5c:	40000c00 	.word	0x40000c00

08007b60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b085      	sub	sp, #20
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d101      	bne.n	8007b78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b74:	2302      	movs	r3, #2
 8007b76:	e050      	b.n	8007c1a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2202      	movs	r2, #2
 8007b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a1b      	ldr	r2, [pc, #108]	@ (8007c24 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d018      	beq.n	8007bee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a19      	ldr	r2, [pc, #100]	@ (8007c28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d013      	beq.n	8007bee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bce:	d00e      	beq.n	8007bee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a15      	ldr	r2, [pc, #84]	@ (8007c2c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d009      	beq.n	8007bee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a14      	ldr	r2, [pc, #80]	@ (8007c30 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d004      	beq.n	8007bee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a12      	ldr	r2, [pc, #72]	@ (8007c34 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d10c      	bne.n	8007c08 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007bf4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	68ba      	ldr	r2, [r7, #8]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	68ba      	ldr	r2, [r7, #8]
 8007c06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3714      	adds	r7, #20
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bc80      	pop	{r7}
 8007c22:	4770      	bx	lr
 8007c24:	40012c00 	.word	0x40012c00
 8007c28:	40013400 	.word	0x40013400
 8007c2c:	40000400 	.word	0x40000400
 8007c30:	40000800 	.word	0x40000800
 8007c34:	40000c00 	.word	0x40000c00

08007c38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007c42:	2300      	movs	r3, #0
 8007c44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d101      	bne.n	8007c54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007c50:	2302      	movs	r3, #2
 8007c52:	e03d      	b.n	8007cd0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	695b      	ldr	r3, [r3, #20]
 8007cac:	4313      	orrs	r3, r2
 8007cae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	69db      	ldr	r3, [r3, #28]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	68fa      	ldr	r2, [r7, #12]
 8007cc4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007cce:	2300      	movs	r3, #0
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3714      	adds	r7, #20
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bc80      	pop	{r7}
 8007cd8:	4770      	bx	lr

08007cda <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007cda:	b480      	push	{r7}
 8007cdc:	b083      	sub	sp, #12
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ce2:	bf00      	nop
 8007ce4:	370c      	adds	r7, #12
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bc80      	pop	{r7}
 8007cea:	4770      	bx	lr

08007cec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007cf4:	bf00      	nop
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bc80      	pop	{r7}
 8007cfc:	4770      	bx	lr

08007cfe <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007cfe:	b480      	push	{r7}
 8007d00:	b087      	sub	sp, #28
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	60f8      	str	r0, [r7, #12]
 8007d06:	60b9      	str	r1, [r7, #8]
 8007d08:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	f003 030f 	and.w	r3, r3, #15
 8007d10:	2204      	movs	r2, #4
 8007d12:	fa02 f303 	lsl.w	r3, r2, r3
 8007d16:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6a1a      	ldr	r2, [r3, #32]
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	43db      	mvns	r3, r3
 8007d20:	401a      	ands	r2, r3
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	6a1a      	ldr	r2, [r3, #32]
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	f003 030f 	and.w	r3, r3, #15
 8007d30:	6879      	ldr	r1, [r7, #4]
 8007d32:	fa01 f303 	lsl.w	r3, r1, r3
 8007d36:	431a      	orrs	r2, r3
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	621a      	str	r2, [r3, #32]
}
 8007d3c:	bf00      	nop
 8007d3e:	371c      	adds	r7, #28
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bc80      	pop	{r7}
 8007d44:	4770      	bx	lr

08007d46 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b082      	sub	sp, #8
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d101      	bne.n	8007d58 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	e042      	b.n	8007dde <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d106      	bne.n	8007d72 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f7fb faa9 	bl	80032c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2224      	movs	r2, #36	@ 0x24
 8007d76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	68da      	ldr	r2, [r3, #12]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007d88:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 fdb8 	bl	8008900 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	691a      	ldr	r2, [r3, #16]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007d9e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	695a      	ldr	r2, [r3, #20]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007dae:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	68da      	ldr	r2, [r3, #12]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007dbe:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2220      	movs	r2, #32
 8007dca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2220      	movs	r2, #32
 8007dd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3708      	adds	r7, #8
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}

08007de6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007de6:	b580      	push	{r7, lr}
 8007de8:	b08a      	sub	sp, #40	@ 0x28
 8007dea:	af02      	add	r7, sp, #8
 8007dec:	60f8      	str	r0, [r7, #12]
 8007dee:	60b9      	str	r1, [r7, #8]
 8007df0:	603b      	str	r3, [r7, #0]
 8007df2:	4613      	mov	r3, r2
 8007df4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007df6:	2300      	movs	r3, #0
 8007df8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	2b20      	cmp	r3, #32
 8007e04:	d175      	bne.n	8007ef2 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d002      	beq.n	8007e12 <HAL_UART_Transmit+0x2c>
 8007e0c:	88fb      	ldrh	r3, [r7, #6]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d101      	bne.n	8007e16 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e06e      	b.n	8007ef4 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2221      	movs	r2, #33	@ 0x21
 8007e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e24:	f7fb fb76 	bl	8003514 <HAL_GetTick>
 8007e28:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	88fa      	ldrh	r2, [r7, #6]
 8007e2e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	88fa      	ldrh	r2, [r7, #6]
 8007e34:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e3e:	d108      	bne.n	8007e52 <HAL_UART_Transmit+0x6c>
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d104      	bne.n	8007e52 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	61bb      	str	r3, [r7, #24]
 8007e50:	e003      	b.n	8007e5a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e56:	2300      	movs	r3, #0
 8007e58:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007e5a:	e02e      	b.n	8007eba <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	9300      	str	r3, [sp, #0]
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	2200      	movs	r2, #0
 8007e64:	2180      	movs	r1, #128	@ 0x80
 8007e66:	68f8      	ldr	r0, [r7, #12]
 8007e68:	f000 fb1d 	bl	80084a6 <UART_WaitOnFlagUntilTimeout>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d005      	beq.n	8007e7e <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2220      	movs	r2, #32
 8007e76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	e03a      	b.n	8007ef4 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d10b      	bne.n	8007e9c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e84:	69bb      	ldr	r3, [r7, #24]
 8007e86:	881b      	ldrh	r3, [r3, #0]
 8007e88:	461a      	mov	r2, r3
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e92:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	3302      	adds	r3, #2
 8007e98:	61bb      	str	r3, [r7, #24]
 8007e9a:	e007      	b.n	8007eac <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	781a      	ldrb	r2, [r3, #0]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	3b01      	subs	r3, #1
 8007eb4:	b29a      	uxth	r2, r3
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d1cb      	bne.n	8007e5c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	9300      	str	r3, [sp, #0]
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	2140      	movs	r1, #64	@ 0x40
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f000 fae9 	bl	80084a6 <UART_WaitOnFlagUntilTimeout>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d005      	beq.n	8007ee6 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2220      	movs	r2, #32
 8007ede:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007ee2:	2303      	movs	r3, #3
 8007ee4:	e006      	b.n	8007ef4 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2220      	movs	r2, #32
 8007eea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	e000      	b.n	8007ef4 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007ef2:	2302      	movs	r3, #2
  }
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3720      	adds	r7, #32
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	4613      	mov	r3, r2
 8007f08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	2b20      	cmp	r3, #32
 8007f14:	d112      	bne.n	8007f3c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d002      	beq.n	8007f22 <HAL_UART_Receive_IT+0x26>
 8007f1c:	88fb      	ldrh	r3, [r7, #6]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d101      	bne.n	8007f26 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	e00b      	b.n	8007f3e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007f2c:	88fb      	ldrh	r3, [r7, #6]
 8007f2e:	461a      	mov	r2, r3
 8007f30:	68b9      	ldr	r1, [r7, #8]
 8007f32:	68f8      	ldr	r0, [r7, #12]
 8007f34:	f000 fb10 	bl	8008558 <UART_Start_Receive_IT>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	e000      	b.n	8007f3e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007f3c:	2302      	movs	r3, #2
  }
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3710      	adds	r7, #16
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
	...

08007f48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b0ba      	sub	sp, #232	@ 0xe8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	695b      	ldr	r3, [r3, #20]
 8007f6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007f74:	2300      	movs	r3, #0
 8007f76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f7e:	f003 030f 	and.w	r3, r3, #15
 8007f82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007f86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d10f      	bne.n	8007fae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f92:	f003 0320 	and.w	r3, r3, #32
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d009      	beq.n	8007fae <HAL_UART_IRQHandler+0x66>
 8007f9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f9e:	f003 0320 	and.w	r3, r3, #32
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d003      	beq.n	8007fae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 fbec 	bl	8008784 <UART_Receive_IT>
      return;
 8007fac:	e25b      	b.n	8008466 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007fae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	f000 80de 	beq.w	8008174 <HAL_UART_IRQHandler+0x22c>
 8007fb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007fbc:	f003 0301 	and.w	r3, r3, #1
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d106      	bne.n	8007fd2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fc8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f000 80d1 	beq.w	8008174 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fd6:	f003 0301 	and.w	r3, r3, #1
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00b      	beq.n	8007ff6 <HAL_UART_IRQHandler+0xae>
 8007fde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d005      	beq.n	8007ff6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fee:	f043 0201 	orr.w	r2, r3, #1
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ffa:	f003 0304 	and.w	r3, r3, #4
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d00b      	beq.n	800801a <HAL_UART_IRQHandler+0xd2>
 8008002:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008006:	f003 0301 	and.w	r3, r3, #1
 800800a:	2b00      	cmp	r3, #0
 800800c:	d005      	beq.n	800801a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008012:	f043 0202 	orr.w	r2, r3, #2
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800801a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800801e:	f003 0302 	and.w	r3, r3, #2
 8008022:	2b00      	cmp	r3, #0
 8008024:	d00b      	beq.n	800803e <HAL_UART_IRQHandler+0xf6>
 8008026:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800802a:	f003 0301 	and.w	r3, r3, #1
 800802e:	2b00      	cmp	r3, #0
 8008030:	d005      	beq.n	800803e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008036:	f043 0204 	orr.w	r2, r3, #4
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800803e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008042:	f003 0308 	and.w	r3, r3, #8
 8008046:	2b00      	cmp	r3, #0
 8008048:	d011      	beq.n	800806e <HAL_UART_IRQHandler+0x126>
 800804a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800804e:	f003 0320 	and.w	r3, r3, #32
 8008052:	2b00      	cmp	r3, #0
 8008054:	d105      	bne.n	8008062 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008056:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800805a:	f003 0301 	and.w	r3, r3, #1
 800805e:	2b00      	cmp	r3, #0
 8008060:	d005      	beq.n	800806e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008066:	f043 0208 	orr.w	r2, r3, #8
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008072:	2b00      	cmp	r3, #0
 8008074:	f000 81f2 	beq.w	800845c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800807c:	f003 0320 	and.w	r3, r3, #32
 8008080:	2b00      	cmp	r3, #0
 8008082:	d008      	beq.n	8008096 <HAL_UART_IRQHandler+0x14e>
 8008084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008088:	f003 0320 	and.w	r3, r3, #32
 800808c:	2b00      	cmp	r3, #0
 800808e:	d002      	beq.n	8008096 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 fb77 	bl	8008784 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	695b      	ldr	r3, [r3, #20]
 800809c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	bf14      	ite	ne
 80080a4:	2301      	movne	r3, #1
 80080a6:	2300      	moveq	r3, #0
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080b2:	f003 0308 	and.w	r3, r3, #8
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d103      	bne.n	80080c2 <HAL_UART_IRQHandler+0x17a>
 80080ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d04f      	beq.n	8008162 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 fa81 	bl	80085ca <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	695b      	ldr	r3, [r3, #20]
 80080ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d041      	beq.n	800815a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	3314      	adds	r3, #20
 80080dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80080e4:	e853 3f00 	ldrex	r3, [r3]
 80080e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80080ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80080f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	3314      	adds	r3, #20
 80080fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008102:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008106:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800810a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800810e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008112:	e841 2300 	strex	r3, r2, [r1]
 8008116:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800811a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800811e:	2b00      	cmp	r3, #0
 8008120:	d1d9      	bne.n	80080d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008126:	2b00      	cmp	r3, #0
 8008128:	d013      	beq.n	8008152 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800812e:	4a7e      	ldr	r2, [pc, #504]	@ (8008328 <HAL_UART_IRQHandler+0x3e0>)
 8008130:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008136:	4618      	mov	r0, r3
 8008138:	f7fb fbda 	bl	80038f0 <HAL_DMA_Abort_IT>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d016      	beq.n	8008170 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008146:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800814c:	4610      	mov	r0, r2
 800814e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008150:	e00e      	b.n	8008170 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 f993 	bl	800847e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008158:	e00a      	b.n	8008170 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 f98f 	bl	800847e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008160:	e006      	b.n	8008170 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 f98b 	bl	800847e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800816e:	e175      	b.n	800845c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008170:	bf00      	nop
    return;
 8008172:	e173      	b.n	800845c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008178:	2b01      	cmp	r3, #1
 800817a:	f040 814f 	bne.w	800841c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800817e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008182:	f003 0310 	and.w	r3, r3, #16
 8008186:	2b00      	cmp	r3, #0
 8008188:	f000 8148 	beq.w	800841c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800818c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008190:	f003 0310 	and.w	r3, r3, #16
 8008194:	2b00      	cmp	r3, #0
 8008196:	f000 8141 	beq.w	800841c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800819a:	2300      	movs	r3, #0
 800819c:	60bb      	str	r3, [r7, #8]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	60bb      	str	r3, [r7, #8]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	60bb      	str	r3, [r7, #8]
 80081ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	695b      	ldr	r3, [r3, #20]
 80081b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	f000 80b6 	beq.w	800832c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80081cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	f000 8145 	beq.w	8008460 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80081da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80081de:	429a      	cmp	r2, r3
 80081e0:	f080 813e 	bcs.w	8008460 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80081ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081f0:	699b      	ldr	r3, [r3, #24]
 80081f2:	2b20      	cmp	r3, #32
 80081f4:	f000 8088 	beq.w	8008308 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	330c      	adds	r3, #12
 80081fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008202:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008206:	e853 3f00 	ldrex	r3, [r3]
 800820a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800820e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008212:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008216:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	330c      	adds	r3, #12
 8008220:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008224:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008228:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008230:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008234:	e841 2300 	strex	r3, r2, [r1]
 8008238:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800823c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008240:	2b00      	cmp	r3, #0
 8008242:	d1d9      	bne.n	80081f8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	3314      	adds	r3, #20
 800824a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800824e:	e853 3f00 	ldrex	r3, [r3]
 8008252:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008254:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008256:	f023 0301 	bic.w	r3, r3, #1
 800825a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	3314      	adds	r3, #20
 8008264:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008268:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800826c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008270:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008274:	e841 2300 	strex	r3, r2, [r1]
 8008278:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800827a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800827c:	2b00      	cmp	r3, #0
 800827e:	d1e1      	bne.n	8008244 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	3314      	adds	r3, #20
 8008286:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008288:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800828a:	e853 3f00 	ldrex	r3, [r3]
 800828e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008290:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008292:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008296:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	3314      	adds	r3, #20
 80082a0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80082a4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80082a6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80082aa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80082ac:	e841 2300 	strex	r3, r2, [r1]
 80082b0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80082b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d1e3      	bne.n	8008280 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2220      	movs	r2, #32
 80082bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	330c      	adds	r3, #12
 80082cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082d0:	e853 3f00 	ldrex	r3, [r3]
 80082d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80082d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80082d8:	f023 0310 	bic.w	r3, r3, #16
 80082dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	330c      	adds	r3, #12
 80082e6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80082ea:	65ba      	str	r2, [r7, #88]	@ 0x58
 80082ec:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80082f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80082f2:	e841 2300 	strex	r3, r2, [r1]
 80082f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80082f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d1e3      	bne.n	80082c6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008302:	4618      	mov	r0, r3
 8008304:	f7fb fab8 	bl	8003878 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2202      	movs	r2, #2
 800830c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008316:	b29b      	uxth	r3, r3
 8008318:	1ad3      	subs	r3, r2, r3
 800831a:	b29b      	uxth	r3, r3
 800831c:	4619      	mov	r1, r3
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 f8b6 	bl	8008490 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008324:	e09c      	b.n	8008460 <HAL_UART_IRQHandler+0x518>
 8008326:	bf00      	nop
 8008328:	0800868f 	.word	0x0800868f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008334:	b29b      	uxth	r3, r3
 8008336:	1ad3      	subs	r3, r2, r3
 8008338:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008340:	b29b      	uxth	r3, r3
 8008342:	2b00      	cmp	r3, #0
 8008344:	f000 808e 	beq.w	8008464 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008348:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800834c:	2b00      	cmp	r3, #0
 800834e:	f000 8089 	beq.w	8008464 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	330c      	adds	r3, #12
 8008358:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800835a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800835c:	e853 3f00 	ldrex	r3, [r3]
 8008360:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008364:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008368:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	330c      	adds	r3, #12
 8008372:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008376:	647a      	str	r2, [r7, #68]	@ 0x44
 8008378:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800837a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800837c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800837e:	e841 2300 	strex	r3, r2, [r1]
 8008382:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008384:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008386:	2b00      	cmp	r3, #0
 8008388:	d1e3      	bne.n	8008352 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	3314      	adds	r3, #20
 8008390:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008394:	e853 3f00 	ldrex	r3, [r3]
 8008398:	623b      	str	r3, [r7, #32]
   return(result);
 800839a:	6a3b      	ldr	r3, [r7, #32]
 800839c:	f023 0301 	bic.w	r3, r3, #1
 80083a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	3314      	adds	r3, #20
 80083aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80083ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80083b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80083b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083b6:	e841 2300 	strex	r3, r2, [r1]
 80083ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80083bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d1e3      	bne.n	800838a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2220      	movs	r2, #32
 80083c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	330c      	adds	r3, #12
 80083d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	e853 3f00 	ldrex	r3, [r3]
 80083de:	60fb      	str	r3, [r7, #12]
   return(result);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f023 0310 	bic.w	r3, r3, #16
 80083e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	330c      	adds	r3, #12
 80083f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80083f4:	61fa      	str	r2, [r7, #28]
 80083f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f8:	69b9      	ldr	r1, [r7, #24]
 80083fa:	69fa      	ldr	r2, [r7, #28]
 80083fc:	e841 2300 	strex	r3, r2, [r1]
 8008400:	617b      	str	r3, [r7, #20]
   return(result);
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d1e3      	bne.n	80083d0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2202      	movs	r2, #2
 800840c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800840e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008412:	4619      	mov	r1, r3
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 f83b 	bl	8008490 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800841a:	e023      	b.n	8008464 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800841c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008420:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008424:	2b00      	cmp	r3, #0
 8008426:	d009      	beq.n	800843c <HAL_UART_IRQHandler+0x4f4>
 8008428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800842c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008430:	2b00      	cmp	r3, #0
 8008432:	d003      	beq.n	800843c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 f93e 	bl	80086b6 <UART_Transmit_IT>
    return;
 800843a:	e014      	b.n	8008466 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800843c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008444:	2b00      	cmp	r3, #0
 8008446:	d00e      	beq.n	8008466 <HAL_UART_IRQHandler+0x51e>
 8008448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800844c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008450:	2b00      	cmp	r3, #0
 8008452:	d008      	beq.n	8008466 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 f97d 	bl	8008754 <UART_EndTransmit_IT>
    return;
 800845a:	e004      	b.n	8008466 <HAL_UART_IRQHandler+0x51e>
    return;
 800845c:	bf00      	nop
 800845e:	e002      	b.n	8008466 <HAL_UART_IRQHandler+0x51e>
      return;
 8008460:	bf00      	nop
 8008462:	e000      	b.n	8008466 <HAL_UART_IRQHandler+0x51e>
      return;
 8008464:	bf00      	nop
  }
}
 8008466:	37e8      	adds	r7, #232	@ 0xe8
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008474:	bf00      	nop
 8008476:	370c      	adds	r7, #12
 8008478:	46bd      	mov	sp, r7
 800847a:	bc80      	pop	{r7}
 800847c:	4770      	bx	lr

0800847e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800847e:	b480      	push	{r7}
 8008480:	b083      	sub	sp, #12
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008486:	bf00      	nop
 8008488:	370c      	adds	r7, #12
 800848a:	46bd      	mov	sp, r7
 800848c:	bc80      	pop	{r7}
 800848e:	4770      	bx	lr

08008490 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	460b      	mov	r3, r1
 800849a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800849c:	bf00      	nop
 800849e:	370c      	adds	r7, #12
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bc80      	pop	{r7}
 80084a4:	4770      	bx	lr

080084a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b086      	sub	sp, #24
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	60f8      	str	r0, [r7, #12]
 80084ae:	60b9      	str	r1, [r7, #8]
 80084b0:	603b      	str	r3, [r7, #0]
 80084b2:	4613      	mov	r3, r2
 80084b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084b6:	e03b      	b.n	8008530 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084b8:	6a3b      	ldr	r3, [r7, #32]
 80084ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80084be:	d037      	beq.n	8008530 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084c0:	f7fb f828 	bl	8003514 <HAL_GetTick>
 80084c4:	4602      	mov	r2, r0
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	1ad3      	subs	r3, r2, r3
 80084ca:	6a3a      	ldr	r2, [r7, #32]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d302      	bcc.n	80084d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80084d0:	6a3b      	ldr	r3, [r7, #32]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d101      	bne.n	80084da <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80084d6:	2303      	movs	r3, #3
 80084d8:	e03a      	b.n	8008550 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	f003 0304 	and.w	r3, r3, #4
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d023      	beq.n	8008530 <UART_WaitOnFlagUntilTimeout+0x8a>
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	2b80      	cmp	r3, #128	@ 0x80
 80084ec:	d020      	beq.n	8008530 <UART_WaitOnFlagUntilTimeout+0x8a>
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	2b40      	cmp	r3, #64	@ 0x40
 80084f2:	d01d      	beq.n	8008530 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f003 0308 	and.w	r3, r3, #8
 80084fe:	2b08      	cmp	r3, #8
 8008500:	d116      	bne.n	8008530 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008502:	2300      	movs	r3, #0
 8008504:	617b      	str	r3, [r7, #20]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	617b      	str	r3, [r7, #20]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	617b      	str	r3, [r7, #20]
 8008516:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008518:	68f8      	ldr	r0, [r7, #12]
 800851a:	f000 f856 	bl	80085ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2208      	movs	r2, #8
 8008522:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2200      	movs	r2, #0
 8008528:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	e00f      	b.n	8008550 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	4013      	ands	r3, r2
 800853a:	68ba      	ldr	r2, [r7, #8]
 800853c:	429a      	cmp	r2, r3
 800853e:	bf0c      	ite	eq
 8008540:	2301      	moveq	r3, #1
 8008542:	2300      	movne	r3, #0
 8008544:	b2db      	uxtb	r3, r3
 8008546:	461a      	mov	r2, r3
 8008548:	79fb      	ldrb	r3, [r7, #7]
 800854a:	429a      	cmp	r2, r3
 800854c:	d0b4      	beq.n	80084b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800854e:	2300      	movs	r3, #0
}
 8008550:	4618      	mov	r0, r3
 8008552:	3718      	adds	r7, #24
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	4613      	mov	r3, r2
 8008564:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	68ba      	ldr	r2, [r7, #8]
 800856a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	88fa      	ldrh	r2, [r7, #6]
 8008570:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	88fa      	ldrh	r2, [r7, #6]
 8008576:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2200      	movs	r2, #0
 800857c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2222      	movs	r2, #34	@ 0x22
 8008582:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	691b      	ldr	r3, [r3, #16]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d007      	beq.n	800859e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	68da      	ldr	r2, [r3, #12]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800859c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	695a      	ldr	r2, [r3, #20]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f042 0201 	orr.w	r2, r2, #1
 80085ac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68da      	ldr	r2, [r3, #12]
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f042 0220 	orr.w	r2, r2, #32
 80085bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80085be:	2300      	movs	r3, #0
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3714      	adds	r7, #20
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bc80      	pop	{r7}
 80085c8:	4770      	bx	lr

080085ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80085ca:	b480      	push	{r7}
 80085cc:	b095      	sub	sp, #84	@ 0x54
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	330c      	adds	r3, #12
 80085d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085dc:	e853 3f00 	ldrex	r3, [r3]
 80085e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80085e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80085e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	330c      	adds	r3, #12
 80085f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80085f2:	643a      	str	r2, [r7, #64]	@ 0x40
 80085f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80085f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80085fa:	e841 2300 	strex	r3, r2, [r1]
 80085fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008602:	2b00      	cmp	r3, #0
 8008604:	d1e5      	bne.n	80085d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	3314      	adds	r3, #20
 800860c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860e:	6a3b      	ldr	r3, [r7, #32]
 8008610:	e853 3f00 	ldrex	r3, [r3]
 8008614:	61fb      	str	r3, [r7, #28]
   return(result);
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	f023 0301 	bic.w	r3, r3, #1
 800861c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	3314      	adds	r3, #20
 8008624:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008626:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008628:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800862c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800862e:	e841 2300 	strex	r3, r2, [r1]
 8008632:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008636:	2b00      	cmp	r3, #0
 8008638:	d1e5      	bne.n	8008606 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800863e:	2b01      	cmp	r3, #1
 8008640:	d119      	bne.n	8008676 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	330c      	adds	r3, #12
 8008648:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	e853 3f00 	ldrex	r3, [r3]
 8008650:	60bb      	str	r3, [r7, #8]
   return(result);
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	f023 0310 	bic.w	r3, r3, #16
 8008658:	647b      	str	r3, [r7, #68]	@ 0x44
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	330c      	adds	r3, #12
 8008660:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008662:	61ba      	str	r2, [r7, #24]
 8008664:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008666:	6979      	ldr	r1, [r7, #20]
 8008668:	69ba      	ldr	r2, [r7, #24]
 800866a:	e841 2300 	strex	r3, r2, [r1]
 800866e:	613b      	str	r3, [r7, #16]
   return(result);
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d1e5      	bne.n	8008642 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2220      	movs	r2, #32
 800867a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008684:	bf00      	nop
 8008686:	3754      	adds	r7, #84	@ 0x54
 8008688:	46bd      	mov	sp, r7
 800868a:	bc80      	pop	{r7}
 800868c:	4770      	bx	lr

0800868e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800868e:	b580      	push	{r7, lr}
 8008690:	b084      	sub	sp, #16
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800869a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2200      	movs	r2, #0
 80086a0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2200      	movs	r2, #0
 80086a6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80086a8:	68f8      	ldr	r0, [r7, #12]
 80086aa:	f7ff fee8 	bl	800847e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086ae:	bf00      	nop
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80086b6:	b480      	push	{r7}
 80086b8:	b085      	sub	sp, #20
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	2b21      	cmp	r3, #33	@ 0x21
 80086c8:	d13e      	bne.n	8008748 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086d2:	d114      	bne.n	80086fe <UART_Transmit_IT+0x48>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	691b      	ldr	r3, [r3, #16]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d110      	bne.n	80086fe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6a1b      	ldr	r3, [r3, #32]
 80086e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	881b      	ldrh	r3, [r3, #0]
 80086e6:	461a      	mov	r2, r3
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80086f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6a1b      	ldr	r3, [r3, #32]
 80086f6:	1c9a      	adds	r2, r3, #2
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	621a      	str	r2, [r3, #32]
 80086fc:	e008      	b.n	8008710 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6a1b      	ldr	r3, [r3, #32]
 8008702:	1c59      	adds	r1, r3, #1
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	6211      	str	r1, [r2, #32]
 8008708:	781a      	ldrb	r2, [r3, #0]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008714:	b29b      	uxth	r3, r3
 8008716:	3b01      	subs	r3, #1
 8008718:	b29b      	uxth	r3, r3
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	4619      	mov	r1, r3
 800871e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008720:	2b00      	cmp	r3, #0
 8008722:	d10f      	bne.n	8008744 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	68da      	ldr	r2, [r3, #12]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008732:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	68da      	ldr	r2, [r3, #12]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008742:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008744:	2300      	movs	r3, #0
 8008746:	e000      	b.n	800874a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008748:	2302      	movs	r3, #2
  }
}
 800874a:	4618      	mov	r0, r3
 800874c:	3714      	adds	r7, #20
 800874e:	46bd      	mov	sp, r7
 8008750:	bc80      	pop	{r7}
 8008752:	4770      	bx	lr

08008754 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	68da      	ldr	r2, [r3, #12]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800876a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2220      	movs	r2, #32
 8008770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f7ff fe79 	bl	800846c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800877a:	2300      	movs	r3, #0
}
 800877c:	4618      	mov	r0, r3
 800877e:	3708      	adds	r7, #8
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b08c      	sub	sp, #48	@ 0x30
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008792:	b2db      	uxtb	r3, r3
 8008794:	2b22      	cmp	r3, #34	@ 0x22
 8008796:	f040 80ae 	bne.w	80088f6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087a2:	d117      	bne.n	80087d4 <UART_Receive_IT+0x50>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	691b      	ldr	r3, [r3, #16]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d113      	bne.n	80087d4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80087ac:	2300      	movs	r3, #0
 80087ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087b4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	b29b      	uxth	r3, r3
 80087be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087c2:	b29a      	uxth	r2, r3
 80087c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087c6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087cc:	1c9a      	adds	r2, r3, #2
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80087d2:	e026      	b.n	8008822 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80087da:	2300      	movs	r3, #0
 80087dc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087e6:	d007      	beq.n	80087f8 <UART_Receive_IT+0x74>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d10a      	bne.n	8008806 <UART_Receive_IT+0x82>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	691b      	ldr	r3, [r3, #16]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d106      	bne.n	8008806 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	b2da      	uxtb	r2, r3
 8008800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008802:	701a      	strb	r2, [r3, #0]
 8008804:	e008      	b.n	8008818 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	b2db      	uxtb	r3, r3
 800880e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008812:	b2da      	uxtb	r2, r3
 8008814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008816:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800881c:	1c5a      	adds	r2, r3, #1
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008826:	b29b      	uxth	r3, r3
 8008828:	3b01      	subs	r3, #1
 800882a:	b29b      	uxth	r3, r3
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	4619      	mov	r1, r3
 8008830:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008832:	2b00      	cmp	r3, #0
 8008834:	d15d      	bne.n	80088f2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	68da      	ldr	r2, [r3, #12]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f022 0220 	bic.w	r2, r2, #32
 8008844:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	68da      	ldr	r2, [r3, #12]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008854:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	695a      	ldr	r2, [r3, #20]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f022 0201 	bic.w	r2, r2, #1
 8008864:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2220      	movs	r2, #32
 800886a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008878:	2b01      	cmp	r3, #1
 800887a:	d135      	bne.n	80088e8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	330c      	adds	r3, #12
 8008888:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	e853 3f00 	ldrex	r3, [r3]
 8008890:	613b      	str	r3, [r7, #16]
   return(result);
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	f023 0310 	bic.w	r3, r3, #16
 8008898:	627b      	str	r3, [r7, #36]	@ 0x24
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	330c      	adds	r3, #12
 80088a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088a2:	623a      	str	r2, [r7, #32]
 80088a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a6:	69f9      	ldr	r1, [r7, #28]
 80088a8:	6a3a      	ldr	r2, [r7, #32]
 80088aa:	e841 2300 	strex	r3, r2, [r1]
 80088ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80088b0:	69bb      	ldr	r3, [r7, #24]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d1e5      	bne.n	8008882 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f003 0310 	and.w	r3, r3, #16
 80088c0:	2b10      	cmp	r3, #16
 80088c2:	d10a      	bne.n	80088da <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80088c4:	2300      	movs	r3, #0
 80088c6:	60fb      	str	r3, [r7, #12]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	60fb      	str	r3, [r7, #12]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	60fb      	str	r3, [r7, #12]
 80088d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80088de:	4619      	mov	r1, r3
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f7ff fdd5 	bl	8008490 <HAL_UARTEx_RxEventCallback>
 80088e6:	e002      	b.n	80088ee <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f7f9 fb73 	bl	8001fd4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80088ee:	2300      	movs	r3, #0
 80088f0:	e002      	b.n	80088f8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80088f2:	2300      	movs	r3, #0
 80088f4:	e000      	b.n	80088f8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80088f6:	2302      	movs	r3, #2
  }
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3730      	adds	r7, #48	@ 0x30
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	68da      	ldr	r2, [r3, #12]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	430a      	orrs	r2, r1
 800891c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	689a      	ldr	r2, [r3, #8]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	691b      	ldr	r3, [r3, #16]
 8008926:	431a      	orrs	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	695b      	ldr	r3, [r3, #20]
 800892c:	4313      	orrs	r3, r2
 800892e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	68db      	ldr	r3, [r3, #12]
 8008936:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800893a:	f023 030c 	bic.w	r3, r3, #12
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	6812      	ldr	r2, [r2, #0]
 8008942:	68b9      	ldr	r1, [r7, #8]
 8008944:	430b      	orrs	r3, r1
 8008946:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	695b      	ldr	r3, [r3, #20]
 800894e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	699a      	ldr	r2, [r3, #24]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	430a      	orrs	r2, r1
 800895c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a2c      	ldr	r2, [pc, #176]	@ (8008a14 <UART_SetConfig+0x114>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d103      	bne.n	8008970 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008968:	f7fd ffa0 	bl	80068ac <HAL_RCC_GetPCLK2Freq>
 800896c:	60f8      	str	r0, [r7, #12]
 800896e:	e002      	b.n	8008976 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008970:	f7fd ff88 	bl	8006884 <HAL_RCC_GetPCLK1Freq>
 8008974:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008976:	68fa      	ldr	r2, [r7, #12]
 8008978:	4613      	mov	r3, r2
 800897a:	009b      	lsls	r3, r3, #2
 800897c:	4413      	add	r3, r2
 800897e:	009a      	lsls	r2, r3, #2
 8008980:	441a      	add	r2, r3
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	fbb2 f3f3 	udiv	r3, r2, r3
 800898c:	4a22      	ldr	r2, [pc, #136]	@ (8008a18 <UART_SetConfig+0x118>)
 800898e:	fba2 2303 	umull	r2, r3, r2, r3
 8008992:	095b      	lsrs	r3, r3, #5
 8008994:	0119      	lsls	r1, r3, #4
 8008996:	68fa      	ldr	r2, [r7, #12]
 8008998:	4613      	mov	r3, r2
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	4413      	add	r3, r2
 800899e:	009a      	lsls	r2, r3, #2
 80089a0:	441a      	add	r2, r3
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	009b      	lsls	r3, r3, #2
 80089a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80089ac:	4b1a      	ldr	r3, [pc, #104]	@ (8008a18 <UART_SetConfig+0x118>)
 80089ae:	fba3 0302 	umull	r0, r3, r3, r2
 80089b2:	095b      	lsrs	r3, r3, #5
 80089b4:	2064      	movs	r0, #100	@ 0x64
 80089b6:	fb00 f303 	mul.w	r3, r0, r3
 80089ba:	1ad3      	subs	r3, r2, r3
 80089bc:	011b      	lsls	r3, r3, #4
 80089be:	3332      	adds	r3, #50	@ 0x32
 80089c0:	4a15      	ldr	r2, [pc, #84]	@ (8008a18 <UART_SetConfig+0x118>)
 80089c2:	fba2 2303 	umull	r2, r3, r2, r3
 80089c6:	095b      	lsrs	r3, r3, #5
 80089c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80089cc:	4419      	add	r1, r3
 80089ce:	68fa      	ldr	r2, [r7, #12]
 80089d0:	4613      	mov	r3, r2
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	4413      	add	r3, r2
 80089d6:	009a      	lsls	r2, r3, #2
 80089d8:	441a      	add	r2, r3
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80089e4:	4b0c      	ldr	r3, [pc, #48]	@ (8008a18 <UART_SetConfig+0x118>)
 80089e6:	fba3 0302 	umull	r0, r3, r3, r2
 80089ea:	095b      	lsrs	r3, r3, #5
 80089ec:	2064      	movs	r0, #100	@ 0x64
 80089ee:	fb00 f303 	mul.w	r3, r0, r3
 80089f2:	1ad3      	subs	r3, r2, r3
 80089f4:	011b      	lsls	r3, r3, #4
 80089f6:	3332      	adds	r3, #50	@ 0x32
 80089f8:	4a07      	ldr	r2, [pc, #28]	@ (8008a18 <UART_SetConfig+0x118>)
 80089fa:	fba2 2303 	umull	r2, r3, r2, r3
 80089fe:	095b      	lsrs	r3, r3, #5
 8008a00:	f003 020f 	and.w	r2, r3, #15
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	440a      	add	r2, r1
 8008a0a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008a0c:	bf00      	nop
 8008a0e:	3710      	adds	r7, #16
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}
 8008a14:	40013800 	.word	0x40013800
 8008a18:	51eb851f 	.word	0x51eb851f

08008a1c <std>:
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	b510      	push	{r4, lr}
 8008a20:	4604      	mov	r4, r0
 8008a22:	e9c0 3300 	strd	r3, r3, [r0]
 8008a26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a2a:	6083      	str	r3, [r0, #8]
 8008a2c:	8181      	strh	r1, [r0, #12]
 8008a2e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008a30:	81c2      	strh	r2, [r0, #14]
 8008a32:	6183      	str	r3, [r0, #24]
 8008a34:	4619      	mov	r1, r3
 8008a36:	2208      	movs	r2, #8
 8008a38:	305c      	adds	r0, #92	@ 0x5c
 8008a3a:	f000 fa01 	bl	8008e40 <memset>
 8008a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8008a74 <std+0x58>)
 8008a40:	6224      	str	r4, [r4, #32]
 8008a42:	6263      	str	r3, [r4, #36]	@ 0x24
 8008a44:	4b0c      	ldr	r3, [pc, #48]	@ (8008a78 <std+0x5c>)
 8008a46:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008a48:	4b0c      	ldr	r3, [pc, #48]	@ (8008a7c <std+0x60>)
 8008a4a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8008a80 <std+0x64>)
 8008a4e:	6323      	str	r3, [r4, #48]	@ 0x30
 8008a50:	4b0c      	ldr	r3, [pc, #48]	@ (8008a84 <std+0x68>)
 8008a52:	429c      	cmp	r4, r3
 8008a54:	d006      	beq.n	8008a64 <std+0x48>
 8008a56:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008a5a:	4294      	cmp	r4, r2
 8008a5c:	d002      	beq.n	8008a64 <std+0x48>
 8008a5e:	33d0      	adds	r3, #208	@ 0xd0
 8008a60:	429c      	cmp	r4, r3
 8008a62:	d105      	bne.n	8008a70 <std+0x54>
 8008a64:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a6c:	f000 ba60 	b.w	8008f30 <__retarget_lock_init_recursive>
 8008a70:	bd10      	pop	{r4, pc}
 8008a72:	bf00      	nop
 8008a74:	08008c91 	.word	0x08008c91
 8008a78:	08008cb3 	.word	0x08008cb3
 8008a7c:	08008ceb 	.word	0x08008ceb
 8008a80:	08008d0f 	.word	0x08008d0f
 8008a84:	20001edc 	.word	0x20001edc

08008a88 <stdio_exit_handler>:
 8008a88:	4a02      	ldr	r2, [pc, #8]	@ (8008a94 <stdio_exit_handler+0xc>)
 8008a8a:	4903      	ldr	r1, [pc, #12]	@ (8008a98 <stdio_exit_handler+0x10>)
 8008a8c:	4803      	ldr	r0, [pc, #12]	@ (8008a9c <stdio_exit_handler+0x14>)
 8008a8e:	f000 b869 	b.w	8008b64 <_fwalk_sglue>
 8008a92:	bf00      	nop
 8008a94:	20000018 	.word	0x20000018
 8008a98:	080097c5 	.word	0x080097c5
 8008a9c:	20000028 	.word	0x20000028

08008aa0 <cleanup_stdio>:
 8008aa0:	6841      	ldr	r1, [r0, #4]
 8008aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8008ad4 <cleanup_stdio+0x34>)
 8008aa4:	b510      	push	{r4, lr}
 8008aa6:	4299      	cmp	r1, r3
 8008aa8:	4604      	mov	r4, r0
 8008aaa:	d001      	beq.n	8008ab0 <cleanup_stdio+0x10>
 8008aac:	f000 fe8a 	bl	80097c4 <_fflush_r>
 8008ab0:	68a1      	ldr	r1, [r4, #8]
 8008ab2:	4b09      	ldr	r3, [pc, #36]	@ (8008ad8 <cleanup_stdio+0x38>)
 8008ab4:	4299      	cmp	r1, r3
 8008ab6:	d002      	beq.n	8008abe <cleanup_stdio+0x1e>
 8008ab8:	4620      	mov	r0, r4
 8008aba:	f000 fe83 	bl	80097c4 <_fflush_r>
 8008abe:	68e1      	ldr	r1, [r4, #12]
 8008ac0:	4b06      	ldr	r3, [pc, #24]	@ (8008adc <cleanup_stdio+0x3c>)
 8008ac2:	4299      	cmp	r1, r3
 8008ac4:	d004      	beq.n	8008ad0 <cleanup_stdio+0x30>
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008acc:	f000 be7a 	b.w	80097c4 <_fflush_r>
 8008ad0:	bd10      	pop	{r4, pc}
 8008ad2:	bf00      	nop
 8008ad4:	20001edc 	.word	0x20001edc
 8008ad8:	20001f44 	.word	0x20001f44
 8008adc:	20001fac 	.word	0x20001fac

08008ae0 <global_stdio_init.part.0>:
 8008ae0:	b510      	push	{r4, lr}
 8008ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8008b10 <global_stdio_init.part.0+0x30>)
 8008ae4:	4c0b      	ldr	r4, [pc, #44]	@ (8008b14 <global_stdio_init.part.0+0x34>)
 8008ae6:	4a0c      	ldr	r2, [pc, #48]	@ (8008b18 <global_stdio_init.part.0+0x38>)
 8008ae8:	4620      	mov	r0, r4
 8008aea:	601a      	str	r2, [r3, #0]
 8008aec:	2104      	movs	r1, #4
 8008aee:	2200      	movs	r2, #0
 8008af0:	f7ff ff94 	bl	8008a1c <std>
 8008af4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008af8:	2201      	movs	r2, #1
 8008afa:	2109      	movs	r1, #9
 8008afc:	f7ff ff8e 	bl	8008a1c <std>
 8008b00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008b04:	2202      	movs	r2, #2
 8008b06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b0a:	2112      	movs	r1, #18
 8008b0c:	f7ff bf86 	b.w	8008a1c <std>
 8008b10:	20002014 	.word	0x20002014
 8008b14:	20001edc 	.word	0x20001edc
 8008b18:	08008a89 	.word	0x08008a89

08008b1c <__sfp_lock_acquire>:
 8008b1c:	4801      	ldr	r0, [pc, #4]	@ (8008b24 <__sfp_lock_acquire+0x8>)
 8008b1e:	f000 ba08 	b.w	8008f32 <__retarget_lock_acquire_recursive>
 8008b22:	bf00      	nop
 8008b24:	2000201d 	.word	0x2000201d

08008b28 <__sfp_lock_release>:
 8008b28:	4801      	ldr	r0, [pc, #4]	@ (8008b30 <__sfp_lock_release+0x8>)
 8008b2a:	f000 ba03 	b.w	8008f34 <__retarget_lock_release_recursive>
 8008b2e:	bf00      	nop
 8008b30:	2000201d 	.word	0x2000201d

08008b34 <__sinit>:
 8008b34:	b510      	push	{r4, lr}
 8008b36:	4604      	mov	r4, r0
 8008b38:	f7ff fff0 	bl	8008b1c <__sfp_lock_acquire>
 8008b3c:	6a23      	ldr	r3, [r4, #32]
 8008b3e:	b11b      	cbz	r3, 8008b48 <__sinit+0x14>
 8008b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b44:	f7ff bff0 	b.w	8008b28 <__sfp_lock_release>
 8008b48:	4b04      	ldr	r3, [pc, #16]	@ (8008b5c <__sinit+0x28>)
 8008b4a:	6223      	str	r3, [r4, #32]
 8008b4c:	4b04      	ldr	r3, [pc, #16]	@ (8008b60 <__sinit+0x2c>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d1f5      	bne.n	8008b40 <__sinit+0xc>
 8008b54:	f7ff ffc4 	bl	8008ae0 <global_stdio_init.part.0>
 8008b58:	e7f2      	b.n	8008b40 <__sinit+0xc>
 8008b5a:	bf00      	nop
 8008b5c:	08008aa1 	.word	0x08008aa1
 8008b60:	20002014 	.word	0x20002014

08008b64 <_fwalk_sglue>:
 8008b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b68:	4607      	mov	r7, r0
 8008b6a:	4688      	mov	r8, r1
 8008b6c:	4614      	mov	r4, r2
 8008b6e:	2600      	movs	r6, #0
 8008b70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b74:	f1b9 0901 	subs.w	r9, r9, #1
 8008b78:	d505      	bpl.n	8008b86 <_fwalk_sglue+0x22>
 8008b7a:	6824      	ldr	r4, [r4, #0]
 8008b7c:	2c00      	cmp	r4, #0
 8008b7e:	d1f7      	bne.n	8008b70 <_fwalk_sglue+0xc>
 8008b80:	4630      	mov	r0, r6
 8008b82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b86:	89ab      	ldrh	r3, [r5, #12]
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d907      	bls.n	8008b9c <_fwalk_sglue+0x38>
 8008b8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b90:	3301      	adds	r3, #1
 8008b92:	d003      	beq.n	8008b9c <_fwalk_sglue+0x38>
 8008b94:	4629      	mov	r1, r5
 8008b96:	4638      	mov	r0, r7
 8008b98:	47c0      	blx	r8
 8008b9a:	4306      	orrs	r6, r0
 8008b9c:	3568      	adds	r5, #104	@ 0x68
 8008b9e:	e7e9      	b.n	8008b74 <_fwalk_sglue+0x10>

08008ba0 <iprintf>:
 8008ba0:	b40f      	push	{r0, r1, r2, r3}
 8008ba2:	b507      	push	{r0, r1, r2, lr}
 8008ba4:	4906      	ldr	r1, [pc, #24]	@ (8008bc0 <iprintf+0x20>)
 8008ba6:	ab04      	add	r3, sp, #16
 8008ba8:	6808      	ldr	r0, [r1, #0]
 8008baa:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bae:	6881      	ldr	r1, [r0, #8]
 8008bb0:	9301      	str	r3, [sp, #4]
 8008bb2:	f000 fadf 	bl	8009174 <_vfiprintf_r>
 8008bb6:	b003      	add	sp, #12
 8008bb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bbc:	b004      	add	sp, #16
 8008bbe:	4770      	bx	lr
 8008bc0:	20000024 	.word	0x20000024

08008bc4 <putchar>:
 8008bc4:	4b02      	ldr	r3, [pc, #8]	@ (8008bd0 <putchar+0xc>)
 8008bc6:	4601      	mov	r1, r0
 8008bc8:	6818      	ldr	r0, [r3, #0]
 8008bca:	6882      	ldr	r2, [r0, #8]
 8008bcc:	f000 be83 	b.w	80098d6 <_putc_r>
 8008bd0:	20000024 	.word	0x20000024

08008bd4 <_puts_r>:
 8008bd4:	6a03      	ldr	r3, [r0, #32]
 8008bd6:	b570      	push	{r4, r5, r6, lr}
 8008bd8:	4605      	mov	r5, r0
 8008bda:	460e      	mov	r6, r1
 8008bdc:	6884      	ldr	r4, [r0, #8]
 8008bde:	b90b      	cbnz	r3, 8008be4 <_puts_r+0x10>
 8008be0:	f7ff ffa8 	bl	8008b34 <__sinit>
 8008be4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008be6:	07db      	lsls	r3, r3, #31
 8008be8:	d405      	bmi.n	8008bf6 <_puts_r+0x22>
 8008bea:	89a3      	ldrh	r3, [r4, #12]
 8008bec:	0598      	lsls	r0, r3, #22
 8008bee:	d402      	bmi.n	8008bf6 <_puts_r+0x22>
 8008bf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008bf2:	f000 f99e 	bl	8008f32 <__retarget_lock_acquire_recursive>
 8008bf6:	89a3      	ldrh	r3, [r4, #12]
 8008bf8:	0719      	lsls	r1, r3, #28
 8008bfa:	d502      	bpl.n	8008c02 <_puts_r+0x2e>
 8008bfc:	6923      	ldr	r3, [r4, #16]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d135      	bne.n	8008c6e <_puts_r+0x9a>
 8008c02:	4621      	mov	r1, r4
 8008c04:	4628      	mov	r0, r5
 8008c06:	f000 f8c5 	bl	8008d94 <__swsetup_r>
 8008c0a:	b380      	cbz	r0, 8008c6e <_puts_r+0x9a>
 8008c0c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8008c10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c12:	07da      	lsls	r2, r3, #31
 8008c14:	d405      	bmi.n	8008c22 <_puts_r+0x4e>
 8008c16:	89a3      	ldrh	r3, [r4, #12]
 8008c18:	059b      	lsls	r3, r3, #22
 8008c1a:	d402      	bmi.n	8008c22 <_puts_r+0x4e>
 8008c1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c1e:	f000 f989 	bl	8008f34 <__retarget_lock_release_recursive>
 8008c22:	4628      	mov	r0, r5
 8008c24:	bd70      	pop	{r4, r5, r6, pc}
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	da04      	bge.n	8008c34 <_puts_r+0x60>
 8008c2a:	69a2      	ldr	r2, [r4, #24]
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	dc17      	bgt.n	8008c60 <_puts_r+0x8c>
 8008c30:	290a      	cmp	r1, #10
 8008c32:	d015      	beq.n	8008c60 <_puts_r+0x8c>
 8008c34:	6823      	ldr	r3, [r4, #0]
 8008c36:	1c5a      	adds	r2, r3, #1
 8008c38:	6022      	str	r2, [r4, #0]
 8008c3a:	7019      	strb	r1, [r3, #0]
 8008c3c:	68a3      	ldr	r3, [r4, #8]
 8008c3e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008c42:	3b01      	subs	r3, #1
 8008c44:	60a3      	str	r3, [r4, #8]
 8008c46:	2900      	cmp	r1, #0
 8008c48:	d1ed      	bne.n	8008c26 <_puts_r+0x52>
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	da11      	bge.n	8008c72 <_puts_r+0x9e>
 8008c4e:	4622      	mov	r2, r4
 8008c50:	210a      	movs	r1, #10
 8008c52:	4628      	mov	r0, r5
 8008c54:	f000 f85f 	bl	8008d16 <__swbuf_r>
 8008c58:	3001      	adds	r0, #1
 8008c5a:	d0d7      	beq.n	8008c0c <_puts_r+0x38>
 8008c5c:	250a      	movs	r5, #10
 8008c5e:	e7d7      	b.n	8008c10 <_puts_r+0x3c>
 8008c60:	4622      	mov	r2, r4
 8008c62:	4628      	mov	r0, r5
 8008c64:	f000 f857 	bl	8008d16 <__swbuf_r>
 8008c68:	3001      	adds	r0, #1
 8008c6a:	d1e7      	bne.n	8008c3c <_puts_r+0x68>
 8008c6c:	e7ce      	b.n	8008c0c <_puts_r+0x38>
 8008c6e:	3e01      	subs	r6, #1
 8008c70:	e7e4      	b.n	8008c3c <_puts_r+0x68>
 8008c72:	6823      	ldr	r3, [r4, #0]
 8008c74:	1c5a      	adds	r2, r3, #1
 8008c76:	6022      	str	r2, [r4, #0]
 8008c78:	220a      	movs	r2, #10
 8008c7a:	701a      	strb	r2, [r3, #0]
 8008c7c:	e7ee      	b.n	8008c5c <_puts_r+0x88>
	...

08008c80 <puts>:
 8008c80:	4b02      	ldr	r3, [pc, #8]	@ (8008c8c <puts+0xc>)
 8008c82:	4601      	mov	r1, r0
 8008c84:	6818      	ldr	r0, [r3, #0]
 8008c86:	f7ff bfa5 	b.w	8008bd4 <_puts_r>
 8008c8a:	bf00      	nop
 8008c8c:	20000024 	.word	0x20000024

08008c90 <__sread>:
 8008c90:	b510      	push	{r4, lr}
 8008c92:	460c      	mov	r4, r1
 8008c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c98:	f000 f8fc 	bl	8008e94 <_read_r>
 8008c9c:	2800      	cmp	r0, #0
 8008c9e:	bfab      	itete	ge
 8008ca0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008ca2:	89a3      	ldrhlt	r3, [r4, #12]
 8008ca4:	181b      	addge	r3, r3, r0
 8008ca6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008caa:	bfac      	ite	ge
 8008cac:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008cae:	81a3      	strhlt	r3, [r4, #12]
 8008cb0:	bd10      	pop	{r4, pc}

08008cb2 <__swrite>:
 8008cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cb6:	461f      	mov	r7, r3
 8008cb8:	898b      	ldrh	r3, [r1, #12]
 8008cba:	4605      	mov	r5, r0
 8008cbc:	05db      	lsls	r3, r3, #23
 8008cbe:	460c      	mov	r4, r1
 8008cc0:	4616      	mov	r6, r2
 8008cc2:	d505      	bpl.n	8008cd0 <__swrite+0x1e>
 8008cc4:	2302      	movs	r3, #2
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ccc:	f000 f8d0 	bl	8008e70 <_lseek_r>
 8008cd0:	89a3      	ldrh	r3, [r4, #12]
 8008cd2:	4632      	mov	r2, r6
 8008cd4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008cd8:	81a3      	strh	r3, [r4, #12]
 8008cda:	4628      	mov	r0, r5
 8008cdc:	463b      	mov	r3, r7
 8008cde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ce2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ce6:	f000 b8e7 	b.w	8008eb8 <_write_r>

08008cea <__sseek>:
 8008cea:	b510      	push	{r4, lr}
 8008cec:	460c      	mov	r4, r1
 8008cee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cf2:	f000 f8bd 	bl	8008e70 <_lseek_r>
 8008cf6:	1c43      	adds	r3, r0, #1
 8008cf8:	89a3      	ldrh	r3, [r4, #12]
 8008cfa:	bf15      	itete	ne
 8008cfc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008cfe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008d02:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008d06:	81a3      	strheq	r3, [r4, #12]
 8008d08:	bf18      	it	ne
 8008d0a:	81a3      	strhne	r3, [r4, #12]
 8008d0c:	bd10      	pop	{r4, pc}

08008d0e <__sclose>:
 8008d0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d12:	f000 b89d 	b.w	8008e50 <_close_r>

08008d16 <__swbuf_r>:
 8008d16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d18:	460e      	mov	r6, r1
 8008d1a:	4614      	mov	r4, r2
 8008d1c:	4605      	mov	r5, r0
 8008d1e:	b118      	cbz	r0, 8008d28 <__swbuf_r+0x12>
 8008d20:	6a03      	ldr	r3, [r0, #32]
 8008d22:	b90b      	cbnz	r3, 8008d28 <__swbuf_r+0x12>
 8008d24:	f7ff ff06 	bl	8008b34 <__sinit>
 8008d28:	69a3      	ldr	r3, [r4, #24]
 8008d2a:	60a3      	str	r3, [r4, #8]
 8008d2c:	89a3      	ldrh	r3, [r4, #12]
 8008d2e:	071a      	lsls	r2, r3, #28
 8008d30:	d501      	bpl.n	8008d36 <__swbuf_r+0x20>
 8008d32:	6923      	ldr	r3, [r4, #16]
 8008d34:	b943      	cbnz	r3, 8008d48 <__swbuf_r+0x32>
 8008d36:	4621      	mov	r1, r4
 8008d38:	4628      	mov	r0, r5
 8008d3a:	f000 f82b 	bl	8008d94 <__swsetup_r>
 8008d3e:	b118      	cbz	r0, 8008d48 <__swbuf_r+0x32>
 8008d40:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008d44:	4638      	mov	r0, r7
 8008d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d48:	6823      	ldr	r3, [r4, #0]
 8008d4a:	6922      	ldr	r2, [r4, #16]
 8008d4c:	b2f6      	uxtb	r6, r6
 8008d4e:	1a98      	subs	r0, r3, r2
 8008d50:	6963      	ldr	r3, [r4, #20]
 8008d52:	4637      	mov	r7, r6
 8008d54:	4283      	cmp	r3, r0
 8008d56:	dc05      	bgt.n	8008d64 <__swbuf_r+0x4e>
 8008d58:	4621      	mov	r1, r4
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	f000 fd32 	bl	80097c4 <_fflush_r>
 8008d60:	2800      	cmp	r0, #0
 8008d62:	d1ed      	bne.n	8008d40 <__swbuf_r+0x2a>
 8008d64:	68a3      	ldr	r3, [r4, #8]
 8008d66:	3b01      	subs	r3, #1
 8008d68:	60a3      	str	r3, [r4, #8]
 8008d6a:	6823      	ldr	r3, [r4, #0]
 8008d6c:	1c5a      	adds	r2, r3, #1
 8008d6e:	6022      	str	r2, [r4, #0]
 8008d70:	701e      	strb	r6, [r3, #0]
 8008d72:	6962      	ldr	r2, [r4, #20]
 8008d74:	1c43      	adds	r3, r0, #1
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d004      	beq.n	8008d84 <__swbuf_r+0x6e>
 8008d7a:	89a3      	ldrh	r3, [r4, #12]
 8008d7c:	07db      	lsls	r3, r3, #31
 8008d7e:	d5e1      	bpl.n	8008d44 <__swbuf_r+0x2e>
 8008d80:	2e0a      	cmp	r6, #10
 8008d82:	d1df      	bne.n	8008d44 <__swbuf_r+0x2e>
 8008d84:	4621      	mov	r1, r4
 8008d86:	4628      	mov	r0, r5
 8008d88:	f000 fd1c 	bl	80097c4 <_fflush_r>
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	d0d9      	beq.n	8008d44 <__swbuf_r+0x2e>
 8008d90:	e7d6      	b.n	8008d40 <__swbuf_r+0x2a>
	...

08008d94 <__swsetup_r>:
 8008d94:	b538      	push	{r3, r4, r5, lr}
 8008d96:	4b29      	ldr	r3, [pc, #164]	@ (8008e3c <__swsetup_r+0xa8>)
 8008d98:	4605      	mov	r5, r0
 8008d9a:	6818      	ldr	r0, [r3, #0]
 8008d9c:	460c      	mov	r4, r1
 8008d9e:	b118      	cbz	r0, 8008da8 <__swsetup_r+0x14>
 8008da0:	6a03      	ldr	r3, [r0, #32]
 8008da2:	b90b      	cbnz	r3, 8008da8 <__swsetup_r+0x14>
 8008da4:	f7ff fec6 	bl	8008b34 <__sinit>
 8008da8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dac:	0719      	lsls	r1, r3, #28
 8008dae:	d422      	bmi.n	8008df6 <__swsetup_r+0x62>
 8008db0:	06da      	lsls	r2, r3, #27
 8008db2:	d407      	bmi.n	8008dc4 <__swsetup_r+0x30>
 8008db4:	2209      	movs	r2, #9
 8008db6:	602a      	str	r2, [r5, #0]
 8008db8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008dbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008dc0:	81a3      	strh	r3, [r4, #12]
 8008dc2:	e033      	b.n	8008e2c <__swsetup_r+0x98>
 8008dc4:	0758      	lsls	r0, r3, #29
 8008dc6:	d512      	bpl.n	8008dee <__swsetup_r+0x5a>
 8008dc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008dca:	b141      	cbz	r1, 8008dde <__swsetup_r+0x4a>
 8008dcc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008dd0:	4299      	cmp	r1, r3
 8008dd2:	d002      	beq.n	8008dda <__swsetup_r+0x46>
 8008dd4:	4628      	mov	r0, r5
 8008dd6:	f000 f8af 	bl	8008f38 <_free_r>
 8008dda:	2300      	movs	r3, #0
 8008ddc:	6363      	str	r3, [r4, #52]	@ 0x34
 8008dde:	89a3      	ldrh	r3, [r4, #12]
 8008de0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008de4:	81a3      	strh	r3, [r4, #12]
 8008de6:	2300      	movs	r3, #0
 8008de8:	6063      	str	r3, [r4, #4]
 8008dea:	6923      	ldr	r3, [r4, #16]
 8008dec:	6023      	str	r3, [r4, #0]
 8008dee:	89a3      	ldrh	r3, [r4, #12]
 8008df0:	f043 0308 	orr.w	r3, r3, #8
 8008df4:	81a3      	strh	r3, [r4, #12]
 8008df6:	6923      	ldr	r3, [r4, #16]
 8008df8:	b94b      	cbnz	r3, 8008e0e <__swsetup_r+0x7a>
 8008dfa:	89a3      	ldrh	r3, [r4, #12]
 8008dfc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008e00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e04:	d003      	beq.n	8008e0e <__swsetup_r+0x7a>
 8008e06:	4621      	mov	r1, r4
 8008e08:	4628      	mov	r0, r5
 8008e0a:	f000 fd28 	bl	800985e <__smakebuf_r>
 8008e0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e12:	f013 0201 	ands.w	r2, r3, #1
 8008e16:	d00a      	beq.n	8008e2e <__swsetup_r+0x9a>
 8008e18:	2200      	movs	r2, #0
 8008e1a:	60a2      	str	r2, [r4, #8]
 8008e1c:	6962      	ldr	r2, [r4, #20]
 8008e1e:	4252      	negs	r2, r2
 8008e20:	61a2      	str	r2, [r4, #24]
 8008e22:	6922      	ldr	r2, [r4, #16]
 8008e24:	b942      	cbnz	r2, 8008e38 <__swsetup_r+0xa4>
 8008e26:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008e2a:	d1c5      	bne.n	8008db8 <__swsetup_r+0x24>
 8008e2c:	bd38      	pop	{r3, r4, r5, pc}
 8008e2e:	0799      	lsls	r1, r3, #30
 8008e30:	bf58      	it	pl
 8008e32:	6962      	ldrpl	r2, [r4, #20]
 8008e34:	60a2      	str	r2, [r4, #8]
 8008e36:	e7f4      	b.n	8008e22 <__swsetup_r+0x8e>
 8008e38:	2000      	movs	r0, #0
 8008e3a:	e7f7      	b.n	8008e2c <__swsetup_r+0x98>
 8008e3c:	20000024 	.word	0x20000024

08008e40 <memset>:
 8008e40:	4603      	mov	r3, r0
 8008e42:	4402      	add	r2, r0
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d100      	bne.n	8008e4a <memset+0xa>
 8008e48:	4770      	bx	lr
 8008e4a:	f803 1b01 	strb.w	r1, [r3], #1
 8008e4e:	e7f9      	b.n	8008e44 <memset+0x4>

08008e50 <_close_r>:
 8008e50:	b538      	push	{r3, r4, r5, lr}
 8008e52:	2300      	movs	r3, #0
 8008e54:	4d05      	ldr	r5, [pc, #20]	@ (8008e6c <_close_r+0x1c>)
 8008e56:	4604      	mov	r4, r0
 8008e58:	4608      	mov	r0, r1
 8008e5a:	602b      	str	r3, [r5, #0]
 8008e5c:	f7f9 fcc9 	bl	80027f2 <_close>
 8008e60:	1c43      	adds	r3, r0, #1
 8008e62:	d102      	bne.n	8008e6a <_close_r+0x1a>
 8008e64:	682b      	ldr	r3, [r5, #0]
 8008e66:	b103      	cbz	r3, 8008e6a <_close_r+0x1a>
 8008e68:	6023      	str	r3, [r4, #0]
 8008e6a:	bd38      	pop	{r3, r4, r5, pc}
 8008e6c:	20002018 	.word	0x20002018

08008e70 <_lseek_r>:
 8008e70:	b538      	push	{r3, r4, r5, lr}
 8008e72:	4604      	mov	r4, r0
 8008e74:	4608      	mov	r0, r1
 8008e76:	4611      	mov	r1, r2
 8008e78:	2200      	movs	r2, #0
 8008e7a:	4d05      	ldr	r5, [pc, #20]	@ (8008e90 <_lseek_r+0x20>)
 8008e7c:	602a      	str	r2, [r5, #0]
 8008e7e:	461a      	mov	r2, r3
 8008e80:	f7f9 fcdb 	bl	800283a <_lseek>
 8008e84:	1c43      	adds	r3, r0, #1
 8008e86:	d102      	bne.n	8008e8e <_lseek_r+0x1e>
 8008e88:	682b      	ldr	r3, [r5, #0]
 8008e8a:	b103      	cbz	r3, 8008e8e <_lseek_r+0x1e>
 8008e8c:	6023      	str	r3, [r4, #0]
 8008e8e:	bd38      	pop	{r3, r4, r5, pc}
 8008e90:	20002018 	.word	0x20002018

08008e94 <_read_r>:
 8008e94:	b538      	push	{r3, r4, r5, lr}
 8008e96:	4604      	mov	r4, r0
 8008e98:	4608      	mov	r0, r1
 8008e9a:	4611      	mov	r1, r2
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	4d05      	ldr	r5, [pc, #20]	@ (8008eb4 <_read_r+0x20>)
 8008ea0:	602a      	str	r2, [r5, #0]
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	f7f9 fc6c 	bl	8002780 <_read>
 8008ea8:	1c43      	adds	r3, r0, #1
 8008eaa:	d102      	bne.n	8008eb2 <_read_r+0x1e>
 8008eac:	682b      	ldr	r3, [r5, #0]
 8008eae:	b103      	cbz	r3, 8008eb2 <_read_r+0x1e>
 8008eb0:	6023      	str	r3, [r4, #0]
 8008eb2:	bd38      	pop	{r3, r4, r5, pc}
 8008eb4:	20002018 	.word	0x20002018

08008eb8 <_write_r>:
 8008eb8:	b538      	push	{r3, r4, r5, lr}
 8008eba:	4604      	mov	r4, r0
 8008ebc:	4608      	mov	r0, r1
 8008ebe:	4611      	mov	r1, r2
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	4d05      	ldr	r5, [pc, #20]	@ (8008ed8 <_write_r+0x20>)
 8008ec4:	602a      	str	r2, [r5, #0]
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	f7f9 fc77 	bl	80027ba <_write>
 8008ecc:	1c43      	adds	r3, r0, #1
 8008ece:	d102      	bne.n	8008ed6 <_write_r+0x1e>
 8008ed0:	682b      	ldr	r3, [r5, #0]
 8008ed2:	b103      	cbz	r3, 8008ed6 <_write_r+0x1e>
 8008ed4:	6023      	str	r3, [r4, #0]
 8008ed6:	bd38      	pop	{r3, r4, r5, pc}
 8008ed8:	20002018 	.word	0x20002018

08008edc <__errno>:
 8008edc:	4b01      	ldr	r3, [pc, #4]	@ (8008ee4 <__errno+0x8>)
 8008ede:	6818      	ldr	r0, [r3, #0]
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop
 8008ee4:	20000024 	.word	0x20000024

08008ee8 <__libc_init_array>:
 8008ee8:	b570      	push	{r4, r5, r6, lr}
 8008eea:	2600      	movs	r6, #0
 8008eec:	4d0c      	ldr	r5, [pc, #48]	@ (8008f20 <__libc_init_array+0x38>)
 8008eee:	4c0d      	ldr	r4, [pc, #52]	@ (8008f24 <__libc_init_array+0x3c>)
 8008ef0:	1b64      	subs	r4, r4, r5
 8008ef2:	10a4      	asrs	r4, r4, #2
 8008ef4:	42a6      	cmp	r6, r4
 8008ef6:	d109      	bne.n	8008f0c <__libc_init_array+0x24>
 8008ef8:	f000 fd62 	bl	80099c0 <_init>
 8008efc:	2600      	movs	r6, #0
 8008efe:	4d0a      	ldr	r5, [pc, #40]	@ (8008f28 <__libc_init_array+0x40>)
 8008f00:	4c0a      	ldr	r4, [pc, #40]	@ (8008f2c <__libc_init_array+0x44>)
 8008f02:	1b64      	subs	r4, r4, r5
 8008f04:	10a4      	asrs	r4, r4, #2
 8008f06:	42a6      	cmp	r6, r4
 8008f08:	d105      	bne.n	8008f16 <__libc_init_array+0x2e>
 8008f0a:	bd70      	pop	{r4, r5, r6, pc}
 8008f0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f10:	4798      	blx	r3
 8008f12:	3601      	adds	r6, #1
 8008f14:	e7ee      	b.n	8008ef4 <__libc_init_array+0xc>
 8008f16:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f1a:	4798      	blx	r3
 8008f1c:	3601      	adds	r6, #1
 8008f1e:	e7f2      	b.n	8008f06 <__libc_init_array+0x1e>
 8008f20:	08009bb0 	.word	0x08009bb0
 8008f24:	08009bb0 	.word	0x08009bb0
 8008f28:	08009bb0 	.word	0x08009bb0
 8008f2c:	08009bb4 	.word	0x08009bb4

08008f30 <__retarget_lock_init_recursive>:
 8008f30:	4770      	bx	lr

08008f32 <__retarget_lock_acquire_recursive>:
 8008f32:	4770      	bx	lr

08008f34 <__retarget_lock_release_recursive>:
 8008f34:	4770      	bx	lr
	...

08008f38 <_free_r>:
 8008f38:	b538      	push	{r3, r4, r5, lr}
 8008f3a:	4605      	mov	r5, r0
 8008f3c:	2900      	cmp	r1, #0
 8008f3e:	d040      	beq.n	8008fc2 <_free_r+0x8a>
 8008f40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f44:	1f0c      	subs	r4, r1, #4
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	bfb8      	it	lt
 8008f4a:	18e4      	addlt	r4, r4, r3
 8008f4c:	f000 f8de 	bl	800910c <__malloc_lock>
 8008f50:	4a1c      	ldr	r2, [pc, #112]	@ (8008fc4 <_free_r+0x8c>)
 8008f52:	6813      	ldr	r3, [r2, #0]
 8008f54:	b933      	cbnz	r3, 8008f64 <_free_r+0x2c>
 8008f56:	6063      	str	r3, [r4, #4]
 8008f58:	6014      	str	r4, [r2, #0]
 8008f5a:	4628      	mov	r0, r5
 8008f5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f60:	f000 b8da 	b.w	8009118 <__malloc_unlock>
 8008f64:	42a3      	cmp	r3, r4
 8008f66:	d908      	bls.n	8008f7a <_free_r+0x42>
 8008f68:	6820      	ldr	r0, [r4, #0]
 8008f6a:	1821      	adds	r1, r4, r0
 8008f6c:	428b      	cmp	r3, r1
 8008f6e:	bf01      	itttt	eq
 8008f70:	6819      	ldreq	r1, [r3, #0]
 8008f72:	685b      	ldreq	r3, [r3, #4]
 8008f74:	1809      	addeq	r1, r1, r0
 8008f76:	6021      	streq	r1, [r4, #0]
 8008f78:	e7ed      	b.n	8008f56 <_free_r+0x1e>
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	b10b      	cbz	r3, 8008f84 <_free_r+0x4c>
 8008f80:	42a3      	cmp	r3, r4
 8008f82:	d9fa      	bls.n	8008f7a <_free_r+0x42>
 8008f84:	6811      	ldr	r1, [r2, #0]
 8008f86:	1850      	adds	r0, r2, r1
 8008f88:	42a0      	cmp	r0, r4
 8008f8a:	d10b      	bne.n	8008fa4 <_free_r+0x6c>
 8008f8c:	6820      	ldr	r0, [r4, #0]
 8008f8e:	4401      	add	r1, r0
 8008f90:	1850      	adds	r0, r2, r1
 8008f92:	4283      	cmp	r3, r0
 8008f94:	6011      	str	r1, [r2, #0]
 8008f96:	d1e0      	bne.n	8008f5a <_free_r+0x22>
 8008f98:	6818      	ldr	r0, [r3, #0]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	4408      	add	r0, r1
 8008f9e:	6010      	str	r0, [r2, #0]
 8008fa0:	6053      	str	r3, [r2, #4]
 8008fa2:	e7da      	b.n	8008f5a <_free_r+0x22>
 8008fa4:	d902      	bls.n	8008fac <_free_r+0x74>
 8008fa6:	230c      	movs	r3, #12
 8008fa8:	602b      	str	r3, [r5, #0]
 8008faa:	e7d6      	b.n	8008f5a <_free_r+0x22>
 8008fac:	6820      	ldr	r0, [r4, #0]
 8008fae:	1821      	adds	r1, r4, r0
 8008fb0:	428b      	cmp	r3, r1
 8008fb2:	bf01      	itttt	eq
 8008fb4:	6819      	ldreq	r1, [r3, #0]
 8008fb6:	685b      	ldreq	r3, [r3, #4]
 8008fb8:	1809      	addeq	r1, r1, r0
 8008fba:	6021      	streq	r1, [r4, #0]
 8008fbc:	6063      	str	r3, [r4, #4]
 8008fbe:	6054      	str	r4, [r2, #4]
 8008fc0:	e7cb      	b.n	8008f5a <_free_r+0x22>
 8008fc2:	bd38      	pop	{r3, r4, r5, pc}
 8008fc4:	20002024 	.word	0x20002024

08008fc8 <sbrk_aligned>:
 8008fc8:	b570      	push	{r4, r5, r6, lr}
 8008fca:	4e0f      	ldr	r6, [pc, #60]	@ (8009008 <sbrk_aligned+0x40>)
 8008fcc:	460c      	mov	r4, r1
 8008fce:	6831      	ldr	r1, [r6, #0]
 8008fd0:	4605      	mov	r5, r0
 8008fd2:	b911      	cbnz	r1, 8008fda <sbrk_aligned+0x12>
 8008fd4:	f000 fcd6 	bl	8009984 <_sbrk_r>
 8008fd8:	6030      	str	r0, [r6, #0]
 8008fda:	4621      	mov	r1, r4
 8008fdc:	4628      	mov	r0, r5
 8008fde:	f000 fcd1 	bl	8009984 <_sbrk_r>
 8008fe2:	1c43      	adds	r3, r0, #1
 8008fe4:	d103      	bne.n	8008fee <sbrk_aligned+0x26>
 8008fe6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008fea:	4620      	mov	r0, r4
 8008fec:	bd70      	pop	{r4, r5, r6, pc}
 8008fee:	1cc4      	adds	r4, r0, #3
 8008ff0:	f024 0403 	bic.w	r4, r4, #3
 8008ff4:	42a0      	cmp	r0, r4
 8008ff6:	d0f8      	beq.n	8008fea <sbrk_aligned+0x22>
 8008ff8:	1a21      	subs	r1, r4, r0
 8008ffa:	4628      	mov	r0, r5
 8008ffc:	f000 fcc2 	bl	8009984 <_sbrk_r>
 8009000:	3001      	adds	r0, #1
 8009002:	d1f2      	bne.n	8008fea <sbrk_aligned+0x22>
 8009004:	e7ef      	b.n	8008fe6 <sbrk_aligned+0x1e>
 8009006:	bf00      	nop
 8009008:	20002020 	.word	0x20002020

0800900c <_malloc_r>:
 800900c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009010:	1ccd      	adds	r5, r1, #3
 8009012:	f025 0503 	bic.w	r5, r5, #3
 8009016:	3508      	adds	r5, #8
 8009018:	2d0c      	cmp	r5, #12
 800901a:	bf38      	it	cc
 800901c:	250c      	movcc	r5, #12
 800901e:	2d00      	cmp	r5, #0
 8009020:	4606      	mov	r6, r0
 8009022:	db01      	blt.n	8009028 <_malloc_r+0x1c>
 8009024:	42a9      	cmp	r1, r5
 8009026:	d904      	bls.n	8009032 <_malloc_r+0x26>
 8009028:	230c      	movs	r3, #12
 800902a:	6033      	str	r3, [r6, #0]
 800902c:	2000      	movs	r0, #0
 800902e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009032:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009108 <_malloc_r+0xfc>
 8009036:	f000 f869 	bl	800910c <__malloc_lock>
 800903a:	f8d8 3000 	ldr.w	r3, [r8]
 800903e:	461c      	mov	r4, r3
 8009040:	bb44      	cbnz	r4, 8009094 <_malloc_r+0x88>
 8009042:	4629      	mov	r1, r5
 8009044:	4630      	mov	r0, r6
 8009046:	f7ff ffbf 	bl	8008fc8 <sbrk_aligned>
 800904a:	1c43      	adds	r3, r0, #1
 800904c:	4604      	mov	r4, r0
 800904e:	d158      	bne.n	8009102 <_malloc_r+0xf6>
 8009050:	f8d8 4000 	ldr.w	r4, [r8]
 8009054:	4627      	mov	r7, r4
 8009056:	2f00      	cmp	r7, #0
 8009058:	d143      	bne.n	80090e2 <_malloc_r+0xd6>
 800905a:	2c00      	cmp	r4, #0
 800905c:	d04b      	beq.n	80090f6 <_malloc_r+0xea>
 800905e:	6823      	ldr	r3, [r4, #0]
 8009060:	4639      	mov	r1, r7
 8009062:	4630      	mov	r0, r6
 8009064:	eb04 0903 	add.w	r9, r4, r3
 8009068:	f000 fc8c 	bl	8009984 <_sbrk_r>
 800906c:	4581      	cmp	r9, r0
 800906e:	d142      	bne.n	80090f6 <_malloc_r+0xea>
 8009070:	6821      	ldr	r1, [r4, #0]
 8009072:	4630      	mov	r0, r6
 8009074:	1a6d      	subs	r5, r5, r1
 8009076:	4629      	mov	r1, r5
 8009078:	f7ff ffa6 	bl	8008fc8 <sbrk_aligned>
 800907c:	3001      	adds	r0, #1
 800907e:	d03a      	beq.n	80090f6 <_malloc_r+0xea>
 8009080:	6823      	ldr	r3, [r4, #0]
 8009082:	442b      	add	r3, r5
 8009084:	6023      	str	r3, [r4, #0]
 8009086:	f8d8 3000 	ldr.w	r3, [r8]
 800908a:	685a      	ldr	r2, [r3, #4]
 800908c:	bb62      	cbnz	r2, 80090e8 <_malloc_r+0xdc>
 800908e:	f8c8 7000 	str.w	r7, [r8]
 8009092:	e00f      	b.n	80090b4 <_malloc_r+0xa8>
 8009094:	6822      	ldr	r2, [r4, #0]
 8009096:	1b52      	subs	r2, r2, r5
 8009098:	d420      	bmi.n	80090dc <_malloc_r+0xd0>
 800909a:	2a0b      	cmp	r2, #11
 800909c:	d917      	bls.n	80090ce <_malloc_r+0xc2>
 800909e:	1961      	adds	r1, r4, r5
 80090a0:	42a3      	cmp	r3, r4
 80090a2:	6025      	str	r5, [r4, #0]
 80090a4:	bf18      	it	ne
 80090a6:	6059      	strne	r1, [r3, #4]
 80090a8:	6863      	ldr	r3, [r4, #4]
 80090aa:	bf08      	it	eq
 80090ac:	f8c8 1000 	streq.w	r1, [r8]
 80090b0:	5162      	str	r2, [r4, r5]
 80090b2:	604b      	str	r3, [r1, #4]
 80090b4:	4630      	mov	r0, r6
 80090b6:	f000 f82f 	bl	8009118 <__malloc_unlock>
 80090ba:	f104 000b 	add.w	r0, r4, #11
 80090be:	1d23      	adds	r3, r4, #4
 80090c0:	f020 0007 	bic.w	r0, r0, #7
 80090c4:	1ac2      	subs	r2, r0, r3
 80090c6:	bf1c      	itt	ne
 80090c8:	1a1b      	subne	r3, r3, r0
 80090ca:	50a3      	strne	r3, [r4, r2]
 80090cc:	e7af      	b.n	800902e <_malloc_r+0x22>
 80090ce:	6862      	ldr	r2, [r4, #4]
 80090d0:	42a3      	cmp	r3, r4
 80090d2:	bf0c      	ite	eq
 80090d4:	f8c8 2000 	streq.w	r2, [r8]
 80090d8:	605a      	strne	r2, [r3, #4]
 80090da:	e7eb      	b.n	80090b4 <_malloc_r+0xa8>
 80090dc:	4623      	mov	r3, r4
 80090de:	6864      	ldr	r4, [r4, #4]
 80090e0:	e7ae      	b.n	8009040 <_malloc_r+0x34>
 80090e2:	463c      	mov	r4, r7
 80090e4:	687f      	ldr	r7, [r7, #4]
 80090e6:	e7b6      	b.n	8009056 <_malloc_r+0x4a>
 80090e8:	461a      	mov	r2, r3
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	42a3      	cmp	r3, r4
 80090ee:	d1fb      	bne.n	80090e8 <_malloc_r+0xdc>
 80090f0:	2300      	movs	r3, #0
 80090f2:	6053      	str	r3, [r2, #4]
 80090f4:	e7de      	b.n	80090b4 <_malloc_r+0xa8>
 80090f6:	230c      	movs	r3, #12
 80090f8:	4630      	mov	r0, r6
 80090fa:	6033      	str	r3, [r6, #0]
 80090fc:	f000 f80c 	bl	8009118 <__malloc_unlock>
 8009100:	e794      	b.n	800902c <_malloc_r+0x20>
 8009102:	6005      	str	r5, [r0, #0]
 8009104:	e7d6      	b.n	80090b4 <_malloc_r+0xa8>
 8009106:	bf00      	nop
 8009108:	20002024 	.word	0x20002024

0800910c <__malloc_lock>:
 800910c:	4801      	ldr	r0, [pc, #4]	@ (8009114 <__malloc_lock+0x8>)
 800910e:	f7ff bf10 	b.w	8008f32 <__retarget_lock_acquire_recursive>
 8009112:	bf00      	nop
 8009114:	2000201c 	.word	0x2000201c

08009118 <__malloc_unlock>:
 8009118:	4801      	ldr	r0, [pc, #4]	@ (8009120 <__malloc_unlock+0x8>)
 800911a:	f7ff bf0b 	b.w	8008f34 <__retarget_lock_release_recursive>
 800911e:	bf00      	nop
 8009120:	2000201c 	.word	0x2000201c

08009124 <__sfputc_r>:
 8009124:	6893      	ldr	r3, [r2, #8]
 8009126:	b410      	push	{r4}
 8009128:	3b01      	subs	r3, #1
 800912a:	2b00      	cmp	r3, #0
 800912c:	6093      	str	r3, [r2, #8]
 800912e:	da07      	bge.n	8009140 <__sfputc_r+0x1c>
 8009130:	6994      	ldr	r4, [r2, #24]
 8009132:	42a3      	cmp	r3, r4
 8009134:	db01      	blt.n	800913a <__sfputc_r+0x16>
 8009136:	290a      	cmp	r1, #10
 8009138:	d102      	bne.n	8009140 <__sfputc_r+0x1c>
 800913a:	bc10      	pop	{r4}
 800913c:	f7ff bdeb 	b.w	8008d16 <__swbuf_r>
 8009140:	6813      	ldr	r3, [r2, #0]
 8009142:	1c58      	adds	r0, r3, #1
 8009144:	6010      	str	r0, [r2, #0]
 8009146:	7019      	strb	r1, [r3, #0]
 8009148:	4608      	mov	r0, r1
 800914a:	bc10      	pop	{r4}
 800914c:	4770      	bx	lr

0800914e <__sfputs_r>:
 800914e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009150:	4606      	mov	r6, r0
 8009152:	460f      	mov	r7, r1
 8009154:	4614      	mov	r4, r2
 8009156:	18d5      	adds	r5, r2, r3
 8009158:	42ac      	cmp	r4, r5
 800915a:	d101      	bne.n	8009160 <__sfputs_r+0x12>
 800915c:	2000      	movs	r0, #0
 800915e:	e007      	b.n	8009170 <__sfputs_r+0x22>
 8009160:	463a      	mov	r2, r7
 8009162:	4630      	mov	r0, r6
 8009164:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009168:	f7ff ffdc 	bl	8009124 <__sfputc_r>
 800916c:	1c43      	adds	r3, r0, #1
 800916e:	d1f3      	bne.n	8009158 <__sfputs_r+0xa>
 8009170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009174 <_vfiprintf_r>:
 8009174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009178:	460d      	mov	r5, r1
 800917a:	4614      	mov	r4, r2
 800917c:	4698      	mov	r8, r3
 800917e:	4606      	mov	r6, r0
 8009180:	b09d      	sub	sp, #116	@ 0x74
 8009182:	b118      	cbz	r0, 800918c <_vfiprintf_r+0x18>
 8009184:	6a03      	ldr	r3, [r0, #32]
 8009186:	b90b      	cbnz	r3, 800918c <_vfiprintf_r+0x18>
 8009188:	f7ff fcd4 	bl	8008b34 <__sinit>
 800918c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800918e:	07d9      	lsls	r1, r3, #31
 8009190:	d405      	bmi.n	800919e <_vfiprintf_r+0x2a>
 8009192:	89ab      	ldrh	r3, [r5, #12]
 8009194:	059a      	lsls	r2, r3, #22
 8009196:	d402      	bmi.n	800919e <_vfiprintf_r+0x2a>
 8009198:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800919a:	f7ff feca 	bl	8008f32 <__retarget_lock_acquire_recursive>
 800919e:	89ab      	ldrh	r3, [r5, #12]
 80091a0:	071b      	lsls	r3, r3, #28
 80091a2:	d501      	bpl.n	80091a8 <_vfiprintf_r+0x34>
 80091a4:	692b      	ldr	r3, [r5, #16]
 80091a6:	b99b      	cbnz	r3, 80091d0 <_vfiprintf_r+0x5c>
 80091a8:	4629      	mov	r1, r5
 80091aa:	4630      	mov	r0, r6
 80091ac:	f7ff fdf2 	bl	8008d94 <__swsetup_r>
 80091b0:	b170      	cbz	r0, 80091d0 <_vfiprintf_r+0x5c>
 80091b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091b4:	07dc      	lsls	r4, r3, #31
 80091b6:	d504      	bpl.n	80091c2 <_vfiprintf_r+0x4e>
 80091b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80091bc:	b01d      	add	sp, #116	@ 0x74
 80091be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091c2:	89ab      	ldrh	r3, [r5, #12]
 80091c4:	0598      	lsls	r0, r3, #22
 80091c6:	d4f7      	bmi.n	80091b8 <_vfiprintf_r+0x44>
 80091c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091ca:	f7ff feb3 	bl	8008f34 <__retarget_lock_release_recursive>
 80091ce:	e7f3      	b.n	80091b8 <_vfiprintf_r+0x44>
 80091d0:	2300      	movs	r3, #0
 80091d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80091d4:	2320      	movs	r3, #32
 80091d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80091da:	2330      	movs	r3, #48	@ 0x30
 80091dc:	f04f 0901 	mov.w	r9, #1
 80091e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80091e4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009390 <_vfiprintf_r+0x21c>
 80091e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80091ec:	4623      	mov	r3, r4
 80091ee:	469a      	mov	sl, r3
 80091f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091f4:	b10a      	cbz	r2, 80091fa <_vfiprintf_r+0x86>
 80091f6:	2a25      	cmp	r2, #37	@ 0x25
 80091f8:	d1f9      	bne.n	80091ee <_vfiprintf_r+0x7a>
 80091fa:	ebba 0b04 	subs.w	fp, sl, r4
 80091fe:	d00b      	beq.n	8009218 <_vfiprintf_r+0xa4>
 8009200:	465b      	mov	r3, fp
 8009202:	4622      	mov	r2, r4
 8009204:	4629      	mov	r1, r5
 8009206:	4630      	mov	r0, r6
 8009208:	f7ff ffa1 	bl	800914e <__sfputs_r>
 800920c:	3001      	adds	r0, #1
 800920e:	f000 80a7 	beq.w	8009360 <_vfiprintf_r+0x1ec>
 8009212:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009214:	445a      	add	r2, fp
 8009216:	9209      	str	r2, [sp, #36]	@ 0x24
 8009218:	f89a 3000 	ldrb.w	r3, [sl]
 800921c:	2b00      	cmp	r3, #0
 800921e:	f000 809f 	beq.w	8009360 <_vfiprintf_r+0x1ec>
 8009222:	2300      	movs	r3, #0
 8009224:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009228:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800922c:	f10a 0a01 	add.w	sl, sl, #1
 8009230:	9304      	str	r3, [sp, #16]
 8009232:	9307      	str	r3, [sp, #28]
 8009234:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009238:	931a      	str	r3, [sp, #104]	@ 0x68
 800923a:	4654      	mov	r4, sl
 800923c:	2205      	movs	r2, #5
 800923e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009242:	4853      	ldr	r0, [pc, #332]	@ (8009390 <_vfiprintf_r+0x21c>)
 8009244:	f000 fbae 	bl	80099a4 <memchr>
 8009248:	9a04      	ldr	r2, [sp, #16]
 800924a:	b9d8      	cbnz	r0, 8009284 <_vfiprintf_r+0x110>
 800924c:	06d1      	lsls	r1, r2, #27
 800924e:	bf44      	itt	mi
 8009250:	2320      	movmi	r3, #32
 8009252:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009256:	0713      	lsls	r3, r2, #28
 8009258:	bf44      	itt	mi
 800925a:	232b      	movmi	r3, #43	@ 0x2b
 800925c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009260:	f89a 3000 	ldrb.w	r3, [sl]
 8009264:	2b2a      	cmp	r3, #42	@ 0x2a
 8009266:	d015      	beq.n	8009294 <_vfiprintf_r+0x120>
 8009268:	4654      	mov	r4, sl
 800926a:	2000      	movs	r0, #0
 800926c:	f04f 0c0a 	mov.w	ip, #10
 8009270:	9a07      	ldr	r2, [sp, #28]
 8009272:	4621      	mov	r1, r4
 8009274:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009278:	3b30      	subs	r3, #48	@ 0x30
 800927a:	2b09      	cmp	r3, #9
 800927c:	d94b      	bls.n	8009316 <_vfiprintf_r+0x1a2>
 800927e:	b1b0      	cbz	r0, 80092ae <_vfiprintf_r+0x13a>
 8009280:	9207      	str	r2, [sp, #28]
 8009282:	e014      	b.n	80092ae <_vfiprintf_r+0x13a>
 8009284:	eba0 0308 	sub.w	r3, r0, r8
 8009288:	fa09 f303 	lsl.w	r3, r9, r3
 800928c:	4313      	orrs	r3, r2
 800928e:	46a2      	mov	sl, r4
 8009290:	9304      	str	r3, [sp, #16]
 8009292:	e7d2      	b.n	800923a <_vfiprintf_r+0xc6>
 8009294:	9b03      	ldr	r3, [sp, #12]
 8009296:	1d19      	adds	r1, r3, #4
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	9103      	str	r1, [sp, #12]
 800929c:	2b00      	cmp	r3, #0
 800929e:	bfbb      	ittet	lt
 80092a0:	425b      	neglt	r3, r3
 80092a2:	f042 0202 	orrlt.w	r2, r2, #2
 80092a6:	9307      	strge	r3, [sp, #28]
 80092a8:	9307      	strlt	r3, [sp, #28]
 80092aa:	bfb8      	it	lt
 80092ac:	9204      	strlt	r2, [sp, #16]
 80092ae:	7823      	ldrb	r3, [r4, #0]
 80092b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80092b2:	d10a      	bne.n	80092ca <_vfiprintf_r+0x156>
 80092b4:	7863      	ldrb	r3, [r4, #1]
 80092b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80092b8:	d132      	bne.n	8009320 <_vfiprintf_r+0x1ac>
 80092ba:	9b03      	ldr	r3, [sp, #12]
 80092bc:	3402      	adds	r4, #2
 80092be:	1d1a      	adds	r2, r3, #4
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	9203      	str	r2, [sp, #12]
 80092c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80092c8:	9305      	str	r3, [sp, #20]
 80092ca:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009394 <_vfiprintf_r+0x220>
 80092ce:	2203      	movs	r2, #3
 80092d0:	4650      	mov	r0, sl
 80092d2:	7821      	ldrb	r1, [r4, #0]
 80092d4:	f000 fb66 	bl	80099a4 <memchr>
 80092d8:	b138      	cbz	r0, 80092ea <_vfiprintf_r+0x176>
 80092da:	2240      	movs	r2, #64	@ 0x40
 80092dc:	9b04      	ldr	r3, [sp, #16]
 80092de:	eba0 000a 	sub.w	r0, r0, sl
 80092e2:	4082      	lsls	r2, r0
 80092e4:	4313      	orrs	r3, r2
 80092e6:	3401      	adds	r4, #1
 80092e8:	9304      	str	r3, [sp, #16]
 80092ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092ee:	2206      	movs	r2, #6
 80092f0:	4829      	ldr	r0, [pc, #164]	@ (8009398 <_vfiprintf_r+0x224>)
 80092f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80092f6:	f000 fb55 	bl	80099a4 <memchr>
 80092fa:	2800      	cmp	r0, #0
 80092fc:	d03f      	beq.n	800937e <_vfiprintf_r+0x20a>
 80092fe:	4b27      	ldr	r3, [pc, #156]	@ (800939c <_vfiprintf_r+0x228>)
 8009300:	bb1b      	cbnz	r3, 800934a <_vfiprintf_r+0x1d6>
 8009302:	9b03      	ldr	r3, [sp, #12]
 8009304:	3307      	adds	r3, #7
 8009306:	f023 0307 	bic.w	r3, r3, #7
 800930a:	3308      	adds	r3, #8
 800930c:	9303      	str	r3, [sp, #12]
 800930e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009310:	443b      	add	r3, r7
 8009312:	9309      	str	r3, [sp, #36]	@ 0x24
 8009314:	e76a      	b.n	80091ec <_vfiprintf_r+0x78>
 8009316:	460c      	mov	r4, r1
 8009318:	2001      	movs	r0, #1
 800931a:	fb0c 3202 	mla	r2, ip, r2, r3
 800931e:	e7a8      	b.n	8009272 <_vfiprintf_r+0xfe>
 8009320:	2300      	movs	r3, #0
 8009322:	f04f 0c0a 	mov.w	ip, #10
 8009326:	4619      	mov	r1, r3
 8009328:	3401      	adds	r4, #1
 800932a:	9305      	str	r3, [sp, #20]
 800932c:	4620      	mov	r0, r4
 800932e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009332:	3a30      	subs	r2, #48	@ 0x30
 8009334:	2a09      	cmp	r2, #9
 8009336:	d903      	bls.n	8009340 <_vfiprintf_r+0x1cc>
 8009338:	2b00      	cmp	r3, #0
 800933a:	d0c6      	beq.n	80092ca <_vfiprintf_r+0x156>
 800933c:	9105      	str	r1, [sp, #20]
 800933e:	e7c4      	b.n	80092ca <_vfiprintf_r+0x156>
 8009340:	4604      	mov	r4, r0
 8009342:	2301      	movs	r3, #1
 8009344:	fb0c 2101 	mla	r1, ip, r1, r2
 8009348:	e7f0      	b.n	800932c <_vfiprintf_r+0x1b8>
 800934a:	ab03      	add	r3, sp, #12
 800934c:	9300      	str	r3, [sp, #0]
 800934e:	462a      	mov	r2, r5
 8009350:	4630      	mov	r0, r6
 8009352:	4b13      	ldr	r3, [pc, #76]	@ (80093a0 <_vfiprintf_r+0x22c>)
 8009354:	a904      	add	r1, sp, #16
 8009356:	f3af 8000 	nop.w
 800935a:	4607      	mov	r7, r0
 800935c:	1c78      	adds	r0, r7, #1
 800935e:	d1d6      	bne.n	800930e <_vfiprintf_r+0x19a>
 8009360:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009362:	07d9      	lsls	r1, r3, #31
 8009364:	d405      	bmi.n	8009372 <_vfiprintf_r+0x1fe>
 8009366:	89ab      	ldrh	r3, [r5, #12]
 8009368:	059a      	lsls	r2, r3, #22
 800936a:	d402      	bmi.n	8009372 <_vfiprintf_r+0x1fe>
 800936c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800936e:	f7ff fde1 	bl	8008f34 <__retarget_lock_release_recursive>
 8009372:	89ab      	ldrh	r3, [r5, #12]
 8009374:	065b      	lsls	r3, r3, #25
 8009376:	f53f af1f 	bmi.w	80091b8 <_vfiprintf_r+0x44>
 800937a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800937c:	e71e      	b.n	80091bc <_vfiprintf_r+0x48>
 800937e:	ab03      	add	r3, sp, #12
 8009380:	9300      	str	r3, [sp, #0]
 8009382:	462a      	mov	r2, r5
 8009384:	4630      	mov	r0, r6
 8009386:	4b06      	ldr	r3, [pc, #24]	@ (80093a0 <_vfiprintf_r+0x22c>)
 8009388:	a904      	add	r1, sp, #16
 800938a:	f000 f87d 	bl	8009488 <_printf_i>
 800938e:	e7e4      	b.n	800935a <_vfiprintf_r+0x1e6>
 8009390:	08009b7a 	.word	0x08009b7a
 8009394:	08009b80 	.word	0x08009b80
 8009398:	08009b84 	.word	0x08009b84
 800939c:	00000000 	.word	0x00000000
 80093a0:	0800914f 	.word	0x0800914f

080093a4 <_printf_common>:
 80093a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093a8:	4616      	mov	r6, r2
 80093aa:	4698      	mov	r8, r3
 80093ac:	688a      	ldr	r2, [r1, #8]
 80093ae:	690b      	ldr	r3, [r1, #16]
 80093b0:	4607      	mov	r7, r0
 80093b2:	4293      	cmp	r3, r2
 80093b4:	bfb8      	it	lt
 80093b6:	4613      	movlt	r3, r2
 80093b8:	6033      	str	r3, [r6, #0]
 80093ba:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80093be:	460c      	mov	r4, r1
 80093c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80093c4:	b10a      	cbz	r2, 80093ca <_printf_common+0x26>
 80093c6:	3301      	adds	r3, #1
 80093c8:	6033      	str	r3, [r6, #0]
 80093ca:	6823      	ldr	r3, [r4, #0]
 80093cc:	0699      	lsls	r1, r3, #26
 80093ce:	bf42      	ittt	mi
 80093d0:	6833      	ldrmi	r3, [r6, #0]
 80093d2:	3302      	addmi	r3, #2
 80093d4:	6033      	strmi	r3, [r6, #0]
 80093d6:	6825      	ldr	r5, [r4, #0]
 80093d8:	f015 0506 	ands.w	r5, r5, #6
 80093dc:	d106      	bne.n	80093ec <_printf_common+0x48>
 80093de:	f104 0a19 	add.w	sl, r4, #25
 80093e2:	68e3      	ldr	r3, [r4, #12]
 80093e4:	6832      	ldr	r2, [r6, #0]
 80093e6:	1a9b      	subs	r3, r3, r2
 80093e8:	42ab      	cmp	r3, r5
 80093ea:	dc2b      	bgt.n	8009444 <_printf_common+0xa0>
 80093ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80093f0:	6822      	ldr	r2, [r4, #0]
 80093f2:	3b00      	subs	r3, #0
 80093f4:	bf18      	it	ne
 80093f6:	2301      	movne	r3, #1
 80093f8:	0692      	lsls	r2, r2, #26
 80093fa:	d430      	bmi.n	800945e <_printf_common+0xba>
 80093fc:	4641      	mov	r1, r8
 80093fe:	4638      	mov	r0, r7
 8009400:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009404:	47c8      	blx	r9
 8009406:	3001      	adds	r0, #1
 8009408:	d023      	beq.n	8009452 <_printf_common+0xae>
 800940a:	6823      	ldr	r3, [r4, #0]
 800940c:	6922      	ldr	r2, [r4, #16]
 800940e:	f003 0306 	and.w	r3, r3, #6
 8009412:	2b04      	cmp	r3, #4
 8009414:	bf14      	ite	ne
 8009416:	2500      	movne	r5, #0
 8009418:	6833      	ldreq	r3, [r6, #0]
 800941a:	f04f 0600 	mov.w	r6, #0
 800941e:	bf08      	it	eq
 8009420:	68e5      	ldreq	r5, [r4, #12]
 8009422:	f104 041a 	add.w	r4, r4, #26
 8009426:	bf08      	it	eq
 8009428:	1aed      	subeq	r5, r5, r3
 800942a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800942e:	bf08      	it	eq
 8009430:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009434:	4293      	cmp	r3, r2
 8009436:	bfc4      	itt	gt
 8009438:	1a9b      	subgt	r3, r3, r2
 800943a:	18ed      	addgt	r5, r5, r3
 800943c:	42b5      	cmp	r5, r6
 800943e:	d11a      	bne.n	8009476 <_printf_common+0xd2>
 8009440:	2000      	movs	r0, #0
 8009442:	e008      	b.n	8009456 <_printf_common+0xb2>
 8009444:	2301      	movs	r3, #1
 8009446:	4652      	mov	r2, sl
 8009448:	4641      	mov	r1, r8
 800944a:	4638      	mov	r0, r7
 800944c:	47c8      	blx	r9
 800944e:	3001      	adds	r0, #1
 8009450:	d103      	bne.n	800945a <_printf_common+0xb6>
 8009452:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800945a:	3501      	adds	r5, #1
 800945c:	e7c1      	b.n	80093e2 <_printf_common+0x3e>
 800945e:	2030      	movs	r0, #48	@ 0x30
 8009460:	18e1      	adds	r1, r4, r3
 8009462:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009466:	1c5a      	adds	r2, r3, #1
 8009468:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800946c:	4422      	add	r2, r4
 800946e:	3302      	adds	r3, #2
 8009470:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009474:	e7c2      	b.n	80093fc <_printf_common+0x58>
 8009476:	2301      	movs	r3, #1
 8009478:	4622      	mov	r2, r4
 800947a:	4641      	mov	r1, r8
 800947c:	4638      	mov	r0, r7
 800947e:	47c8      	blx	r9
 8009480:	3001      	adds	r0, #1
 8009482:	d0e6      	beq.n	8009452 <_printf_common+0xae>
 8009484:	3601      	adds	r6, #1
 8009486:	e7d9      	b.n	800943c <_printf_common+0x98>

08009488 <_printf_i>:
 8009488:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800948c:	7e0f      	ldrb	r7, [r1, #24]
 800948e:	4691      	mov	r9, r2
 8009490:	2f78      	cmp	r7, #120	@ 0x78
 8009492:	4680      	mov	r8, r0
 8009494:	460c      	mov	r4, r1
 8009496:	469a      	mov	sl, r3
 8009498:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800949a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800949e:	d807      	bhi.n	80094b0 <_printf_i+0x28>
 80094a0:	2f62      	cmp	r7, #98	@ 0x62
 80094a2:	d80a      	bhi.n	80094ba <_printf_i+0x32>
 80094a4:	2f00      	cmp	r7, #0
 80094a6:	f000 80d1 	beq.w	800964c <_printf_i+0x1c4>
 80094aa:	2f58      	cmp	r7, #88	@ 0x58
 80094ac:	f000 80b8 	beq.w	8009620 <_printf_i+0x198>
 80094b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80094b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80094b8:	e03a      	b.n	8009530 <_printf_i+0xa8>
 80094ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80094be:	2b15      	cmp	r3, #21
 80094c0:	d8f6      	bhi.n	80094b0 <_printf_i+0x28>
 80094c2:	a101      	add	r1, pc, #4	@ (adr r1, 80094c8 <_printf_i+0x40>)
 80094c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80094c8:	08009521 	.word	0x08009521
 80094cc:	08009535 	.word	0x08009535
 80094d0:	080094b1 	.word	0x080094b1
 80094d4:	080094b1 	.word	0x080094b1
 80094d8:	080094b1 	.word	0x080094b1
 80094dc:	080094b1 	.word	0x080094b1
 80094e0:	08009535 	.word	0x08009535
 80094e4:	080094b1 	.word	0x080094b1
 80094e8:	080094b1 	.word	0x080094b1
 80094ec:	080094b1 	.word	0x080094b1
 80094f0:	080094b1 	.word	0x080094b1
 80094f4:	08009633 	.word	0x08009633
 80094f8:	0800955f 	.word	0x0800955f
 80094fc:	080095ed 	.word	0x080095ed
 8009500:	080094b1 	.word	0x080094b1
 8009504:	080094b1 	.word	0x080094b1
 8009508:	08009655 	.word	0x08009655
 800950c:	080094b1 	.word	0x080094b1
 8009510:	0800955f 	.word	0x0800955f
 8009514:	080094b1 	.word	0x080094b1
 8009518:	080094b1 	.word	0x080094b1
 800951c:	080095f5 	.word	0x080095f5
 8009520:	6833      	ldr	r3, [r6, #0]
 8009522:	1d1a      	adds	r2, r3, #4
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	6032      	str	r2, [r6, #0]
 8009528:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800952c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009530:	2301      	movs	r3, #1
 8009532:	e09c      	b.n	800966e <_printf_i+0x1e6>
 8009534:	6833      	ldr	r3, [r6, #0]
 8009536:	6820      	ldr	r0, [r4, #0]
 8009538:	1d19      	adds	r1, r3, #4
 800953a:	6031      	str	r1, [r6, #0]
 800953c:	0606      	lsls	r6, r0, #24
 800953e:	d501      	bpl.n	8009544 <_printf_i+0xbc>
 8009540:	681d      	ldr	r5, [r3, #0]
 8009542:	e003      	b.n	800954c <_printf_i+0xc4>
 8009544:	0645      	lsls	r5, r0, #25
 8009546:	d5fb      	bpl.n	8009540 <_printf_i+0xb8>
 8009548:	f9b3 5000 	ldrsh.w	r5, [r3]
 800954c:	2d00      	cmp	r5, #0
 800954e:	da03      	bge.n	8009558 <_printf_i+0xd0>
 8009550:	232d      	movs	r3, #45	@ 0x2d
 8009552:	426d      	negs	r5, r5
 8009554:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009558:	230a      	movs	r3, #10
 800955a:	4858      	ldr	r0, [pc, #352]	@ (80096bc <_printf_i+0x234>)
 800955c:	e011      	b.n	8009582 <_printf_i+0xfa>
 800955e:	6821      	ldr	r1, [r4, #0]
 8009560:	6833      	ldr	r3, [r6, #0]
 8009562:	0608      	lsls	r0, r1, #24
 8009564:	f853 5b04 	ldr.w	r5, [r3], #4
 8009568:	d402      	bmi.n	8009570 <_printf_i+0xe8>
 800956a:	0649      	lsls	r1, r1, #25
 800956c:	bf48      	it	mi
 800956e:	b2ad      	uxthmi	r5, r5
 8009570:	2f6f      	cmp	r7, #111	@ 0x6f
 8009572:	6033      	str	r3, [r6, #0]
 8009574:	bf14      	ite	ne
 8009576:	230a      	movne	r3, #10
 8009578:	2308      	moveq	r3, #8
 800957a:	4850      	ldr	r0, [pc, #320]	@ (80096bc <_printf_i+0x234>)
 800957c:	2100      	movs	r1, #0
 800957e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009582:	6866      	ldr	r6, [r4, #4]
 8009584:	2e00      	cmp	r6, #0
 8009586:	60a6      	str	r6, [r4, #8]
 8009588:	db05      	blt.n	8009596 <_printf_i+0x10e>
 800958a:	6821      	ldr	r1, [r4, #0]
 800958c:	432e      	orrs	r6, r5
 800958e:	f021 0104 	bic.w	r1, r1, #4
 8009592:	6021      	str	r1, [r4, #0]
 8009594:	d04b      	beq.n	800962e <_printf_i+0x1a6>
 8009596:	4616      	mov	r6, r2
 8009598:	fbb5 f1f3 	udiv	r1, r5, r3
 800959c:	fb03 5711 	mls	r7, r3, r1, r5
 80095a0:	5dc7      	ldrb	r7, [r0, r7]
 80095a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80095a6:	462f      	mov	r7, r5
 80095a8:	42bb      	cmp	r3, r7
 80095aa:	460d      	mov	r5, r1
 80095ac:	d9f4      	bls.n	8009598 <_printf_i+0x110>
 80095ae:	2b08      	cmp	r3, #8
 80095b0:	d10b      	bne.n	80095ca <_printf_i+0x142>
 80095b2:	6823      	ldr	r3, [r4, #0]
 80095b4:	07df      	lsls	r7, r3, #31
 80095b6:	d508      	bpl.n	80095ca <_printf_i+0x142>
 80095b8:	6923      	ldr	r3, [r4, #16]
 80095ba:	6861      	ldr	r1, [r4, #4]
 80095bc:	4299      	cmp	r1, r3
 80095be:	bfde      	ittt	le
 80095c0:	2330      	movle	r3, #48	@ 0x30
 80095c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80095c6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80095ca:	1b92      	subs	r2, r2, r6
 80095cc:	6122      	str	r2, [r4, #16]
 80095ce:	464b      	mov	r3, r9
 80095d0:	4621      	mov	r1, r4
 80095d2:	4640      	mov	r0, r8
 80095d4:	f8cd a000 	str.w	sl, [sp]
 80095d8:	aa03      	add	r2, sp, #12
 80095da:	f7ff fee3 	bl	80093a4 <_printf_common>
 80095de:	3001      	adds	r0, #1
 80095e0:	d14a      	bne.n	8009678 <_printf_i+0x1f0>
 80095e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80095e6:	b004      	add	sp, #16
 80095e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095ec:	6823      	ldr	r3, [r4, #0]
 80095ee:	f043 0320 	orr.w	r3, r3, #32
 80095f2:	6023      	str	r3, [r4, #0]
 80095f4:	2778      	movs	r7, #120	@ 0x78
 80095f6:	4832      	ldr	r0, [pc, #200]	@ (80096c0 <_printf_i+0x238>)
 80095f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80095fc:	6823      	ldr	r3, [r4, #0]
 80095fe:	6831      	ldr	r1, [r6, #0]
 8009600:	061f      	lsls	r7, r3, #24
 8009602:	f851 5b04 	ldr.w	r5, [r1], #4
 8009606:	d402      	bmi.n	800960e <_printf_i+0x186>
 8009608:	065f      	lsls	r7, r3, #25
 800960a:	bf48      	it	mi
 800960c:	b2ad      	uxthmi	r5, r5
 800960e:	6031      	str	r1, [r6, #0]
 8009610:	07d9      	lsls	r1, r3, #31
 8009612:	bf44      	itt	mi
 8009614:	f043 0320 	orrmi.w	r3, r3, #32
 8009618:	6023      	strmi	r3, [r4, #0]
 800961a:	b11d      	cbz	r5, 8009624 <_printf_i+0x19c>
 800961c:	2310      	movs	r3, #16
 800961e:	e7ad      	b.n	800957c <_printf_i+0xf4>
 8009620:	4826      	ldr	r0, [pc, #152]	@ (80096bc <_printf_i+0x234>)
 8009622:	e7e9      	b.n	80095f8 <_printf_i+0x170>
 8009624:	6823      	ldr	r3, [r4, #0]
 8009626:	f023 0320 	bic.w	r3, r3, #32
 800962a:	6023      	str	r3, [r4, #0]
 800962c:	e7f6      	b.n	800961c <_printf_i+0x194>
 800962e:	4616      	mov	r6, r2
 8009630:	e7bd      	b.n	80095ae <_printf_i+0x126>
 8009632:	6833      	ldr	r3, [r6, #0]
 8009634:	6825      	ldr	r5, [r4, #0]
 8009636:	1d18      	adds	r0, r3, #4
 8009638:	6961      	ldr	r1, [r4, #20]
 800963a:	6030      	str	r0, [r6, #0]
 800963c:	062e      	lsls	r6, r5, #24
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	d501      	bpl.n	8009646 <_printf_i+0x1be>
 8009642:	6019      	str	r1, [r3, #0]
 8009644:	e002      	b.n	800964c <_printf_i+0x1c4>
 8009646:	0668      	lsls	r0, r5, #25
 8009648:	d5fb      	bpl.n	8009642 <_printf_i+0x1ba>
 800964a:	8019      	strh	r1, [r3, #0]
 800964c:	2300      	movs	r3, #0
 800964e:	4616      	mov	r6, r2
 8009650:	6123      	str	r3, [r4, #16]
 8009652:	e7bc      	b.n	80095ce <_printf_i+0x146>
 8009654:	6833      	ldr	r3, [r6, #0]
 8009656:	2100      	movs	r1, #0
 8009658:	1d1a      	adds	r2, r3, #4
 800965a:	6032      	str	r2, [r6, #0]
 800965c:	681e      	ldr	r6, [r3, #0]
 800965e:	6862      	ldr	r2, [r4, #4]
 8009660:	4630      	mov	r0, r6
 8009662:	f000 f99f 	bl	80099a4 <memchr>
 8009666:	b108      	cbz	r0, 800966c <_printf_i+0x1e4>
 8009668:	1b80      	subs	r0, r0, r6
 800966a:	6060      	str	r0, [r4, #4]
 800966c:	6863      	ldr	r3, [r4, #4]
 800966e:	6123      	str	r3, [r4, #16]
 8009670:	2300      	movs	r3, #0
 8009672:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009676:	e7aa      	b.n	80095ce <_printf_i+0x146>
 8009678:	4632      	mov	r2, r6
 800967a:	4649      	mov	r1, r9
 800967c:	4640      	mov	r0, r8
 800967e:	6923      	ldr	r3, [r4, #16]
 8009680:	47d0      	blx	sl
 8009682:	3001      	adds	r0, #1
 8009684:	d0ad      	beq.n	80095e2 <_printf_i+0x15a>
 8009686:	6823      	ldr	r3, [r4, #0]
 8009688:	079b      	lsls	r3, r3, #30
 800968a:	d413      	bmi.n	80096b4 <_printf_i+0x22c>
 800968c:	68e0      	ldr	r0, [r4, #12]
 800968e:	9b03      	ldr	r3, [sp, #12]
 8009690:	4298      	cmp	r0, r3
 8009692:	bfb8      	it	lt
 8009694:	4618      	movlt	r0, r3
 8009696:	e7a6      	b.n	80095e6 <_printf_i+0x15e>
 8009698:	2301      	movs	r3, #1
 800969a:	4632      	mov	r2, r6
 800969c:	4649      	mov	r1, r9
 800969e:	4640      	mov	r0, r8
 80096a0:	47d0      	blx	sl
 80096a2:	3001      	adds	r0, #1
 80096a4:	d09d      	beq.n	80095e2 <_printf_i+0x15a>
 80096a6:	3501      	adds	r5, #1
 80096a8:	68e3      	ldr	r3, [r4, #12]
 80096aa:	9903      	ldr	r1, [sp, #12]
 80096ac:	1a5b      	subs	r3, r3, r1
 80096ae:	42ab      	cmp	r3, r5
 80096b0:	dcf2      	bgt.n	8009698 <_printf_i+0x210>
 80096b2:	e7eb      	b.n	800968c <_printf_i+0x204>
 80096b4:	2500      	movs	r5, #0
 80096b6:	f104 0619 	add.w	r6, r4, #25
 80096ba:	e7f5      	b.n	80096a8 <_printf_i+0x220>
 80096bc:	08009b8b 	.word	0x08009b8b
 80096c0:	08009b9c 	.word	0x08009b9c

080096c4 <__sflush_r>:
 80096c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80096c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ca:	0716      	lsls	r6, r2, #28
 80096cc:	4605      	mov	r5, r0
 80096ce:	460c      	mov	r4, r1
 80096d0:	d454      	bmi.n	800977c <__sflush_r+0xb8>
 80096d2:	684b      	ldr	r3, [r1, #4]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	dc02      	bgt.n	80096de <__sflush_r+0x1a>
 80096d8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80096da:	2b00      	cmp	r3, #0
 80096dc:	dd48      	ble.n	8009770 <__sflush_r+0xac>
 80096de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80096e0:	2e00      	cmp	r6, #0
 80096e2:	d045      	beq.n	8009770 <__sflush_r+0xac>
 80096e4:	2300      	movs	r3, #0
 80096e6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80096ea:	682f      	ldr	r7, [r5, #0]
 80096ec:	6a21      	ldr	r1, [r4, #32]
 80096ee:	602b      	str	r3, [r5, #0]
 80096f0:	d030      	beq.n	8009754 <__sflush_r+0x90>
 80096f2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80096f4:	89a3      	ldrh	r3, [r4, #12]
 80096f6:	0759      	lsls	r1, r3, #29
 80096f8:	d505      	bpl.n	8009706 <__sflush_r+0x42>
 80096fa:	6863      	ldr	r3, [r4, #4]
 80096fc:	1ad2      	subs	r2, r2, r3
 80096fe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009700:	b10b      	cbz	r3, 8009706 <__sflush_r+0x42>
 8009702:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009704:	1ad2      	subs	r2, r2, r3
 8009706:	2300      	movs	r3, #0
 8009708:	4628      	mov	r0, r5
 800970a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800970c:	6a21      	ldr	r1, [r4, #32]
 800970e:	47b0      	blx	r6
 8009710:	1c43      	adds	r3, r0, #1
 8009712:	89a3      	ldrh	r3, [r4, #12]
 8009714:	d106      	bne.n	8009724 <__sflush_r+0x60>
 8009716:	6829      	ldr	r1, [r5, #0]
 8009718:	291d      	cmp	r1, #29
 800971a:	d82b      	bhi.n	8009774 <__sflush_r+0xb0>
 800971c:	4a28      	ldr	r2, [pc, #160]	@ (80097c0 <__sflush_r+0xfc>)
 800971e:	40ca      	lsrs	r2, r1
 8009720:	07d6      	lsls	r6, r2, #31
 8009722:	d527      	bpl.n	8009774 <__sflush_r+0xb0>
 8009724:	2200      	movs	r2, #0
 8009726:	6062      	str	r2, [r4, #4]
 8009728:	6922      	ldr	r2, [r4, #16]
 800972a:	04d9      	lsls	r1, r3, #19
 800972c:	6022      	str	r2, [r4, #0]
 800972e:	d504      	bpl.n	800973a <__sflush_r+0x76>
 8009730:	1c42      	adds	r2, r0, #1
 8009732:	d101      	bne.n	8009738 <__sflush_r+0x74>
 8009734:	682b      	ldr	r3, [r5, #0]
 8009736:	b903      	cbnz	r3, 800973a <__sflush_r+0x76>
 8009738:	6560      	str	r0, [r4, #84]	@ 0x54
 800973a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800973c:	602f      	str	r7, [r5, #0]
 800973e:	b1b9      	cbz	r1, 8009770 <__sflush_r+0xac>
 8009740:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009744:	4299      	cmp	r1, r3
 8009746:	d002      	beq.n	800974e <__sflush_r+0x8a>
 8009748:	4628      	mov	r0, r5
 800974a:	f7ff fbf5 	bl	8008f38 <_free_r>
 800974e:	2300      	movs	r3, #0
 8009750:	6363      	str	r3, [r4, #52]	@ 0x34
 8009752:	e00d      	b.n	8009770 <__sflush_r+0xac>
 8009754:	2301      	movs	r3, #1
 8009756:	4628      	mov	r0, r5
 8009758:	47b0      	blx	r6
 800975a:	4602      	mov	r2, r0
 800975c:	1c50      	adds	r0, r2, #1
 800975e:	d1c9      	bne.n	80096f4 <__sflush_r+0x30>
 8009760:	682b      	ldr	r3, [r5, #0]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d0c6      	beq.n	80096f4 <__sflush_r+0x30>
 8009766:	2b1d      	cmp	r3, #29
 8009768:	d001      	beq.n	800976e <__sflush_r+0xaa>
 800976a:	2b16      	cmp	r3, #22
 800976c:	d11d      	bne.n	80097aa <__sflush_r+0xe6>
 800976e:	602f      	str	r7, [r5, #0]
 8009770:	2000      	movs	r0, #0
 8009772:	e021      	b.n	80097b8 <__sflush_r+0xf4>
 8009774:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009778:	b21b      	sxth	r3, r3
 800977a:	e01a      	b.n	80097b2 <__sflush_r+0xee>
 800977c:	690f      	ldr	r7, [r1, #16]
 800977e:	2f00      	cmp	r7, #0
 8009780:	d0f6      	beq.n	8009770 <__sflush_r+0xac>
 8009782:	0793      	lsls	r3, r2, #30
 8009784:	bf18      	it	ne
 8009786:	2300      	movne	r3, #0
 8009788:	680e      	ldr	r6, [r1, #0]
 800978a:	bf08      	it	eq
 800978c:	694b      	ldreq	r3, [r1, #20]
 800978e:	1bf6      	subs	r6, r6, r7
 8009790:	600f      	str	r7, [r1, #0]
 8009792:	608b      	str	r3, [r1, #8]
 8009794:	2e00      	cmp	r6, #0
 8009796:	ddeb      	ble.n	8009770 <__sflush_r+0xac>
 8009798:	4633      	mov	r3, r6
 800979a:	463a      	mov	r2, r7
 800979c:	4628      	mov	r0, r5
 800979e:	6a21      	ldr	r1, [r4, #32]
 80097a0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80097a4:	47e0      	blx	ip
 80097a6:	2800      	cmp	r0, #0
 80097a8:	dc07      	bgt.n	80097ba <__sflush_r+0xf6>
 80097aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80097b6:	81a3      	strh	r3, [r4, #12]
 80097b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097ba:	4407      	add	r7, r0
 80097bc:	1a36      	subs	r6, r6, r0
 80097be:	e7e9      	b.n	8009794 <__sflush_r+0xd0>
 80097c0:	20400001 	.word	0x20400001

080097c4 <_fflush_r>:
 80097c4:	b538      	push	{r3, r4, r5, lr}
 80097c6:	690b      	ldr	r3, [r1, #16]
 80097c8:	4605      	mov	r5, r0
 80097ca:	460c      	mov	r4, r1
 80097cc:	b913      	cbnz	r3, 80097d4 <_fflush_r+0x10>
 80097ce:	2500      	movs	r5, #0
 80097d0:	4628      	mov	r0, r5
 80097d2:	bd38      	pop	{r3, r4, r5, pc}
 80097d4:	b118      	cbz	r0, 80097de <_fflush_r+0x1a>
 80097d6:	6a03      	ldr	r3, [r0, #32]
 80097d8:	b90b      	cbnz	r3, 80097de <_fflush_r+0x1a>
 80097da:	f7ff f9ab 	bl	8008b34 <__sinit>
 80097de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d0f3      	beq.n	80097ce <_fflush_r+0xa>
 80097e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80097e8:	07d0      	lsls	r0, r2, #31
 80097ea:	d404      	bmi.n	80097f6 <_fflush_r+0x32>
 80097ec:	0599      	lsls	r1, r3, #22
 80097ee:	d402      	bmi.n	80097f6 <_fflush_r+0x32>
 80097f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80097f2:	f7ff fb9e 	bl	8008f32 <__retarget_lock_acquire_recursive>
 80097f6:	4628      	mov	r0, r5
 80097f8:	4621      	mov	r1, r4
 80097fa:	f7ff ff63 	bl	80096c4 <__sflush_r>
 80097fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009800:	4605      	mov	r5, r0
 8009802:	07da      	lsls	r2, r3, #31
 8009804:	d4e4      	bmi.n	80097d0 <_fflush_r+0xc>
 8009806:	89a3      	ldrh	r3, [r4, #12]
 8009808:	059b      	lsls	r3, r3, #22
 800980a:	d4e1      	bmi.n	80097d0 <_fflush_r+0xc>
 800980c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800980e:	f7ff fb91 	bl	8008f34 <__retarget_lock_release_recursive>
 8009812:	e7dd      	b.n	80097d0 <_fflush_r+0xc>

08009814 <__swhatbuf_r>:
 8009814:	b570      	push	{r4, r5, r6, lr}
 8009816:	460c      	mov	r4, r1
 8009818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800981c:	4615      	mov	r5, r2
 800981e:	2900      	cmp	r1, #0
 8009820:	461e      	mov	r6, r3
 8009822:	b096      	sub	sp, #88	@ 0x58
 8009824:	da0c      	bge.n	8009840 <__swhatbuf_r+0x2c>
 8009826:	89a3      	ldrh	r3, [r4, #12]
 8009828:	2100      	movs	r1, #0
 800982a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800982e:	bf14      	ite	ne
 8009830:	2340      	movne	r3, #64	@ 0x40
 8009832:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009836:	2000      	movs	r0, #0
 8009838:	6031      	str	r1, [r6, #0]
 800983a:	602b      	str	r3, [r5, #0]
 800983c:	b016      	add	sp, #88	@ 0x58
 800983e:	bd70      	pop	{r4, r5, r6, pc}
 8009840:	466a      	mov	r2, sp
 8009842:	f000 f87d 	bl	8009940 <_fstat_r>
 8009846:	2800      	cmp	r0, #0
 8009848:	dbed      	blt.n	8009826 <__swhatbuf_r+0x12>
 800984a:	9901      	ldr	r1, [sp, #4]
 800984c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009850:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009854:	4259      	negs	r1, r3
 8009856:	4159      	adcs	r1, r3
 8009858:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800985c:	e7eb      	b.n	8009836 <__swhatbuf_r+0x22>

0800985e <__smakebuf_r>:
 800985e:	898b      	ldrh	r3, [r1, #12]
 8009860:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009862:	079d      	lsls	r5, r3, #30
 8009864:	4606      	mov	r6, r0
 8009866:	460c      	mov	r4, r1
 8009868:	d507      	bpl.n	800987a <__smakebuf_r+0x1c>
 800986a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800986e:	6023      	str	r3, [r4, #0]
 8009870:	6123      	str	r3, [r4, #16]
 8009872:	2301      	movs	r3, #1
 8009874:	6163      	str	r3, [r4, #20]
 8009876:	b003      	add	sp, #12
 8009878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800987a:	466a      	mov	r2, sp
 800987c:	ab01      	add	r3, sp, #4
 800987e:	f7ff ffc9 	bl	8009814 <__swhatbuf_r>
 8009882:	9f00      	ldr	r7, [sp, #0]
 8009884:	4605      	mov	r5, r0
 8009886:	4639      	mov	r1, r7
 8009888:	4630      	mov	r0, r6
 800988a:	f7ff fbbf 	bl	800900c <_malloc_r>
 800988e:	b948      	cbnz	r0, 80098a4 <__smakebuf_r+0x46>
 8009890:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009894:	059a      	lsls	r2, r3, #22
 8009896:	d4ee      	bmi.n	8009876 <__smakebuf_r+0x18>
 8009898:	f023 0303 	bic.w	r3, r3, #3
 800989c:	f043 0302 	orr.w	r3, r3, #2
 80098a0:	81a3      	strh	r3, [r4, #12]
 80098a2:	e7e2      	b.n	800986a <__smakebuf_r+0xc>
 80098a4:	89a3      	ldrh	r3, [r4, #12]
 80098a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80098aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098ae:	81a3      	strh	r3, [r4, #12]
 80098b0:	9b01      	ldr	r3, [sp, #4]
 80098b2:	6020      	str	r0, [r4, #0]
 80098b4:	b15b      	cbz	r3, 80098ce <__smakebuf_r+0x70>
 80098b6:	4630      	mov	r0, r6
 80098b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098bc:	f000 f852 	bl	8009964 <_isatty_r>
 80098c0:	b128      	cbz	r0, 80098ce <__smakebuf_r+0x70>
 80098c2:	89a3      	ldrh	r3, [r4, #12]
 80098c4:	f023 0303 	bic.w	r3, r3, #3
 80098c8:	f043 0301 	orr.w	r3, r3, #1
 80098cc:	81a3      	strh	r3, [r4, #12]
 80098ce:	89a3      	ldrh	r3, [r4, #12]
 80098d0:	431d      	orrs	r5, r3
 80098d2:	81a5      	strh	r5, [r4, #12]
 80098d4:	e7cf      	b.n	8009876 <__smakebuf_r+0x18>

080098d6 <_putc_r>:
 80098d6:	b570      	push	{r4, r5, r6, lr}
 80098d8:	460d      	mov	r5, r1
 80098da:	4614      	mov	r4, r2
 80098dc:	4606      	mov	r6, r0
 80098de:	b118      	cbz	r0, 80098e8 <_putc_r+0x12>
 80098e0:	6a03      	ldr	r3, [r0, #32]
 80098e2:	b90b      	cbnz	r3, 80098e8 <_putc_r+0x12>
 80098e4:	f7ff f926 	bl	8008b34 <__sinit>
 80098e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80098ea:	07d8      	lsls	r0, r3, #31
 80098ec:	d405      	bmi.n	80098fa <_putc_r+0x24>
 80098ee:	89a3      	ldrh	r3, [r4, #12]
 80098f0:	0599      	lsls	r1, r3, #22
 80098f2:	d402      	bmi.n	80098fa <_putc_r+0x24>
 80098f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80098f6:	f7ff fb1c 	bl	8008f32 <__retarget_lock_acquire_recursive>
 80098fa:	68a3      	ldr	r3, [r4, #8]
 80098fc:	3b01      	subs	r3, #1
 80098fe:	2b00      	cmp	r3, #0
 8009900:	60a3      	str	r3, [r4, #8]
 8009902:	da05      	bge.n	8009910 <_putc_r+0x3a>
 8009904:	69a2      	ldr	r2, [r4, #24]
 8009906:	4293      	cmp	r3, r2
 8009908:	db12      	blt.n	8009930 <_putc_r+0x5a>
 800990a:	b2eb      	uxtb	r3, r5
 800990c:	2b0a      	cmp	r3, #10
 800990e:	d00f      	beq.n	8009930 <_putc_r+0x5a>
 8009910:	6823      	ldr	r3, [r4, #0]
 8009912:	1c5a      	adds	r2, r3, #1
 8009914:	6022      	str	r2, [r4, #0]
 8009916:	701d      	strb	r5, [r3, #0]
 8009918:	b2ed      	uxtb	r5, r5
 800991a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800991c:	07da      	lsls	r2, r3, #31
 800991e:	d405      	bmi.n	800992c <_putc_r+0x56>
 8009920:	89a3      	ldrh	r3, [r4, #12]
 8009922:	059b      	lsls	r3, r3, #22
 8009924:	d402      	bmi.n	800992c <_putc_r+0x56>
 8009926:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009928:	f7ff fb04 	bl	8008f34 <__retarget_lock_release_recursive>
 800992c:	4628      	mov	r0, r5
 800992e:	bd70      	pop	{r4, r5, r6, pc}
 8009930:	4629      	mov	r1, r5
 8009932:	4622      	mov	r2, r4
 8009934:	4630      	mov	r0, r6
 8009936:	f7ff f9ee 	bl	8008d16 <__swbuf_r>
 800993a:	4605      	mov	r5, r0
 800993c:	e7ed      	b.n	800991a <_putc_r+0x44>
	...

08009940 <_fstat_r>:
 8009940:	b538      	push	{r3, r4, r5, lr}
 8009942:	2300      	movs	r3, #0
 8009944:	4d06      	ldr	r5, [pc, #24]	@ (8009960 <_fstat_r+0x20>)
 8009946:	4604      	mov	r4, r0
 8009948:	4608      	mov	r0, r1
 800994a:	4611      	mov	r1, r2
 800994c:	602b      	str	r3, [r5, #0]
 800994e:	f7f8 ff5b 	bl	8002808 <_fstat>
 8009952:	1c43      	adds	r3, r0, #1
 8009954:	d102      	bne.n	800995c <_fstat_r+0x1c>
 8009956:	682b      	ldr	r3, [r5, #0]
 8009958:	b103      	cbz	r3, 800995c <_fstat_r+0x1c>
 800995a:	6023      	str	r3, [r4, #0]
 800995c:	bd38      	pop	{r3, r4, r5, pc}
 800995e:	bf00      	nop
 8009960:	20002018 	.word	0x20002018

08009964 <_isatty_r>:
 8009964:	b538      	push	{r3, r4, r5, lr}
 8009966:	2300      	movs	r3, #0
 8009968:	4d05      	ldr	r5, [pc, #20]	@ (8009980 <_isatty_r+0x1c>)
 800996a:	4604      	mov	r4, r0
 800996c:	4608      	mov	r0, r1
 800996e:	602b      	str	r3, [r5, #0]
 8009970:	f7f8 ff59 	bl	8002826 <_isatty>
 8009974:	1c43      	adds	r3, r0, #1
 8009976:	d102      	bne.n	800997e <_isatty_r+0x1a>
 8009978:	682b      	ldr	r3, [r5, #0]
 800997a:	b103      	cbz	r3, 800997e <_isatty_r+0x1a>
 800997c:	6023      	str	r3, [r4, #0]
 800997e:	bd38      	pop	{r3, r4, r5, pc}
 8009980:	20002018 	.word	0x20002018

08009984 <_sbrk_r>:
 8009984:	b538      	push	{r3, r4, r5, lr}
 8009986:	2300      	movs	r3, #0
 8009988:	4d05      	ldr	r5, [pc, #20]	@ (80099a0 <_sbrk_r+0x1c>)
 800998a:	4604      	mov	r4, r0
 800998c:	4608      	mov	r0, r1
 800998e:	602b      	str	r3, [r5, #0]
 8009990:	f7f8 ff60 	bl	8002854 <_sbrk>
 8009994:	1c43      	adds	r3, r0, #1
 8009996:	d102      	bne.n	800999e <_sbrk_r+0x1a>
 8009998:	682b      	ldr	r3, [r5, #0]
 800999a:	b103      	cbz	r3, 800999e <_sbrk_r+0x1a>
 800999c:	6023      	str	r3, [r4, #0]
 800999e:	bd38      	pop	{r3, r4, r5, pc}
 80099a0:	20002018 	.word	0x20002018

080099a4 <memchr>:
 80099a4:	4603      	mov	r3, r0
 80099a6:	b510      	push	{r4, lr}
 80099a8:	b2c9      	uxtb	r1, r1
 80099aa:	4402      	add	r2, r0
 80099ac:	4293      	cmp	r3, r2
 80099ae:	4618      	mov	r0, r3
 80099b0:	d101      	bne.n	80099b6 <memchr+0x12>
 80099b2:	2000      	movs	r0, #0
 80099b4:	e003      	b.n	80099be <memchr+0x1a>
 80099b6:	7804      	ldrb	r4, [r0, #0]
 80099b8:	3301      	adds	r3, #1
 80099ba:	428c      	cmp	r4, r1
 80099bc:	d1f6      	bne.n	80099ac <memchr+0x8>
 80099be:	bd10      	pop	{r4, pc}

080099c0 <_init>:
 80099c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099c2:	bf00      	nop
 80099c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099c6:	bc08      	pop	{r3}
 80099c8:	469e      	mov	lr, r3
 80099ca:	4770      	bx	lr

080099cc <_fini>:
 80099cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ce:	bf00      	nop
 80099d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099d2:	bc08      	pop	{r3}
 80099d4:	469e      	mov	lr, r3
 80099d6:	4770      	bx	lr

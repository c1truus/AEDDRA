
PwmServo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b78  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08007d5c  08007d5c  00008d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ed8  08007ed8  00009074  2**0
                  CONTENTS
  4 .ARM          00000000  08007ed8  08007ed8  00009074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ed8  08007ed8  00009074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ed8  08007ed8  00008ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007edc  08007edc  00008edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007ee0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006cc  20000074  08007f54  00009074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000740  08007f54  00009740  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001235f  00000000  00000000  0000909d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000335e  00000000  00000000  0001b3fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  0001e760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000de1  00000000  00000000  0001f948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cd8d  00000000  00000000  00020729  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017866  00000000  00000000  0003d4b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d7a0  00000000  00000000  00054d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f24bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005094  00000000  00000000  000f2500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000f7594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000074 	.word	0x20000074
 8000200:	00000000 	.word	0x00000000
 8000204:	08007d44 	.word	0x08007d44

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000078 	.word	0x20000078
 8000220:	08007d44 	.word	0x08007d44

08000224 <Bsp_Led_Show_State_Handle>:

/**
 * @brief Toggles LED to show status, called every 10ms, blinks every 200ms.
 */
void Bsp_Led_Show_State_Handle(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
    static uint8_t led_count = 0;
    led_count++;
 8000228:	4b09      	ldr	r3, [pc, #36]	@ (8000250 <Bsp_Led_Show_State_Handle+0x2c>)
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	3301      	adds	r3, #1
 800022e:	b2da      	uxtb	r2, r3
 8000230:	4b07      	ldr	r3, [pc, #28]	@ (8000250 <Bsp_Led_Show_State_Handle+0x2c>)
 8000232:	701a      	strb	r2, [r3, #0]
    if (led_count > 20)
 8000234:	4b06      	ldr	r3, [pc, #24]	@ (8000250 <Bsp_Led_Show_State_Handle+0x2c>)
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	2b14      	cmp	r3, #20
 800023a:	d907      	bls.n	800024c <Bsp_Led_Show_State_Handle+0x28>
    {
        led_count = 0;
 800023c:	4b04      	ldr	r3, [pc, #16]	@ (8000250 <Bsp_Led_Show_State_Handle+0x2c>)
 800023e:	2200      	movs	r2, #0
 8000240:	701a      	strb	r2, [r3, #0]
        LED_TOGGLE();
 8000242:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000246:	4803      	ldr	r0, [pc, #12]	@ (8000254 <Bsp_Led_Show_State_Handle+0x30>)
 8000248:	f002 fb59 	bl	80028fe <HAL_GPIO_TogglePin>
    }
}
 800024c:	bf00      	nop
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000090 	.word	0x20000090
 8000254:	40011000 	.word	0x40011000

08000258 <Bsp_Init>:

/**
 * @brief Initialize peripherals (servos, motors, I2C slave, buzzer).
 */
void Bsp_Init(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
    I2C_Slave_Init();
 800025c:	f000 fc36 	bl	8000acc <I2C_Slave_Init>
    PwmServo_Init();
 8000260:	f000 fb3a 	bl	80008d8 <PwmServo_Init>
    Motor_Init();
 8000264:	f000 f9b8 	bl	80005d8 <Motor_Init>
    USART1_Init();
 8000268:	f000 fbe8 	bl	8000a3c <USART1_Init>
    Beep_On_Time(50);
 800026c:	2032      	movs	r0, #50	@ 0x32
 800026e:	f000 f8f7 	bl	8000460 <Beep_On_Time>
}
 8000272:	bf00      	nop
 8000274:	bd80      	pop	{r7, pc}
	...

08000278 <Bsp_Loop>:
/**
 * @brief Main loop function, called repeatedly in main.c.
 * Handles button events, I2C commands, LED, and buzzer timeout.
 */
void Bsp_Loop(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b084      	sub	sp, #16
 800027c:	af00      	add	r7, sp, #0
    static uint8_t key_state = 0;

    // Detect button down events
    if (Key1_State(KEY_MODE_ONE_TIME))
 800027e:	2001      	movs	r0, #1
 8000280:	f000 f960 	bl	8000544 <Key1_State>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d025      	beq.n	80002d6 <Bsp_Loop+0x5e>
    {
        Beep_On_Time(50);
 800028a:	2032      	movs	r0, #50	@ 0x32
 800028c:	f000 f8e8 	bl	8000460 <Beep_On_Time>
        if (key_state)
 8000290:	4b54      	ldr	r3, [pc, #336]	@ (80003e4 <Bsp_Loop+0x16c>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d00f      	beq.n	80002b8 <Bsp_Loop+0x40>
        {
            key_state = 0;
 8000298:	4b52      	ldr	r3, [pc, #328]	@ (80003e4 <Bsp_Loop+0x16c>)
 800029a:	2200      	movs	r2, #0
 800029c:	701a      	strb	r2, [r3, #0]
            PwmServo_Set_Angle_All(50, 50, 50, 50);
 800029e:	2332      	movs	r3, #50	@ 0x32
 80002a0:	2232      	movs	r2, #50	@ 0x32
 80002a2:	2132      	movs	r1, #50	@ 0x32
 80002a4:	2032      	movs	r0, #50	@ 0x32
 80002a6:	f000 fb67 	bl	8000978 <PwmServo_Set_Angle_All>
            printf("key state: %d\n", key_state );
 80002aa:	4b4e      	ldr	r3, [pc, #312]	@ (80003e4 <Bsp_Loop+0x16c>)
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	4619      	mov	r1, r3
 80002b0:	484d      	ldr	r0, [pc, #308]	@ (80003e8 <Bsp_Loop+0x170>)
 80002b2:	f006 fe37 	bl	8006f24 <iprintf>
 80002b6:	e00e      	b.n	80002d6 <Bsp_Loop+0x5e>
        }
        else
        {
            key_state = 1;
 80002b8:	4b4a      	ldr	r3, [pc, #296]	@ (80003e4 <Bsp_Loop+0x16c>)
 80002ba:	2201      	movs	r2, #1
 80002bc:	701a      	strb	r2, [r3, #0]
            PwmServo_Set_Angle_All(90, 90, 90, 90);
 80002be:	235a      	movs	r3, #90	@ 0x5a
 80002c0:	225a      	movs	r2, #90	@ 0x5a
 80002c2:	215a      	movs	r1, #90	@ 0x5a
 80002c4:	205a      	movs	r0, #90	@ 0x5a
 80002c6:	f000 fb57 	bl	8000978 <PwmServo_Set_Angle_All>

            printf("key state: %d\n", key_state );
 80002ca:	4b46      	ldr	r3, [pc, #280]	@ (80003e4 <Bsp_Loop+0x16c>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	4619      	mov	r1, r3
 80002d0:	4845      	ldr	r0, [pc, #276]	@ (80003e8 <Bsp_Loop+0x170>)
 80002d2:	f006 fe27 	bl	8006f24 <iprintf>
        }
    }

    // Process I2C commands
    Command_t cmd;
    if (I2C_Get_Next_Command(&cmd))
 80002d6:	463b      	mov	r3, r7
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 fc15 	bl	8000b08 <I2C_Get_Next_Command>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d073      	beq.n	80003cc <Bsp_Loop+0x154>
    {
    	printf("Got command:\n");
 80002e4:	4841      	ldr	r0, [pc, #260]	@ (80003ec <Bsp_Loop+0x174>)
 80002e6:	f006 fe8d 	bl	8007004 <puts>
        if (cmd.kill)
 80002ea:	783b      	ldrb	r3, [r7, #0]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d019      	beq.n	8000324 <Bsp_Loop+0xac>
        {
            printf("KILL SWITCH ACTIVATED - Stopping all motors and servos\n");
 80002f0:	483f      	ldr	r0, [pc, #252]	@ (80003f0 <Bsp_Loop+0x178>)
 80002f2:	f006 fe87 	bl	8007004 <puts>
            Motor_Set_Pwm(MOTOR_ID_M1, 0);
 80002f6:	2100      	movs	r1, #0
 80002f8:	2001      	movs	r0, #1
 80002fa:	f000 f9e1 	bl	80006c0 <Motor_Set_Pwm>
            Motor_Set_Pwm(MOTOR_ID_M2, 0);
 80002fe:	2100      	movs	r1, #0
 8000300:	2002      	movs	r0, #2
 8000302:	f000 f9dd 	bl	80006c0 <Motor_Set_Pwm>
            Motor_Set_Pwm(MOTOR_ID_M3, 0);
 8000306:	2100      	movs	r1, #0
 8000308:	2003      	movs	r0, #3
 800030a:	f000 f9d9 	bl	80006c0 <Motor_Set_Pwm>
            Motor_Set_Pwm(MOTOR_ID_M4, 0);
 800030e:	2100      	movs	r1, #0
 8000310:	2004      	movs	r0, #4
 8000312:	f000 f9d5 	bl	80006c0 <Motor_Set_Pwm>
            PwmServo_Set_Angle_All(90, 90, 90, 90);  // Safe values
 8000316:	235a      	movs	r3, #90	@ 0x5a
 8000318:	225a      	movs	r2, #90	@ 0x5a
 800031a:	215a      	movs	r1, #90	@ 0x5a
 800031c:	205a      	movs	r0, #90	@ 0x5a
 800031e:	f000 fb2b 	bl	8000978 <PwmServo_Set_Angle_All>
 8000322:	e053      	b.n	80003cc <Bsp_Loop+0x154>
        }
        else
        {
            // TODO: If all motor values are 0, stop immediately (brake/coast all motors)
            if (cmd.m1 == 0 && cmd.m2 == 0 && cmd.m3 == 0 && cmd.m4 == 0) {
 8000324:	f9b7 3001 	ldrsh.w	r3, [r7, #1]
 8000328:	b21b      	sxth	r3, r3
 800032a:	2b00      	cmp	r3, #0
 800032c:	d11e      	bne.n	800036c <Bsp_Loop+0xf4>
 800032e:	f9b7 3003 	ldrsh.w	r3, [r7, #3]
 8000332:	b21b      	sxth	r3, r3
 8000334:	2b00      	cmp	r3, #0
 8000336:	d119      	bne.n	800036c <Bsp_Loop+0xf4>
 8000338:	f9b7 3005 	ldrsh.w	r3, [r7, #5]
 800033c:	b21b      	sxth	r3, r3
 800033e:	2b00      	cmp	r3, #0
 8000340:	d114      	bne.n	800036c <Bsp_Loop+0xf4>
 8000342:	f9b7 3007 	ldrsh.w	r3, [r7, #7]
 8000346:	b21b      	sxth	r3, r3
 8000348:	2b00      	cmp	r3, #0
 800034a:	d10f      	bne.n	800036c <Bsp_Loop+0xf4>
                Motor_Stop(MOTOR_ID_M1);
 800034c:	2001      	movs	r0, #1
 800034e:	f000 f96b 	bl	8000628 <Motor_Stop>
                Motor_Stop(MOTOR_ID_M2);
 8000352:	2002      	movs	r0, #2
 8000354:	f000 f968 	bl	8000628 <Motor_Stop>
                Motor_Stop(MOTOR_ID_M3);
 8000358:	2003      	movs	r0, #3
 800035a:	f000 f965 	bl	8000628 <Motor_Stop>
                Motor_Stop(MOTOR_ID_M4);
 800035e:	2004      	movs	r0, #4
 8000360:	f000 f962 	bl	8000628 <Motor_Stop>
                printf("All motors stopped (zero PWM command)\n");
 8000364:	4823      	ldr	r0, [pc, #140]	@ (80003f4 <Bsp_Loop+0x17c>)
 8000366:	f006 fe4d 	bl	8007004 <puts>
 800036a:	e02f      	b.n	80003cc <Bsp_Loop+0x154>
                //        cmd.m1, cmd.m2, cmd.m3, cmd.m4);
                // printf("Servos: S1=%3d°, S2=%3d°, S3=%3d°, S4=%3d°\n",
                //        cmd.s1, cmd.s2, cmd.s3, cmd.s4);
                // printf("=============================\n");

                Motor_Set_Pwm(MOTOR_ID_M1, cmd.m1);
 800036c:	f9b7 3001 	ldrsh.w	r3, [r7, #1]
 8000370:	b21b      	sxth	r3, r3
 8000372:	4619      	mov	r1, r3
 8000374:	2001      	movs	r0, #1
 8000376:	f000 f9a3 	bl	80006c0 <Motor_Set_Pwm>
                Motor_Set_Pwm(MOTOR_ID_M2, cmd.m2);
 800037a:	f9b7 3003 	ldrsh.w	r3, [r7, #3]
 800037e:	b21b      	sxth	r3, r3
 8000380:	4619      	mov	r1, r3
 8000382:	2002      	movs	r0, #2
 8000384:	f000 f99c 	bl	80006c0 <Motor_Set_Pwm>
                Motor_Set_Pwm(MOTOR_ID_M3, cmd.m3);
 8000388:	f9b7 3005 	ldrsh.w	r3, [r7, #5]
 800038c:	b21b      	sxth	r3, r3
 800038e:	4619      	mov	r1, r3
 8000390:	2003      	movs	r0, #3
 8000392:	f000 f995 	bl	80006c0 <Motor_Set_Pwm>
                Motor_Set_Pwm(MOTOR_ID_M4, cmd.m4);
 8000396:	f9b7 3007 	ldrsh.w	r3, [r7, #7]
 800039a:	b21b      	sxth	r3, r3
 800039c:	4619      	mov	r1, r3
 800039e:	2004      	movs	r0, #4
 80003a0:	f000 f98e 	bl	80006c0 <Motor_Set_Pwm>
                PwmServo_Set_Angle(1, cmd.s1);
 80003a4:	7a7b      	ldrb	r3, [r7, #9]
 80003a6:	4619      	mov	r1, r3
 80003a8:	2001      	movs	r0, #1
 80003aa:	f000 fabd 	bl	8000928 <PwmServo_Set_Angle>
                PwmServo_Set_Angle(2, cmd.s2);
 80003ae:	7abb      	ldrb	r3, [r7, #10]
 80003b0:	4619      	mov	r1, r3
 80003b2:	2002      	movs	r0, #2
 80003b4:	f000 fab8 	bl	8000928 <PwmServo_Set_Angle>
                PwmServo_Set_Angle(3, cmd.s3);
 80003b8:	7afb      	ldrb	r3, [r7, #11]
 80003ba:	4619      	mov	r1, r3
 80003bc:	2003      	movs	r0, #3
 80003be:	f000 fab3 	bl	8000928 <PwmServo_Set_Angle>
                PwmServo_Set_Angle(4, cmd.s4);
 80003c2:	7b3b      	ldrb	r3, [r7, #12]
 80003c4:	4619      	mov	r1, r3
 80003c6:	2004      	movs	r0, #4
 80003c8:	f000 faae 	bl	8000928 <PwmServo_Set_Angle>
            }
        }
    }
    Bsp_Led_Show_State_Handle();
 80003cc:	f7ff ff2a 	bl	8000224 <Bsp_Led_Show_State_Handle>
    Beep_Timeout_Close_Handle();
 80003d0:	f000 f886 	bl	80004e0 <Beep_Timeout_Close_Handle>
    HAL_Delay(10);
 80003d4:	200a      	movs	r0, #10
 80003d6:	f001 fb99 	bl	8001b0c <HAL_Delay>
}
 80003da:	bf00      	nop
 80003dc:	3710      	adds	r7, #16
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	20000091 	.word	0x20000091
 80003e8:	08007d5c 	.word	0x08007d5c
 80003ec:	08007d6c 	.word	0x08007d6c
 80003f0:	08007d7c 	.word	0x08007d7c
 80003f4:	08007db4 	.word	0x08007db4

080003f8 <Beep_Set_Time>:
uint8_t beep_state = 0;

// 刷新蜂鸣器打开的时间
// Refreshes the buzzer time
static void Beep_Set_Time(uint16_t time)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	4603      	mov	r3, r0
 8000400:	80fb      	strh	r3, [r7, #6]
	beep_on_time = time;
 8000402:	4a04      	ldr	r2, [pc, #16]	@ (8000414 <Beep_Set_Time+0x1c>)
 8000404:	88fb      	ldrh	r3, [r7, #6]
 8000406:	8013      	strh	r3, [r2, #0]
}
 8000408:	bf00      	nop
 800040a:	370c      	adds	r7, #12
 800040c:	46bd      	mov	sp, r7
 800040e:	bc80      	pop	{r7}
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	20000092 	.word	0x20000092

08000418 <Beep_Get_Time>:

// 获取当前蜂鸣器打开的剩余时间
// Gets the remaining time of the current buzzer on
static uint16_t Beep_Get_Time(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
	return beep_on_time;
 800041c:	4b02      	ldr	r3, [pc, #8]	@ (8000428 <Beep_Get_Time+0x10>)
 800041e:	881b      	ldrh	r3, [r3, #0]
}
 8000420:	4618      	mov	r0, r3
 8000422:	46bd      	mov	sp, r7
 8000424:	bc80      	pop	{r7}
 8000426:	4770      	bx	lr
 8000428:	20000092 	.word	0x20000092

0800042c <Beep_Set_State>:

// 刷新蜂鸣器的状态
// Refreshes the buzzer status
static void Beep_Set_State(uint8_t state)
{
 800042c:	b480      	push	{r7}
 800042e:	b083      	sub	sp, #12
 8000430:	af00      	add	r7, sp, #0
 8000432:	4603      	mov	r3, r0
 8000434:	71fb      	strb	r3, [r7, #7]
	beep_state = state;
 8000436:	4a04      	ldr	r2, [pc, #16]	@ (8000448 <Beep_Set_State+0x1c>)
 8000438:	79fb      	ldrb	r3, [r7, #7]
 800043a:	7013      	strb	r3, [r2, #0]
}
 800043c:	bf00      	nop
 800043e:	370c      	adds	r7, #12
 8000440:	46bd      	mov	sp, r7
 8000442:	bc80      	pop	{r7}
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	20000094 	.word	0x20000094

0800044c <Beep_Get_State>:

// 获取蜂鸣器的状态
// Gets the status of the buzzer
static uint8_t Beep_Get_State(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
	return beep_state;
 8000450:	4b02      	ldr	r3, [pc, #8]	@ (800045c <Beep_Get_State+0x10>)
 8000452:	781b      	ldrb	r3, [r3, #0]
}
 8000454:	4618      	mov	r0, r3
 8000456:	46bd      	mov	sp, r7
 8000458:	bc80      	pop	{r7}
 800045a:	4770      	bx	lr
 800045c:	20000094 	.word	0x20000094

08000460 <Beep_On_Time>:

// 设置蜂鸣器开启时间，time=0时关闭，time=1时一直响，time>=10，延迟xx毫秒后自动关闭
// Set the buzzer start time. The buzzer is disabled when time is 0, keeps ringing when time is 1, and automatically shuts down after time>=10  
void Beep_On_Time(uint16_t time)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	4603      	mov	r3, r0
 8000468:	80fb      	strh	r3, [r7, #6]
	if (time == BEEP_STATE_ON_ALWAYS)
 800046a:	88fb      	ldrh	r3, [r7, #6]
 800046c:	2b01      	cmp	r3, #1
 800046e:	d10b      	bne.n	8000488 <Beep_On_Time+0x28>
	{
		Beep_Set_State(BEEP_STATE_ON_ALWAYS);
 8000470:	2001      	movs	r0, #1
 8000472:	f7ff ffdb 	bl	800042c <Beep_Set_State>
		Beep_Set_Time(0);
 8000476:	2000      	movs	r0, #0
 8000478:	f7ff ffbe 	bl	80003f8 <Beep_Set_Time>
		BEEP_ON();
 800047c:	2201      	movs	r2, #1
 800047e:	2120      	movs	r1, #32
 8000480:	4815      	ldr	r0, [pc, #84]	@ (80004d8 <Beep_On_Time+0x78>)
 8000482:	f002 fa24 	bl	80028ce <HAL_GPIO_WritePin>
			Beep_Set_State(BEEP_STATE_ON_DELAY);
			Beep_Set_Time(time / 10);
			BEEP_ON();
		}
	}
}
 8000486:	e022      	b.n	80004ce <Beep_On_Time+0x6e>
	else if (time == BEEP_STATE_OFF)
 8000488:	88fb      	ldrh	r3, [r7, #6]
 800048a:	2b00      	cmp	r3, #0
 800048c:	d10b      	bne.n	80004a6 <Beep_On_Time+0x46>
		Beep_Set_State(BEEP_STATE_OFF);
 800048e:	2000      	movs	r0, #0
 8000490:	f7ff ffcc 	bl	800042c <Beep_Set_State>
		Beep_Set_Time(0);
 8000494:	2000      	movs	r0, #0
 8000496:	f7ff ffaf 	bl	80003f8 <Beep_Set_Time>
		BEEP_OFF();
 800049a:	2200      	movs	r2, #0
 800049c:	2120      	movs	r1, #32
 800049e:	480e      	ldr	r0, [pc, #56]	@ (80004d8 <Beep_On_Time+0x78>)
 80004a0:	f002 fa15 	bl	80028ce <HAL_GPIO_WritePin>
}
 80004a4:	e013      	b.n	80004ce <Beep_On_Time+0x6e>
		if (time >= 10)
 80004a6:	88fb      	ldrh	r3, [r7, #6]
 80004a8:	2b09      	cmp	r3, #9
 80004aa:	d910      	bls.n	80004ce <Beep_On_Time+0x6e>
			Beep_Set_State(BEEP_STATE_ON_DELAY);
 80004ac:	2002      	movs	r0, #2
 80004ae:	f7ff ffbd 	bl	800042c <Beep_Set_State>
			Beep_Set_Time(time / 10);
 80004b2:	88fb      	ldrh	r3, [r7, #6]
 80004b4:	4a09      	ldr	r2, [pc, #36]	@ (80004dc <Beep_On_Time+0x7c>)
 80004b6:	fba2 2303 	umull	r2, r3, r2, r3
 80004ba:	08db      	lsrs	r3, r3, #3
 80004bc:	b29b      	uxth	r3, r3
 80004be:	4618      	mov	r0, r3
 80004c0:	f7ff ff9a 	bl	80003f8 <Beep_Set_Time>
			BEEP_ON();
 80004c4:	2201      	movs	r2, #1
 80004c6:	2120      	movs	r1, #32
 80004c8:	4803      	ldr	r0, [pc, #12]	@ (80004d8 <Beep_On_Time+0x78>)
 80004ca:	f002 fa00 	bl	80028ce <HAL_GPIO_WritePin>
}
 80004ce:	bf00      	nop
 80004d0:	3708      	adds	r7, #8
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40011000 	.word	0x40011000
 80004dc:	cccccccd 	.word	0xcccccccd

080004e0 <Beep_Timeout_Close_Handle>:

// 蜂鸣器超时自动关闭程序, 10毫秒调用一次 
// Buzzer timeout automatically shut down the program, 10 milliseconds to call once
void Beep_Timeout_Close_Handle(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
	if (Beep_Get_State() == BEEP_STATE_ON_DELAY)
 80004e4:	f7ff ffb2 	bl	800044c <Beep_Get_State>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b02      	cmp	r3, #2
 80004ec:	d113      	bne.n	8000516 <Beep_Timeout_Close_Handle+0x36>
	{
		if (Beep_Get_Time())
 80004ee:	f7ff ff93 	bl	8000418 <Beep_Get_Time>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d006      	beq.n	8000506 <Beep_Timeout_Close_Handle+0x26>
		{
			beep_on_time--;
 80004f8:	4b08      	ldr	r3, [pc, #32]	@ (800051c <Beep_Timeout_Close_Handle+0x3c>)
 80004fa:	881b      	ldrh	r3, [r3, #0]
 80004fc:	3b01      	subs	r3, #1
 80004fe:	b29a      	uxth	r2, r3
 8000500:	4b06      	ldr	r3, [pc, #24]	@ (800051c <Beep_Timeout_Close_Handle+0x3c>)
 8000502:	801a      	strh	r2, [r3, #0]
		{
			BEEP_OFF();
			Beep_Set_State(BEEP_STATE_OFF);
		}
	}
}
 8000504:	e007      	b.n	8000516 <Beep_Timeout_Close_Handle+0x36>
			BEEP_OFF();
 8000506:	2200      	movs	r2, #0
 8000508:	2120      	movs	r1, #32
 800050a:	4805      	ldr	r0, [pc, #20]	@ (8000520 <Beep_Timeout_Close_Handle+0x40>)
 800050c:	f002 f9df 	bl	80028ce <HAL_GPIO_WritePin>
			Beep_Set_State(BEEP_STATE_OFF);
 8000510:	2000      	movs	r0, #0
 8000512:	f7ff ff8b 	bl	800042c <Beep_Set_State>
}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20000092 	.word	0x20000092
 8000520:	40011000 	.word	0x40011000

08000524 <Key1_is_Press>:


// 判断按键是否被按下，按下返回KEY_PRESS，松开返回KEY_RELEASE
// Determine if the key is pressed, press to return KEY_PRESS, release to return KEY_RELEASE  
static uint8_t Key1_is_Press(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin))
 8000528:	2104      	movs	r1, #4
 800052a:	4805      	ldr	r0, [pc, #20]	@ (8000540 <Key1_is_Press+0x1c>)
 800052c:	f002 f9b8 	bl	80028a0 <HAL_GPIO_ReadPin>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d101      	bne.n	800053a <Key1_is_Press+0x16>
	{
		return KEY_PRESS; // 如果按键被按下，则返回KEY_PRESS
 8000536:	2301      	movs	r3, #1
 8000538:	e000      	b.n	800053c <Key1_is_Press+0x18>
	}
	return KEY_RELEASE;   // 如果按键是松开状态，则返回KEY_RELEASE
 800053a:	2300      	movs	r3, #0
}
 800053c:	4618      	mov	r0, r3
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40011400 	.word	0x40011400

08000544 <Key1_State>:
// 读取按键K1的状态，按下返回KEY_PRESS，松开返回KEY_RELEASE. 
// mode:设置模式，0：按下一直返回KEY_PRESS；1：按下只返回一次KEY_PRESS
// Read the state of key K1, press down to return KEY_PRESS, release to return key_release. 
// mode: setting mode, 0: press down to return KEY_PRESS;  1: KEY_PRESS is returned only once  
uint8_t Key1_State(uint8_t mode)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
	static uint16_t key1_state = 0;

	if (Key1_is_Press() == KEY_PRESS)
 800054e:	f7ff ffe9 	bl	8000524 <Key1_is_Press>
 8000552:	4603      	mov	r3, r0
 8000554:	2b01      	cmp	r3, #1
 8000556:	d10e      	bne.n	8000576 <Key1_State+0x32>
	{
		if (key1_state < (mode + 1) * 2)
 8000558:	4b0e      	ldr	r3, [pc, #56]	@ (8000594 <Key1_State+0x50>)
 800055a:	881b      	ldrh	r3, [r3, #0]
 800055c:	461a      	mov	r2, r3
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	3301      	adds	r3, #1
 8000562:	005b      	lsls	r3, r3, #1
 8000564:	429a      	cmp	r2, r3
 8000566:	da09      	bge.n	800057c <Key1_State+0x38>
		{
			key1_state++;
 8000568:	4b0a      	ldr	r3, [pc, #40]	@ (8000594 <Key1_State+0x50>)
 800056a:	881b      	ldrh	r3, [r3, #0]
 800056c:	3301      	adds	r3, #1
 800056e:	b29a      	uxth	r2, r3
 8000570:	4b08      	ldr	r3, [pc, #32]	@ (8000594 <Key1_State+0x50>)
 8000572:	801a      	strh	r2, [r3, #0]
 8000574:	e002      	b.n	800057c <Key1_State+0x38>
		}
	}
	else
	{
		key1_state = 0;
 8000576:	4b07      	ldr	r3, [pc, #28]	@ (8000594 <Key1_State+0x50>)
 8000578:	2200      	movs	r2, #0
 800057a:	801a      	strh	r2, [r3, #0]
	}
	if (key1_state == 2)
 800057c:	4b05      	ldr	r3, [pc, #20]	@ (8000594 <Key1_State+0x50>)
 800057e:	881b      	ldrh	r3, [r3, #0]
 8000580:	2b02      	cmp	r3, #2
 8000582:	d101      	bne.n	8000588 <Key1_State+0x44>
	{
		return KEY_PRESS;
 8000584:	2301      	movs	r3, #1
 8000586:	e000      	b.n	800058a <Key1_State+0x46>
	}
	return KEY_RELEASE;
 8000588:	2300      	movs	r3, #0
}
 800058a:	4618      	mov	r0, r3
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000096 	.word	0x20000096

08000598 <Motor_Ignore_Dead_Zone>:



// Ignore PWM dead band  忽略PWM信号死区
static int16_t Motor_Ignore_Dead_Zone(int16_t pulse)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	80fb      	strh	r3, [r7, #6]
    if (pulse > 0) return pulse + MOTOR_IGNORE_PULSE;
 80005a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	dd05      	ble.n	80005b6 <Motor_Ignore_Dead_Zone+0x1e>
 80005aa:	88fb      	ldrh	r3, [r7, #6]
 80005ac:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	b21b      	sxth	r3, r3
 80005b4:	e00a      	b.n	80005cc <Motor_Ignore_Dead_Zone+0x34>
    if (pulse < 0) return pulse - MOTOR_IGNORE_PULSE;
 80005b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	da05      	bge.n	80005ca <Motor_Ignore_Dead_Zone+0x32>
 80005be:	88fb      	ldrh	r3, [r7, #6]
 80005c0:	f5a3 63c8 	sub.w	r3, r3, #1600	@ 0x640
 80005c4:	b29b      	uxth	r3, r3
 80005c6:	b21b      	sxth	r3, r3
 80005c8:	e000      	b.n	80005cc <Motor_Ignore_Dead_Zone+0x34>
    return 0;
 80005ca:	2300      	movs	r3, #0
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bc80      	pop	{r7}
 80005d4:	4770      	bx	lr
	...

080005d8 <Motor_Init>:

// The PWM port of the motor is initialized  电机PWM口初始化
void Motor_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80005dc:	2100      	movs	r1, #0
 80005de:	4810      	ldr	r0, [pc, #64]	@ (8000620 <Motor_Init+0x48>)
 80005e0:	f004 fd90 	bl	8005104 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80005e4:	2104      	movs	r1, #4
 80005e6:	480e      	ldr	r0, [pc, #56]	@ (8000620 <Motor_Init+0x48>)
 80005e8:	f005 fbd0 	bl	8005d8c <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80005ec:	2108      	movs	r1, #8
 80005ee:	480c      	ldr	r0, [pc, #48]	@ (8000620 <Motor_Init+0x48>)
 80005f0:	f005 fbcc 	bl	8005d8c <HAL_TIMEx_PWMN_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80005f4:	210c      	movs	r1, #12
 80005f6:	480a      	ldr	r0, [pc, #40]	@ (8000620 <Motor_Init+0x48>)
 80005f8:	f004 fd84 	bl	8005104 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80005fc:	2100      	movs	r1, #0
 80005fe:	4809      	ldr	r0, [pc, #36]	@ (8000624 <Motor_Init+0x4c>)
 8000600:	f004 fd80 	bl	8005104 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000604:	2104      	movs	r1, #4
 8000606:	4807      	ldr	r0, [pc, #28]	@ (8000624 <Motor_Init+0x4c>)
 8000608:	f004 fd7c 	bl	8005104 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800060c:	2108      	movs	r1, #8
 800060e:	4805      	ldr	r0, [pc, #20]	@ (8000624 <Motor_Init+0x4c>)
 8000610:	f004 fd78 	bl	8005104 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000614:	210c      	movs	r1, #12
 8000616:	4803      	ldr	r0, [pc, #12]	@ (8000624 <Motor_Init+0x4c>)
 8000618:	f004 fd74 	bl	8005104 <HAL_TIM_PWM_Start>
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000448 	.word	0x20000448
 8000624:	200004d8 	.word	0x200004d8

08000628 <Motor_Stop>:

// All motors stopped  所有电机停止
void Motor_Stop(uint8_t brake)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	71fb      	strb	r3, [r7, #7]
    if (brake != 0) brake = 1;
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <Motor_Stop+0x14>
 8000638:	2301      	movs	r3, #1
 800063a:	71fb      	strb	r3, [r7, #7]
    PWM_M1_A = brake * MOTOR_MAX_PULSE;
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8000642:	fb03 f202 	mul.w	r2, r3, r2
 8000646:	4b1c      	ldr	r3, [pc, #112]	@ (80006b8 <Motor_Stop+0x90>)
 8000648:	635a      	str	r2, [r3, #52]	@ 0x34
    PWM_M1_B = brake * MOTOR_MAX_PULSE;
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8000650:	fb03 f202 	mul.w	r2, r3, r2
 8000654:	4b18      	ldr	r3, [pc, #96]	@ (80006b8 <Motor_Stop+0x90>)
 8000656:	639a      	str	r2, [r3, #56]	@ 0x38
    PWM_M2_A = brake * MOTOR_MAX_PULSE;
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800065e:	fb03 f202 	mul.w	r2, r3, r2
 8000662:	4b15      	ldr	r3, [pc, #84]	@ (80006b8 <Motor_Stop+0x90>)
 8000664:	63da      	str	r2, [r3, #60]	@ 0x3c
    PWM_M2_B = brake * MOTOR_MAX_PULSE;
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800066c:	fb03 f202 	mul.w	r2, r3, r2
 8000670:	4b11      	ldr	r3, [pc, #68]	@ (80006b8 <Motor_Stop+0x90>)
 8000672:	641a      	str	r2, [r3, #64]	@ 0x40
    PWM_M3_A = brake * MOTOR_MAX_PULSE;
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800067a:	fb03 f202 	mul.w	r2, r3, r2
 800067e:	4b0f      	ldr	r3, [pc, #60]	@ (80006bc <Motor_Stop+0x94>)
 8000680:	641a      	str	r2, [r3, #64]	@ 0x40
    PWM_M3_B = brake * MOTOR_MAX_PULSE;
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8000688:	fb03 f202 	mul.w	r2, r3, r2
 800068c:	4b0b      	ldr	r3, [pc, #44]	@ (80006bc <Motor_Stop+0x94>)
 800068e:	635a      	str	r2, [r3, #52]	@ 0x34
    PWM_M4_A = brake * MOTOR_MAX_PULSE;
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8000696:	fb03 f202 	mul.w	r2, r3, r2
 800069a:	4b08      	ldr	r3, [pc, #32]	@ (80006bc <Motor_Stop+0x94>)
 800069c:	639a      	str	r2, [r3, #56]	@ 0x38
    PWM_M4_B = brake * MOTOR_MAX_PULSE;
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80006a4:	fb03 f202 	mul.w	r2, r3, r2
 80006a8:	4b04      	ldr	r3, [pc, #16]	@ (80006bc <Motor_Stop+0x94>)
 80006aa:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80006ac:	bf00      	nop
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bc80      	pop	{r7}
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	40013400 	.word	0x40013400
 80006bc:	40012c00 	.word	0x40012c00

080006c0 <Motor_Set_Pwm>:

// 设置电机速度，speed:±（3600-MOTOR_IGNORE_PULSE）, 0为停止
// Set motor speed, speed:± (3600-MOTOR_IGNORE_PULSE), 0 indicates stop
void Motor_Set_Pwm(uint8_t id, int16_t speed)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	460a      	mov	r2, r1
 80006ca:	71fb      	strb	r3, [r7, #7]
 80006cc:	4613      	mov	r3, r2
 80006ce:	80bb      	strh	r3, [r7, #4]
    int16_t pulse = Motor_Ignore_Dead_Zone(speed);
 80006d0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ff5f 	bl	8000598 <Motor_Ignore_Dead_Zone>
 80006da:	4603      	mov	r3, r0
 80006dc:	81fb      	strh	r3, [r7, #14]
    // Limit input  限制输入
    if (pulse >= MOTOR_MAX_PULSE)
 80006de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006e2:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 80006e6:	db02      	blt.n	80006ee <Motor_Set_Pwm+0x2e>
        pulse = MOTOR_MAX_PULSE;
 80006e8:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80006ec:	81fb      	strh	r3, [r7, #14]
    if (pulse <= -MOTOR_MAX_PULSE)
 80006ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006f2:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 80006f6:	dc02      	bgt.n	80006fe <Motor_Set_Pwm+0x3e>
        pulse = -MOTOR_MAX_PULSE;
 80006f8:	f24f 13f0 	movw	r3, #61936	@ 0xf1f0
 80006fc:	81fb      	strh	r3, [r7, #14]

    switch (id)
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	3b01      	subs	r3, #1
 8000702:	2b03      	cmp	r3, #3
 8000704:	d866      	bhi.n	80007d4 <Motor_Set_Pwm+0x114>
 8000706:	a201      	add	r2, pc, #4	@ (adr r2, 800070c <Motor_Set_Pwm+0x4c>)
 8000708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800070c:	0800071d 	.word	0x0800071d
 8000710:	0800074f 	.word	0x0800074f
 8000714:	08000781 	.word	0x08000781
 8000718:	080007ab 	.word	0x080007ab
    {
    case MOTOR_ID_M1:
    {
        pulse = -pulse;
 800071c:	89fb      	ldrh	r3, [r7, #14]
 800071e:	425b      	negs	r3, r3
 8000720:	b29b      	uxth	r3, r3
 8000722:	81fb      	strh	r3, [r7, #14]
        if (pulse >= 0)
 8000724:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000728:	2b00      	cmp	r3, #0
 800072a:	db07      	blt.n	800073c <Motor_Set_Pwm+0x7c>
        {
            PWM_M1_A = pulse;
 800072c:	4a2c      	ldr	r2, [pc, #176]	@ (80007e0 <Motor_Set_Pwm+0x120>)
 800072e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000732:	6353      	str	r3, [r2, #52]	@ 0x34
            PWM_M1_B = 0;
 8000734:	4b2a      	ldr	r3, [pc, #168]	@ (80007e0 <Motor_Set_Pwm+0x120>)
 8000736:	2200      	movs	r2, #0
 8000738:	639a      	str	r2, [r3, #56]	@ 0x38
        else
        {
            PWM_M1_A = 0;
            PWM_M1_B = -pulse;
        }
        break;
 800073a:	e04c      	b.n	80007d6 <Motor_Set_Pwm+0x116>
            PWM_M1_A = 0;
 800073c:	4b28      	ldr	r3, [pc, #160]	@ (80007e0 <Motor_Set_Pwm+0x120>)
 800073e:	2200      	movs	r2, #0
 8000740:	635a      	str	r2, [r3, #52]	@ 0x34
            PWM_M1_B = -pulse;
 8000742:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000746:	425a      	negs	r2, r3
 8000748:	4b25      	ldr	r3, [pc, #148]	@ (80007e0 <Motor_Set_Pwm+0x120>)
 800074a:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 800074c:	e043      	b.n	80007d6 <Motor_Set_Pwm+0x116>
    }
    case MOTOR_ID_M2:
    {
        pulse = -pulse;
 800074e:	89fb      	ldrh	r3, [r7, #14]
 8000750:	425b      	negs	r3, r3
 8000752:	b29b      	uxth	r3, r3
 8000754:	81fb      	strh	r3, [r7, #14]
        if (pulse >= 0)
 8000756:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800075a:	2b00      	cmp	r3, #0
 800075c:	db07      	blt.n	800076e <Motor_Set_Pwm+0xae>
        {
            PWM_M2_A = pulse;
 800075e:	4a20      	ldr	r2, [pc, #128]	@ (80007e0 <Motor_Set_Pwm+0x120>)
 8000760:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000764:	63d3      	str	r3, [r2, #60]	@ 0x3c
            PWM_M2_B = 0;
 8000766:	4b1e      	ldr	r3, [pc, #120]	@ (80007e0 <Motor_Set_Pwm+0x120>)
 8000768:	2200      	movs	r2, #0
 800076a:	641a      	str	r2, [r3, #64]	@ 0x40
        else
        {
            PWM_M2_A = 0;
            PWM_M2_B = -pulse;
        }
        break;
 800076c:	e033      	b.n	80007d6 <Motor_Set_Pwm+0x116>
            PWM_M2_A = 0;
 800076e:	4b1c      	ldr	r3, [pc, #112]	@ (80007e0 <Motor_Set_Pwm+0x120>)
 8000770:	2200      	movs	r2, #0
 8000772:	63da      	str	r2, [r3, #60]	@ 0x3c
            PWM_M2_B = -pulse;
 8000774:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000778:	425a      	negs	r2, r3
 800077a:	4b19      	ldr	r3, [pc, #100]	@ (80007e0 <Motor_Set_Pwm+0x120>)
 800077c:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 800077e:	e02a      	b.n	80007d6 <Motor_Set_Pwm+0x116>
    }

    case MOTOR_ID_M3:
    {
        if (pulse >= 0)
 8000780:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000784:	2b00      	cmp	r3, #0
 8000786:	db07      	blt.n	8000798 <Motor_Set_Pwm+0xd8>
        {
            PWM_M3_A = pulse;
 8000788:	4a16      	ldr	r2, [pc, #88]	@ (80007e4 <Motor_Set_Pwm+0x124>)
 800078a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800078e:	6413      	str	r3, [r2, #64]	@ 0x40
            PWM_M3_B = 0;
 8000790:	4b14      	ldr	r3, [pc, #80]	@ (80007e4 <Motor_Set_Pwm+0x124>)
 8000792:	2200      	movs	r2, #0
 8000794:	635a      	str	r2, [r3, #52]	@ 0x34
        else
        {
            PWM_M3_A = 0;
            PWM_M3_B = -pulse;
        }
        break;
 8000796:	e01e      	b.n	80007d6 <Motor_Set_Pwm+0x116>
            PWM_M3_A = 0;
 8000798:	4b12      	ldr	r3, [pc, #72]	@ (80007e4 <Motor_Set_Pwm+0x124>)
 800079a:	2200      	movs	r2, #0
 800079c:	641a      	str	r2, [r3, #64]	@ 0x40
            PWM_M3_B = -pulse;
 800079e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80007a2:	425a      	negs	r2, r3
 80007a4:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <Motor_Set_Pwm+0x124>)
 80007a6:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 80007a8:	e015      	b.n	80007d6 <Motor_Set_Pwm+0x116>
    }
    case MOTOR_ID_M4:
    {
        if (pulse >= 0)
 80007aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	db07      	blt.n	80007c2 <Motor_Set_Pwm+0x102>
        {
            PWM_M4_A = pulse;
 80007b2:	4a0c      	ldr	r2, [pc, #48]	@ (80007e4 <Motor_Set_Pwm+0x124>)
 80007b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80007b8:	6393      	str	r3, [r2, #56]	@ 0x38
            PWM_M4_B = 0;
 80007ba:	4b0a      	ldr	r3, [pc, #40]	@ (80007e4 <Motor_Set_Pwm+0x124>)
 80007bc:	2200      	movs	r2, #0
 80007be:	63da      	str	r2, [r3, #60]	@ 0x3c
        else
        {
            PWM_M4_A = 0;
            PWM_M4_B = -pulse;
        }
        break;
 80007c0:	e009      	b.n	80007d6 <Motor_Set_Pwm+0x116>
            PWM_M4_A = 0;
 80007c2:	4b08      	ldr	r3, [pc, #32]	@ (80007e4 <Motor_Set_Pwm+0x124>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	639a      	str	r2, [r3, #56]	@ 0x38
            PWM_M4_B = -pulse;
 80007c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80007cc:	425a      	negs	r2, r3
 80007ce:	4b05      	ldr	r3, [pc, #20]	@ (80007e4 <Motor_Set_Pwm+0x124>)
 80007d0:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 80007d2:	e000      	b.n	80007d6 <Motor_Set_Pwm+0x116>
    }

    default:
        break;
 80007d4:	bf00      	nop
    }
}
 80007d6:	bf00      	nop
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40013400 	.word	0x40013400
 80007e4:	40012c00 	.word	0x40012c00

080007e8 <PwmServo_Angle_To_Pulse>:
uint16_t g_angle_num[MAX_PWM_SERVO] = {149, 149, 149, 149};

// 角度转化为脉冲数, angle= [0, 180]
// The Angle is converted to the number of pulses, angle= [0, 180]
static uint16_t PwmServo_Angle_To_Pulse(uint8_t angle)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	71fb      	strb	r3, [r7, #7]
	uint16_t pulse = (angle * 11 + 500) / 10;
 80007f2:	79fa      	ldrb	r2, [r7, #7]
 80007f4:	4613      	mov	r3, r2
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	4413      	add	r3, r2
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	4413      	add	r3, r2
 80007fe:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8000802:	4a06      	ldr	r2, [pc, #24]	@ (800081c <PwmServo_Angle_To_Pulse+0x34>)
 8000804:	fb82 1203 	smull	r1, r2, r2, r3
 8000808:	1092      	asrs	r2, r2, #2
 800080a:	17db      	asrs	r3, r3, #31
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	81fb      	strh	r3, [r7, #14]
	return pulse;
 8000810:	89fb      	ldrh	r3, [r7, #14]
}
 8000812:	4618      	mov	r0, r3
 8000814:	3714      	adds	r7, #20
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr
 800081c:	66666667 	.word	0x66666667

08000820 <PwmServo_Handle>:

// PWM舵机控制，在定时器中调用，模拟输出PWM信号
// PWM steering gear control, in the timer call, analog output PWM signal
void PwmServo_Handle(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	g_pwm_pulse++;
 8000824:	4b29      	ldr	r3, [pc, #164]	@ (80008cc <PwmServo_Handle+0xac>)
 8000826:	881b      	ldrh	r3, [r3, #0]
 8000828:	3301      	adds	r3, #1
 800082a:	b29a      	uxth	r2, r3
 800082c:	4b27      	ldr	r3, [pc, #156]	@ (80008cc <PwmServo_Handle+0xac>)
 800082e:	801a      	strh	r2, [r3, #0]

#ifdef USE_SERVO_J1
	if (g_pwm_pulse <= g_angle_num[0])
 8000830:	4b27      	ldr	r3, [pc, #156]	@ (80008d0 <PwmServo_Handle+0xb0>)
 8000832:	881a      	ldrh	r2, [r3, #0]
 8000834:	4b25      	ldr	r3, [pc, #148]	@ (80008cc <PwmServo_Handle+0xac>)
 8000836:	881b      	ldrh	r3, [r3, #0]
 8000838:	429a      	cmp	r2, r3
 800083a:	d305      	bcc.n	8000848 <PwmServo_Handle+0x28>
		SERVO_1_HIGH();
 800083c:	2201      	movs	r2, #1
 800083e:	2108      	movs	r1, #8
 8000840:	4824      	ldr	r0, [pc, #144]	@ (80008d4 <PwmServo_Handle+0xb4>)
 8000842:	f002 f844 	bl	80028ce <HAL_GPIO_WritePin>
 8000846:	e004      	b.n	8000852 <PwmServo_Handle+0x32>
	else
		SERVO_1_LOW();
 8000848:	2200      	movs	r2, #0
 800084a:	2108      	movs	r1, #8
 800084c:	4821      	ldr	r0, [pc, #132]	@ (80008d4 <PwmServo_Handle+0xb4>)
 800084e:	f002 f83e 	bl	80028ce <HAL_GPIO_WritePin>
#endif

#ifdef USE_SERVO_J2
	if (g_pwm_pulse <= g_angle_num[1])
 8000852:	4b1f      	ldr	r3, [pc, #124]	@ (80008d0 <PwmServo_Handle+0xb0>)
 8000854:	885a      	ldrh	r2, [r3, #2]
 8000856:	4b1d      	ldr	r3, [pc, #116]	@ (80008cc <PwmServo_Handle+0xac>)
 8000858:	881b      	ldrh	r3, [r3, #0]
 800085a:	429a      	cmp	r2, r3
 800085c:	d305      	bcc.n	800086a <PwmServo_Handle+0x4a>
		SERVO_2_HIGH();
 800085e:	2201      	movs	r2, #1
 8000860:	2104      	movs	r1, #4
 8000862:	481c      	ldr	r0, [pc, #112]	@ (80008d4 <PwmServo_Handle+0xb4>)
 8000864:	f002 f833 	bl	80028ce <HAL_GPIO_WritePin>
 8000868:	e004      	b.n	8000874 <PwmServo_Handle+0x54>
	else
		SERVO_2_LOW();
 800086a:	2200      	movs	r2, #0
 800086c:	2104      	movs	r1, #4
 800086e:	4819      	ldr	r0, [pc, #100]	@ (80008d4 <PwmServo_Handle+0xb4>)
 8000870:	f002 f82d 	bl	80028ce <HAL_GPIO_WritePin>
#endif

#ifdef USE_SERVO_J3
	if (g_pwm_pulse <= g_angle_num[2])
 8000874:	4b16      	ldr	r3, [pc, #88]	@ (80008d0 <PwmServo_Handle+0xb0>)
 8000876:	889a      	ldrh	r2, [r3, #4]
 8000878:	4b14      	ldr	r3, [pc, #80]	@ (80008cc <PwmServo_Handle+0xac>)
 800087a:	881b      	ldrh	r3, [r3, #0]
 800087c:	429a      	cmp	r2, r3
 800087e:	d305      	bcc.n	800088c <PwmServo_Handle+0x6c>
		SERVO_3_HIGH();
 8000880:	2201      	movs	r2, #1
 8000882:	2102      	movs	r1, #2
 8000884:	4813      	ldr	r0, [pc, #76]	@ (80008d4 <PwmServo_Handle+0xb4>)
 8000886:	f002 f822 	bl	80028ce <HAL_GPIO_WritePin>
 800088a:	e004      	b.n	8000896 <PwmServo_Handle+0x76>
	else
		SERVO_3_LOW();
 800088c:	2200      	movs	r2, #0
 800088e:	2102      	movs	r1, #2
 8000890:	4810      	ldr	r0, [pc, #64]	@ (80008d4 <PwmServo_Handle+0xb4>)
 8000892:	f002 f81c 	bl	80028ce <HAL_GPIO_WritePin>
#endif

#ifdef USE_SERVO_J4
	if (g_pwm_pulse <= g_angle_num[3])
 8000896:	4b0e      	ldr	r3, [pc, #56]	@ (80008d0 <PwmServo_Handle+0xb0>)
 8000898:	88da      	ldrh	r2, [r3, #6]
 800089a:	4b0c      	ldr	r3, [pc, #48]	@ (80008cc <PwmServo_Handle+0xac>)
 800089c:	881b      	ldrh	r3, [r3, #0]
 800089e:	429a      	cmp	r2, r3
 80008a0:	d305      	bcc.n	80008ae <PwmServo_Handle+0x8e>
		SERVO_4_HIGH();
 80008a2:	2201      	movs	r2, #1
 80008a4:	2101      	movs	r1, #1
 80008a6:	480b      	ldr	r0, [pc, #44]	@ (80008d4 <PwmServo_Handle+0xb4>)
 80008a8:	f002 f811 	bl	80028ce <HAL_GPIO_WritePin>
 80008ac:	e004      	b.n	80008b8 <PwmServo_Handle+0x98>
	else
		SERVO_4_LOW();
 80008ae:	2200      	movs	r2, #0
 80008b0:	2101      	movs	r1, #1
 80008b2:	4808      	ldr	r0, [pc, #32]	@ (80008d4 <PwmServo_Handle+0xb4>)
 80008b4:	f002 f80b 	bl	80028ce <HAL_GPIO_WritePin>
#endif

	if (g_pwm_pulse >= 2000)
 80008b8:	4b04      	ldr	r3, [pc, #16]	@ (80008cc <PwmServo_Handle+0xac>)
 80008ba:	881b      	ldrh	r3, [r3, #0]
 80008bc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80008c0:	d302      	bcc.n	80008c8 <PwmServo_Handle+0xa8>
		g_pwm_pulse = 0;
 80008c2:	4b02      	ldr	r3, [pc, #8]	@ (80008cc <PwmServo_Handle+0xac>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	801a      	strh	r2, [r3, #0]
}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000098 	.word	0x20000098
 80008d0:	20000004 	.word	0x20000004
 80008d4:	40011000 	.word	0x40011000

080008d8 <PwmServo_Init>:

// Initialize the steering gear  舵机初始化
void PwmServo_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_PWM_SERVO; i++)
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	e014      	b.n	800090e <PwmServo_Init+0x36>
	{
		g_pwm_angle[i] = 90;
 80008e4:	4a0e      	ldr	r2, [pc, #56]	@ (8000920 <PwmServo_Init+0x48>)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4413      	add	r3, r2
 80008ea:	225a      	movs	r2, #90	@ 0x5a
 80008ec:	701a      	strb	r2, [r3, #0]
		g_angle_num[i] = PwmServo_Angle_To_Pulse(g_pwm_angle[i]);
 80008ee:	4a0c      	ldr	r2, [pc, #48]	@ (8000920 <PwmServo_Init+0x48>)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4413      	add	r3, r2
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff ff76 	bl	80007e8 <PwmServo_Angle_To_Pulse>
 80008fc:	4603      	mov	r3, r0
 80008fe:	4619      	mov	r1, r3
 8000900:	4a08      	ldr	r2, [pc, #32]	@ (8000924 <PwmServo_Init+0x4c>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < MAX_PWM_SERVO; i++)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	3301      	adds	r3, #1
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2b03      	cmp	r3, #3
 8000912:	dde7      	ble.n	80008e4 <PwmServo_Init+0xc>
	}
}
 8000914:	bf00      	nop
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000000 	.word	0x20000000
 8000924:	20000004 	.word	0x20000004

08000928 <PwmServo_Set_Angle>:

// 设置pwm舵机角度，index=0~MAX_PWM_SERVO-1，angle为0-180
// Set the PWM servo Angle, index=0~MAX_PWM_SERVO, Angle to 0-180
void PwmServo_Set_Angle(uint8_t index, uint8_t angle)
{
 8000928:	b590      	push	{r4, r7, lr}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	460a      	mov	r2, r1
 8000932:	71fb      	strb	r3, [r7, #7]
 8000934:	4613      	mov	r3, r2
 8000936:	71bb      	strb	r3, [r7, #6]
	if (index >= MAX_PWM_SERVO)
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	2b03      	cmp	r3, #3
 800093c:	d811      	bhi.n	8000962 <PwmServo_Set_Angle+0x3a>
		return;
	if (angle > 180)
 800093e:	79bb      	ldrb	r3, [r7, #6]
 8000940:	2bb4      	cmp	r3, #180	@ 0xb4
 8000942:	d810      	bhi.n	8000966 <PwmServo_Set_Angle+0x3e>
		return;
	g_pwm_angle[index] = angle;
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	490a      	ldr	r1, [pc, #40]	@ (8000970 <PwmServo_Set_Angle+0x48>)
 8000948:	79ba      	ldrb	r2, [r7, #6]
 800094a:	54ca      	strb	r2, [r1, r3]
	g_angle_num[index] = PwmServo_Angle_To_Pulse(angle);
 800094c:	79fc      	ldrb	r4, [r7, #7]
 800094e:	79bb      	ldrb	r3, [r7, #6]
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff ff49 	bl	80007e8 <PwmServo_Angle_To_Pulse>
 8000956:	4603      	mov	r3, r0
 8000958:	461a      	mov	r2, r3
 800095a:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <PwmServo_Set_Angle+0x4c>)
 800095c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 8000960:	e002      	b.n	8000968 <PwmServo_Set_Angle+0x40>
		return;
 8000962:	bf00      	nop
 8000964:	e000      	b.n	8000968 <PwmServo_Set_Angle+0x40>
		return;
 8000966:	bf00      	nop
}
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	bd90      	pop	{r4, r7, pc}
 800096e:	bf00      	nop
 8000970:	20000000 	.word	0x20000000
 8000974:	20000004 	.word	0x20000004

08000978 <PwmServo_Set_Angle_All>:

// 设置全部pwm舵机的角度
// Set the Angle of all PWM steering gear
void PwmServo_Set_Angle_All(uint8_t angle_s1, uint8_t angle_s2, uint8_t angle_s3, uint8_t angle_s4)
{
 8000978:	b590      	push	{r4, r7, lr}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	4604      	mov	r4, r0
 8000980:	4608      	mov	r0, r1
 8000982:	4611      	mov	r1, r2
 8000984:	461a      	mov	r2, r3
 8000986:	4623      	mov	r3, r4
 8000988:	71fb      	strb	r3, [r7, #7]
 800098a:	4603      	mov	r3, r0
 800098c:	71bb      	strb	r3, [r7, #6]
 800098e:	460b      	mov	r3, r1
 8000990:	717b      	strb	r3, [r7, #5]
 8000992:	4613      	mov	r3, r2
 8000994:	713b      	strb	r3, [r7, #4]
	if (angle_s1 <= 180)
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	2bb4      	cmp	r3, #180	@ 0xb4
 800099a:	d80a      	bhi.n	80009b2 <PwmServo_Set_Angle_All+0x3a>
	{
		g_pwm_angle[0] = angle_s1;
 800099c:	4a1c      	ldr	r2, [pc, #112]	@ (8000a10 <PwmServo_Set_Angle_All+0x98>)
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	7013      	strb	r3, [r2, #0]
		g_angle_num[0] = PwmServo_Angle_To_Pulse(angle_s1);
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff ff1f 	bl	80007e8 <PwmServo_Angle_To_Pulse>
 80009aa:	4603      	mov	r3, r0
 80009ac:	461a      	mov	r2, r3
 80009ae:	4b19      	ldr	r3, [pc, #100]	@ (8000a14 <PwmServo_Set_Angle_All+0x9c>)
 80009b0:	801a      	strh	r2, [r3, #0]
	}

	if (angle_s2 <= 180)
 80009b2:	79bb      	ldrb	r3, [r7, #6]
 80009b4:	2bb4      	cmp	r3, #180	@ 0xb4
 80009b6:	d80a      	bhi.n	80009ce <PwmServo_Set_Angle_All+0x56>
	{
		g_pwm_angle[1] = angle_s2;
 80009b8:	4a15      	ldr	r2, [pc, #84]	@ (8000a10 <PwmServo_Set_Angle_All+0x98>)
 80009ba:	79bb      	ldrb	r3, [r7, #6]
 80009bc:	7053      	strb	r3, [r2, #1]
		g_angle_num[1] = PwmServo_Angle_To_Pulse(angle_s2);
 80009be:	79bb      	ldrb	r3, [r7, #6]
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff ff11 	bl	80007e8 <PwmServo_Angle_To_Pulse>
 80009c6:	4603      	mov	r3, r0
 80009c8:	461a      	mov	r2, r3
 80009ca:	4b12      	ldr	r3, [pc, #72]	@ (8000a14 <PwmServo_Set_Angle_All+0x9c>)
 80009cc:	805a      	strh	r2, [r3, #2]
	}

	if (angle_s3 <= 180)
 80009ce:	797b      	ldrb	r3, [r7, #5]
 80009d0:	2bb4      	cmp	r3, #180	@ 0xb4
 80009d2:	d80a      	bhi.n	80009ea <PwmServo_Set_Angle_All+0x72>
	{
		g_pwm_angle[2] = angle_s3;
 80009d4:	4a0e      	ldr	r2, [pc, #56]	@ (8000a10 <PwmServo_Set_Angle_All+0x98>)
 80009d6:	797b      	ldrb	r3, [r7, #5]
 80009d8:	7093      	strb	r3, [r2, #2]
		g_angle_num[2] = PwmServo_Angle_To_Pulse(angle_s3);
 80009da:	797b      	ldrb	r3, [r7, #5]
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff ff03 	bl	80007e8 <PwmServo_Angle_To_Pulse>
 80009e2:	4603      	mov	r3, r0
 80009e4:	461a      	mov	r2, r3
 80009e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000a14 <PwmServo_Set_Angle_All+0x9c>)
 80009e8:	809a      	strh	r2, [r3, #4]
	}

	if (angle_s4 <= 180)
 80009ea:	793b      	ldrb	r3, [r7, #4]
 80009ec:	2bb4      	cmp	r3, #180	@ 0xb4
 80009ee:	d80a      	bhi.n	8000a06 <PwmServo_Set_Angle_All+0x8e>
	{
		g_pwm_angle[3] = angle_s4;
 80009f0:	4a07      	ldr	r2, [pc, #28]	@ (8000a10 <PwmServo_Set_Angle_All+0x98>)
 80009f2:	793b      	ldrb	r3, [r7, #4]
 80009f4:	70d3      	strb	r3, [r2, #3]
		g_angle_num[3] = PwmServo_Angle_To_Pulse(angle_s4);
 80009f6:	793b      	ldrb	r3, [r7, #4]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fef5 	bl	80007e8 <PwmServo_Angle_To_Pulse>
 80009fe:	4603      	mov	r3, r0
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b04      	ldr	r3, [pc, #16]	@ (8000a14 <PwmServo_Set_Angle_All+0x9c>)
 8000a04:	80da      	strh	r2, [r3, #6]
	}
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd90      	pop	{r4, r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000000 	.word	0x20000000
 8000a14:	20000004 	.word	0x20000004

08000a18 <HAL_TIM_PeriodElapsedCallback>:

// Timer interrupts the callback function  定时器中断回调函数
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim7.Instance)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	4b04      	ldr	r3, [pc, #16]	@ (8000a38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d101      	bne.n	8000a30 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		PwmServo_Handle();
 8000a2c:	f7ff fef8 	bl	8000820 <PwmServo_Handle>
	}
}
 8000a30:	bf00      	nop
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000490 	.word	0x20000490

08000a3c <USART1_Init>:

uint8_t RxTemp = 0;

// Initialize USART1  初始化串口1
void USART1_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxTemp, 1);
 8000a40:	2201      	movs	r2, #1
 8000a42:	4903      	ldr	r1, [pc, #12]	@ (8000a50 <USART1_Init+0x14>)
 8000a44:	4803      	ldr	r0, [pc, #12]	@ (8000a54 <USART1_Init+0x18>)
 8000a46:	f005 fc1b 	bl	8006280 <HAL_UART_Receive_IT>
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	2000009a 	.word	0x2000009a
 8000a54:	20000520 	.word	0x20000520

08000a58 <USART1_Send_U8>:

// The serial port sends one byte  串口发送一个字节
void USART1_Send_U8(uint8_t ch)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000a62:	1df9      	adds	r1, r7, #7
 8000a64:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a68:	2201      	movs	r2, #1
 8000a6a:	4803      	ldr	r0, [pc, #12]	@ (8000a78 <USART1_Send_U8+0x20>)
 8000a6c:	f005 fb7d 	bl	800616a <HAL_UART_Transmit>
}
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000520 	.word	0x20000520

08000a7c <HAL_UART_RxCpltCallback>:
    #endif
}

// The serial port receiving is interrupted. Procedure  串口接收完成中断
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
    /* NOTE : This function should not be modified, when the callback is needed,
              the HAL_UART_RxCpltCallback can be implemented in the user file
     */
    // 测试发送数据，实际应用中不应该在中断中发送数据
    // Test sending data. In practice, data should not be sent during interrupts  
    USART1_Send_U8(RxTemp);
 8000a84:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <HAL_UART_RxCpltCallback+0x24>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff ffe5 	bl	8000a58 <USART1_Send_U8>

    // Continue receiving data  继续接收数据
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxTemp, 1);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	4903      	ldr	r1, [pc, #12]	@ (8000aa0 <HAL_UART_RxCpltCallback+0x24>)
 8000a92:	4804      	ldr	r0, [pc, #16]	@ (8000aa4 <HAL_UART_RxCpltCallback+0x28>)
 8000a94:	f005 fbf4 	bl	8006280 <HAL_UART_Receive_IT>
}
 8000a98:	bf00      	nop
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	2000009a 	.word	0x2000009a
 8000aa4:	20000520 	.word	0x20000520

08000aa8 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000ab0:	1d39      	adds	r1, r7, #4
 8000ab2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	4803      	ldr	r0, [pc, #12]	@ (8000ac8 <__io_putchar+0x20>)
 8000aba:	f005 fb56 	bl	800616a <HAL_UART_Transmit>
    return ch;
 8000abe:	687b      	ldr	r3, [r7, #4]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000520 	.word	0x20000520

08000acc <I2C_Slave_Init>:

/**
 * @brief Initialize I2C slave and ring buffer.
 */
void I2C_Slave_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
    RingBuffer_Init(&rxRingBuffer);
 8000ad0:	4809      	ldr	r0, [pc, #36]	@ (8000af8 <I2C_Slave_Init+0x2c>)
 8000ad2:	f000 f8b7 	bl	8000c44 <RingBuffer_Init>
    if (HAL_I2C_EnableListen_IT(&hi2c2) != HAL_OK)
 8000ad6:	4809      	ldr	r0, [pc, #36]	@ (8000afc <I2C_Slave_Init+0x30>)
 8000ad8:	f002 f8f4 	bl	8002cc4 <HAL_I2C_EnableListen_IT>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d005      	beq.n	8000aee <I2C_Slave_Init+0x22>
    {
//        Error_Handler();
        printf("It was not in listen mode\n");
 8000ae2:	4807      	ldr	r0, [pc, #28]	@ (8000b00 <I2C_Slave_Init+0x34>)
 8000ae4:	f006 fa8e 	bl	8007004 <puts>
        HAL_I2C_EnableListen_IT(&hi2c2);
 8000ae8:	4804      	ldr	r0, [pc, #16]	@ (8000afc <I2C_Slave_Init+0x30>)
 8000aea:	f002 f8eb 	bl	8002cc4 <HAL_I2C_EnableListen_IT>
    }
    printf("I2C Slave Initialized\n");
 8000aee:	4805      	ldr	r0, [pc, #20]	@ (8000b04 <I2C_Slave_Init+0x38>)
 8000af0:	f006 fa88 	bl	8007004 <puts>
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	200000ac 	.word	0x200000ac
 8000afc:	200003f0 	.word	0x200003f0
 8000b00:	08007ddc 	.word	0x08007ddc
 8000b04:	08007df8 	.word	0x08007df8

08000b08 <I2C_Get_Next_Command>:
 * @brief Pop the next command from the ring buffer.
 * @param cmd Pointer to store the popped command.
 * @return 1 if a command was popped, 0 if the buffer is empty.
 */
uint8_t I2C_Get_Next_Command(Command_t *cmd)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
    if (RingBuffer_Pop(&rxRingBuffer, cmd))
 8000b10:	6879      	ldr	r1, [r7, #4]
 8000b12:	480f      	ldr	r0, [pc, #60]	@ (8000b50 <I2C_Get_Next_Command+0x48>)
 8000b14:	f000 f90f 	bl	8000d36 <RingBuffer_Pop>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d00d      	beq.n	8000b3a <I2C_Get_Next_Command+0x32>
    {
        if (RingBuffer_IsEmpty(&rxRingBuffer))
 8000b1e:	480c      	ldr	r0, [pc, #48]	@ (8000b50 <I2C_Get_Next_Command+0x48>)
 8000b20:	f000 f8a5 	bl	8000c6e <RingBuffer_IsEmpty>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d005      	beq.n	8000b36 <I2C_Get_Next_Command+0x2e>
        {
            dataReady = 0;  // No more data left
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b54 <I2C_Get_Next_Command+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	701a      	strb	r2, [r3, #0]
            printf("No data :( \n");
 8000b30:	4809      	ldr	r0, [pc, #36]	@ (8000b58 <I2C_Get_Next_Command+0x50>)
 8000b32:	f006 fa67 	bl	8007004 <puts>
        }
        return 1;
 8000b36:	2301      	movs	r3, #1
 8000b38:	e006      	b.n	8000b48 <I2C_Get_Next_Command+0x40>
    }
    else
    {
    	printf("Ring bf empty \n");
 8000b3a:	4808      	ldr	r0, [pc, #32]	@ (8000b5c <I2C_Get_Next_Command+0x54>)
 8000b3c:	f006 fa62 	bl	8007004 <puts>
        dataReady = 0;  // Buffer empty
 8000b40:	4b04      	ldr	r3, [pc, #16]	@ (8000b54 <I2C_Get_Next_Command+0x4c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	701a      	strb	r2, [r3, #0]
        return 0;
 8000b46:	2300      	movs	r3, #0
    }
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	200000ac 	.word	0x200000ac
 8000b54:	200000a9 	.word	0x200000a9
 8000b58:	08007e10 	.word	0x08007e10
 8000b5c:	08007e1c 	.word	0x08007e1c

08000b60 <HAL_I2C_AddrCallback>:
 * @param hi2c I2C handle.
 * @param dir Direction of transfer (I2C_DIRECTION_TRANSMIT or I2C_DIRECTION_RECEIVE).
 * @param addrMatchCode Address match code.
 */
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t dir, uint16_t addrMatchCode)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	460b      	mov	r3, r1
 8000b6a:	70fb      	strb	r3, [r7, #3]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	803b      	strh	r3, [r7, #0]
    if (dir == I2C_DIRECTION_TRANSMIT)
 8000b70:	78fb      	ldrb	r3, [r7, #3]
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d106      	bne.n	8000b84 <HAL_I2C_AddrCallback+0x24>
    {
        HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData, RX_SIZE, I2C_FIRST_AND_LAST_FRAME);
 8000b76:	2308      	movs	r3, #8
 8000b78:	220d      	movs	r2, #13
 8000b7a:	4905      	ldr	r1, [pc, #20]	@ (8000b90 <HAL_I2C_AddrCallback+0x30>)
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f002 f82f 	bl	8002be0 <HAL_I2C_Slave_Seq_Receive_IT>
    }
    else
    {
        Error_Handler();  // Master read not supported
    }
}
 8000b82:	e001      	b.n	8000b88 <HAL_I2C_AddrCallback+0x28>
        Error_Handler();  // Master read not supported
 8000b84:	f000 fa8e 	bl	80010a4 <Error_Handler>
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	2000009c 	.word	0x2000009c

08000b94 <HAL_I2C_SlaveRxCpltCallback>:
/**
 * @brief I2C slave receive complete callback.
 * @param hi2c I2C handle.
 */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000b94:	b590      	push	{r4, r7, lr}
 8000b96:	b089      	sub	sp, #36	@ 0x24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
    Command_t cmd;
    printf("Received raw data (%d bytes): ", RX_SIZE);
 8000b9c:	210d      	movs	r1, #13
 8000b9e:	4818      	ldr	r0, [pc, #96]	@ (8000c00 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 8000ba0:	f006 f9c0 	bl	8006f24 <iprintf>
    for (int i = 0; i < RX_SIZE; i++) {
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]
 8000ba8:	e00a      	b.n	8000bc0 <HAL_I2C_SlaveRxCpltCallback+0x2c>
        printf("%02X ", RxData[i]);
 8000baa:	4a16      	ldr	r2, [pc, #88]	@ (8000c04 <HAL_I2C_SlaveRxCpltCallback+0x70>)
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	4413      	add	r3, r2
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4814      	ldr	r0, [pc, #80]	@ (8000c08 <HAL_I2C_SlaveRxCpltCallback+0x74>)
 8000bb6:	f006 f9b5 	bl	8006f24 <iprintf>
    for (int i = 0; i < RX_SIZE; i++) {
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	61fb      	str	r3, [r7, #28]
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	2b0c      	cmp	r3, #12
 8000bc4:	ddf1      	ble.n	8000baa <HAL_I2C_SlaveRxCpltCallback+0x16>
    }
    printf("\n");
 8000bc6:	200a      	movs	r0, #10
 8000bc8:	f006 f9be 	bl	8006f48 <putchar>
    memcpy(&cmd, RxData, sizeof(cmd));
 8000bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8000c04 <HAL_I2C_SlaveRxCpltCallback+0x70>)
 8000bce:	f107 040c 	add.w	r4, r7, #12
 8000bd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bd4:	c407      	stmia	r4!, {r0, r1, r2}
 8000bd6:	7023      	strb	r3, [r4, #0]
    if (!RingBuffer_Push(&rxRingBuffer, &cmd))
 8000bd8:	f107 030c 	add.w	r3, r7, #12
 8000bdc:	4619      	mov	r1, r3
 8000bde:	480b      	ldr	r0, [pc, #44]	@ (8000c0c <HAL_I2C_SlaveRxCpltCallback+0x78>)
 8000be0:	f000 f869 	bl	8000cb6 <RingBuffer_Push>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d103      	bne.n	8000bf2 <HAL_I2C_SlaveRxCpltCallback+0x5e>
    {
        printf("Ring buffer full, dropping command\n");
 8000bea:	4809      	ldr	r0, [pc, #36]	@ (8000c10 <HAL_I2C_SlaveRxCpltCallback+0x7c>)
 8000bec:	f006 fa0a 	bl	8007004 <puts>
    }
    else
    {
        dataReady = 1;
    }
}
 8000bf0:	e002      	b.n	8000bf8 <HAL_I2C_SlaveRxCpltCallback+0x64>
        dataReady = 1;
 8000bf2:	4b08      	ldr	r3, [pc, #32]	@ (8000c14 <HAL_I2C_SlaveRxCpltCallback+0x80>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	701a      	strb	r2, [r3, #0]
}
 8000bf8:	bf00      	nop
 8000bfa:	3724      	adds	r7, #36	@ 0x24
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd90      	pop	{r4, r7, pc}
 8000c00:	08007e2c 	.word	0x08007e2c
 8000c04:	2000009c 	.word	0x2000009c
 8000c08:	08007e4c 	.word	0x08007e4c
 8000c0c:	200000ac 	.word	0x200000ac
 8000c10:	08007e54 	.word	0x08007e54
 8000c14:	200000a9 	.word	0x200000a9

08000c18 <HAL_I2C_ListenCpltCallback>:
/**
 * @brief I2C listen complete callback.
 * @param hi2c I2C handle.
 */
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
    HAL_I2C_EnableListen_IT(hi2c);
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f002 f84f 	bl	8002cc4 <HAL_I2C_EnableListen_IT>
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_I2C_ErrorCallback>:
/**
 * @brief I2C error callback.
 * @param hi2c I2C handle.
 */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
    HAL_I2C_EnableListen_IT(hi2c);
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f002 f844 	bl	8002cc4 <HAL_I2C_EnableListen_IT>
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <RingBuffer_Init>:
/**
 * @brief Initialize the ring buffer.
 * @param rb Pointer to the ring buffer.
 */
void RingBuffer_Init(RingBuffer *rb)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
    rb->head = 0;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f883 2340 	strb.w	r2, [r3, #832]	@ 0x340
    rb->tail = 0;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2200      	movs	r2, #0
 8000c58:	f883 2341 	strb.w	r2, [r3, #833]	@ 0x341
    rb->count = 0;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f883 2342 	strb.w	r2, [r3, #834]	@ 0x342
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr

08000c6e <RingBuffer_IsEmpty>:
 * @brief Check if the ring buffer is empty.
 * @param rb Pointer to the ring buffer.
 * @return 1 if empty, 0 otherwise.
 */
uint8_t RingBuffer_IsEmpty(RingBuffer *rb)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	b083      	sub	sp, #12
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
    return rb->count == 0;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	f893 3342 	ldrb.w	r3, [r3, #834]	@ 0x342
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	bf0c      	ite	eq
 8000c82:	2301      	moveq	r3, #1
 8000c84:	2300      	movne	r3, #0
 8000c86:	b2db      	uxtb	r3, r3
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr

08000c92 <RingBuffer_IsFull>:
 * @brief Check if the ring buffer is full.
 * @param rb Pointer to the ring buffer.
 * @return 1 if full, 0 otherwise.
 */
uint8_t RingBuffer_IsFull(RingBuffer *rb)
{
 8000c92:	b480      	push	{r7}
 8000c94:	b083      	sub	sp, #12
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
    return rb->count == RX_BUFFER_SIZE;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	f893 3342 	ldrb.w	r3, [r3, #834]	@ 0x342
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	2b40      	cmp	r3, #64	@ 0x40
 8000ca4:	bf0c      	ite	eq
 8000ca6:	2301      	moveq	r3, #1
 8000ca8:	2300      	movne	r3, #0
 8000caa:	b2db      	uxtb	r3, r3
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bc80      	pop	{r7}
 8000cb4:	4770      	bx	lr

08000cb6 <RingBuffer_Push>:
 * @param rb Pointer to the ring buffer.
 * @param cmd Pointer to the command to push.
 * @return 1 if successful, 0 if buffer is full.
 */
uint8_t RingBuffer_Push(RingBuffer *rb, Command_t *cmd)
{
 8000cb6:	b590      	push	{r4, r7, lr}
 8000cb8:	b083      	sub	sp, #12
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
 8000cbe:	6039      	str	r1, [r7, #0]
    if (RingBuffer_IsFull(rb)) return 0;
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff ffe6 	bl	8000c92 <RingBuffer_IsFull>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <RingBuffer_Push+0x1a>
 8000ccc:	2300      	movs	r3, #0
 8000cce:	e02e      	b.n	8000d2e <RingBuffer_Push+0x78>

    rb->buffer[rb->head] = *cmd;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f893 3340 	ldrb.w	r3, [r3, #832]	@ 0x340
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	461a      	mov	r2, r3
 8000cda:	6879      	ldr	r1, [r7, #4]
 8000cdc:	4613      	mov	r3, r2
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	4413      	add	r3, r2
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	4413      	add	r3, r2
 8000ce6:	440b      	add	r3, r1
 8000ce8:	683a      	ldr	r2, [r7, #0]
 8000cea:	6814      	ldr	r4, [r2, #0]
 8000cec:	6850      	ldr	r0, [r2, #4]
 8000cee:	6891      	ldr	r1, [r2, #8]
 8000cf0:	601c      	str	r4, [r3, #0]
 8000cf2:	6058      	str	r0, [r3, #4]
 8000cf4:	6099      	str	r1, [r3, #8]
 8000cf6:	7b12      	ldrb	r2, [r2, #12]
 8000cf8:	731a      	strb	r2, [r3, #12]
    rb->head = (rb->head + 1) % RX_BUFFER_SIZE;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f893 3340 	ldrb.w	r3, [r3, #832]	@ 0x340
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	3301      	adds	r3, #1
 8000d04:	425a      	negs	r2, r3
 8000d06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000d0a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000d0e:	bf58      	it	pl
 8000d10:	4253      	negpl	r3, r2
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f883 2340 	strb.w	r2, [r3, #832]	@ 0x340
    rb->count++;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f893 3342 	ldrb.w	r3, [r3, #834]	@ 0x342
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	3301      	adds	r3, #1
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f883 2342 	strb.w	r2, [r3, #834]	@ 0x342
    return 1;
 8000d2c:	2301      	movs	r3, #1
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd90      	pop	{r4, r7, pc}

08000d36 <RingBuffer_Pop>:
 * @param rb Pointer to the ring buffer.
 * @param cmd Pointer to store the popped command.
 * @return 1 if successful, 0 if buffer is empty.
 */
uint8_t RingBuffer_Pop(RingBuffer *rb, Command_t *cmd)
{
 8000d36:	b590      	push	{r4, r7, lr}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
 8000d3e:	6039      	str	r1, [r7, #0]
    if (RingBuffer_IsEmpty(rb)) return 0;
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f7ff ff94 	bl	8000c6e <RingBuffer_IsEmpty>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <RingBuffer_Pop+0x1a>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	e02f      	b.n	8000db0 <RingBuffer_Pop+0x7a>

    *cmd = rb->buffer[rb->tail];
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f893 3341 	ldrb.w	r3, [r3, #833]	@ 0x341
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	461a      	mov	r2, r3
 8000d5a:	6838      	ldr	r0, [r7, #0]
 8000d5c:	6879      	ldr	r1, [r7, #4]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	4413      	add	r3, r2
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	4413      	add	r3, r2
 8000d68:	18ca      	adds	r2, r1, r3
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	6814      	ldr	r4, [r2, #0]
 8000d6e:	6850      	ldr	r0, [r2, #4]
 8000d70:	6891      	ldr	r1, [r2, #8]
 8000d72:	601c      	str	r4, [r3, #0]
 8000d74:	6058      	str	r0, [r3, #4]
 8000d76:	6099      	str	r1, [r3, #8]
 8000d78:	7b12      	ldrb	r2, [r2, #12]
 8000d7a:	731a      	strb	r2, [r3, #12]
    rb->tail = (rb->tail + 1) % RX_BUFFER_SIZE;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f893 3341 	ldrb.w	r3, [r3, #833]	@ 0x341
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	3301      	adds	r3, #1
 8000d86:	425a      	negs	r2, r3
 8000d88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000d8c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000d90:	bf58      	it	pl
 8000d92:	4253      	negpl	r3, r2
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	f883 2341 	strb.w	r2, [r3, #833]	@ 0x341
    rb->count--;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f893 3342 	ldrb.w	r3, [r3, #834]	@ 0x342
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	3b01      	subs	r3, #1
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f883 2342 	strb.w	r2, [r3, #834]	@ 0x342
    return 1;
 8000dae:	2301      	movs	r3, #1
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd90      	pop	{r4, r7, pc}

08000db8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dbe:	4b10      	ldr	r3, [pc, #64]	@ (8000e00 <MX_DMA_Init+0x48>)
 8000dc0:	695b      	ldr	r3, [r3, #20]
 8000dc2:	4a0f      	ldr	r2, [pc, #60]	@ (8000e00 <MX_DMA_Init+0x48>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	6153      	str	r3, [r2, #20]
 8000dca:	4b0d      	ldr	r3, [pc, #52]	@ (8000e00 <MX_DMA_Init+0x48>)
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2100      	movs	r1, #0
 8000dda:	200e      	movs	r0, #14
 8000ddc:	f000 ff91 	bl	8001d02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000de0:	200e      	movs	r0, #14
 8000de2:	f000 ffaa 	bl	8001d3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2100      	movs	r1, #0
 8000dea:	200f      	movs	r0, #15
 8000dec:	f000 ff89 	bl	8001d02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000df0:	200f      	movs	r0, #15
 8000df2:	f000 ffa2 	bl	8001d3a <HAL_NVIC_EnableIRQ>

}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40021000 	.word	0x40021000

08000e04 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b088      	sub	sp, #32
 8000e08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0a:	f107 0310 	add.w	r3, r7, #16
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e18:	4b31      	ldr	r3, [pc, #196]	@ (8000ee0 <MX_GPIO_Init+0xdc>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	4a30      	ldr	r2, [pc, #192]	@ (8000ee0 <MX_GPIO_Init+0xdc>)
 8000e1e:	f043 0310 	orr.w	r3, r3, #16
 8000e22:	6193      	str	r3, [r2, #24]
 8000e24:	4b2e      	ldr	r3, [pc, #184]	@ (8000ee0 <MX_GPIO_Init+0xdc>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	f003 0310 	and.w	r3, r3, #16
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e30:	4b2b      	ldr	r3, [pc, #172]	@ (8000ee0 <MX_GPIO_Init+0xdc>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	4a2a      	ldr	r2, [pc, #168]	@ (8000ee0 <MX_GPIO_Init+0xdc>)
 8000e36:	f043 0320 	orr.w	r3, r3, #32
 8000e3a:	6193      	str	r3, [r2, #24]
 8000e3c:	4b28      	ldr	r3, [pc, #160]	@ (8000ee0 <MX_GPIO_Init+0xdc>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	f003 0320 	and.w	r3, r3, #32
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e48:	4b25      	ldr	r3, [pc, #148]	@ (8000ee0 <MX_GPIO_Init+0xdc>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	4a24      	ldr	r2, [pc, #144]	@ (8000ee0 <MX_GPIO_Init+0xdc>)
 8000e4e:	f043 0308 	orr.w	r3, r3, #8
 8000e52:	6193      	str	r3, [r2, #24]
 8000e54:	4b22      	ldr	r3, [pc, #136]	@ (8000ee0 <MX_GPIO_Init+0xdc>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	f003 0308 	and.w	r3, r3, #8
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e60:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee0 <MX_GPIO_Init+0xdc>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	4a1e      	ldr	r2, [pc, #120]	@ (8000ee0 <MX_GPIO_Init+0xdc>)
 8000e66:	f043 0304 	orr.w	r3, r3, #4
 8000e6a:	6193      	str	r3, [r2, #24]
 8000e6c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee0 <MX_GPIO_Init+0xdc>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	f003 0304 	and.w	r3, r3, #4
 8000e74:	603b      	str	r3, [r7, #0]
 8000e76:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|S4_Pin|S3_Pin|S2_Pin
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f242 012f 	movw	r1, #8239	@ 0x202f
 8000e7e:	4819      	ldr	r0, [pc, #100]	@ (8000ee4 <MX_GPIO_Init+0xe0>)
 8000e80:	f001 fd25 	bl	80028ce <HAL_GPIO_WritePin>
                          |S1_Pin|BEEP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_Pin BEEP_Pin */
  GPIO_InitStruct.Pin = LED_Pin|BEEP_Pin;
 8000e84:	f242 0320 	movw	r3, #8224	@ 0x2020
 8000e88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2302      	movs	r3, #2
 8000e94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e96:	f107 0310 	add.w	r3, r7, #16
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4811      	ldr	r0, [pc, #68]	@ (8000ee4 <MX_GPIO_Init+0xe0>)
 8000e9e:	f001 fb6b 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pins : S4_Pin S3_Pin S2_Pin S1_Pin */
  GPIO_InitStruct.Pin = S4_Pin|S3_Pin|S2_Pin|S1_Pin;
 8000ea2:	230f      	movs	r3, #15
 8000ea4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb2:	f107 0310 	add.w	r3, r7, #16
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	480a      	ldr	r0, [pc, #40]	@ (8000ee4 <MX_GPIO_Init+0xe0>)
 8000eba:	f001 fb5d 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY1_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8000eca:	f107 0310 	add.w	r3, r7, #16
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4805      	ldr	r0, [pc, #20]	@ (8000ee8 <MX_GPIO_Init+0xe4>)
 8000ed2:	f001 fb51 	bl	8002578 <HAL_GPIO_Init>

}
 8000ed6:	bf00      	nop
 8000ed8:	3720      	adds	r7, #32
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	40011000 	.word	0x40011000
 8000ee8:	40011400 	.word	0x40011400

08000eec <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ef0:	4b12      	ldr	r3, [pc, #72]	@ (8000f3c <MX_I2C2_Init+0x50>)
 8000ef2:	4a13      	ldr	r2, [pc, #76]	@ (8000f40 <MX_I2C2_Init+0x54>)
 8000ef4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000ef6:	4b11      	ldr	r3, [pc, #68]	@ (8000f3c <MX_I2C2_Init+0x50>)
 8000ef8:	4a12      	ldr	r2, [pc, #72]	@ (8000f44 <MX_I2C2_Init+0x58>)
 8000efa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000efc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f3c <MX_I2C2_Init+0x50>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 36;
 8000f02:	4b0e      	ldr	r3, [pc, #56]	@ (8000f3c <MX_I2C2_Init+0x50>)
 8000f04:	2224      	movs	r2, #36	@ 0x24
 8000f06:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f08:	4b0c      	ldr	r3, [pc, #48]	@ (8000f3c <MX_I2C2_Init+0x50>)
 8000f0a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f0e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f10:	4b0a      	ldr	r3, [pc, #40]	@ (8000f3c <MX_I2C2_Init+0x50>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000f16:	4b09      	ldr	r3, [pc, #36]	@ (8000f3c <MX_I2C2_Init+0x50>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f1c:	4b07      	ldr	r3, [pc, #28]	@ (8000f3c <MX_I2C2_Init+0x50>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f22:	4b06      	ldr	r3, [pc, #24]	@ (8000f3c <MX_I2C2_Init+0x50>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f28:	4804      	ldr	r0, [pc, #16]	@ (8000f3c <MX_I2C2_Init+0x50>)
 8000f2a:	f001 fd01 	bl	8002930 <HAL_I2C_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000f34:	f000 f8b6 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	200003f0 	.word	0x200003f0
 8000f40:	40005800 	.word	0x40005800
 8000f44:	00061a80 	.word	0x00061a80

08000f48 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 0310 	add.w	r3, r7, #16
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a1e      	ldr	r2, [pc, #120]	@ (8000fdc <HAL_I2C_MspInit+0x94>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d134      	bne.n	8000fd2 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f68:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe0 <HAL_I2C_MspInit+0x98>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	4a1c      	ldr	r2, [pc, #112]	@ (8000fe0 <HAL_I2C_MspInit+0x98>)
 8000f6e:	f043 0308 	orr.w	r3, r3, #8
 8000f72:	6193      	str	r3, [r2, #24]
 8000f74:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe0 <HAL_I2C_MspInit+0x98>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	f003 0308 	and.w	r3, r3, #8
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f80:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000f84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f86:	2312      	movs	r3, #18
 8000f88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8e:	f107 0310 	add.w	r3, r7, #16
 8000f92:	4619      	mov	r1, r3
 8000f94:	4813      	ldr	r0, [pc, #76]	@ (8000fe4 <HAL_I2C_MspInit+0x9c>)
 8000f96:	f001 faef 	bl	8002578 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f9a:	4b11      	ldr	r3, [pc, #68]	@ (8000fe0 <HAL_I2C_MspInit+0x98>)
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	4a10      	ldr	r2, [pc, #64]	@ (8000fe0 <HAL_I2C_MspInit+0x98>)
 8000fa0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000fa4:	61d3      	str	r3, [r2, #28]
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe0 <HAL_I2C_MspInit+0x98>)
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2021      	movs	r0, #33	@ 0x21
 8000fb8:	f000 fea3 	bl	8001d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000fbc:	2021      	movs	r0, #33	@ 0x21
 8000fbe:	f000 febc 	bl	8001d3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	2022      	movs	r0, #34	@ 0x22
 8000fc8:	f000 fe9b 	bl	8001d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000fcc:	2022      	movs	r0, #34	@ 0x22
 8000fce:	f000 feb4 	bl	8001d3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000fd2:	bf00      	nop
 8000fd4:	3720      	adds	r7, #32
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40005800 	.word	0x40005800
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	40010c00 	.word	0x40010c00

08000fe8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fec:	f000 fd2c 	bl	8001a48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff0:	f000 f813 	bl	800101a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff4:	f7ff ff06 	bl	8000e04 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ff8:	f7ff fede 	bl	8000db8 <MX_DMA_Init>
  MX_TIM7_Init();
 8000ffc:	f000 fa5c 	bl	80014b8 <MX_TIM7_Init>
  MX_I2C2_Init();
 8001000:	f7ff ff74 	bl	8000eec <MX_I2C2_Init>
  MX_TIM1_Init();
 8001004:	f000 f994 	bl	8001330 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001008:	f000 fa8e 	bl	8001528 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 800100c:	f000 fc22 	bl	8001854 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Bsp_Init();
 8001010:	f7ff f922 	bl	8000258 <Bsp_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    Bsp_Loop();
 8001014:	f7ff f930 	bl	8000278 <Bsp_Loop>
 8001018:	e7fc      	b.n	8001014 <main+0x2c>

0800101a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b090      	sub	sp, #64	@ 0x40
 800101e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001020:	f107 0318 	add.w	r3, r7, #24
 8001024:	2228      	movs	r2, #40	@ 0x28
 8001026:	2100      	movs	r1, #0
 8001028:	4618      	mov	r0, r3
 800102a:	f006 f8cb 	bl	80071c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800103c:	2301      	movs	r3, #1
 800103e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001040:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001044:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001046:	2300      	movs	r3, #0
 8001048:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800104a:	2301      	movs	r3, #1
 800104c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800104e:	2302      	movs	r3, #2
 8001050:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001052:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001056:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001058:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800105c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800105e:	f107 0318 	add.w	r3, r7, #24
 8001062:	4618      	mov	r0, r3
 8001064:	f003 fb36 	bl	80046d4 <HAL_RCC_OscConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800106e:	f000 f819 	bl	80010a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001072:	230f      	movs	r3, #15
 8001074:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001076:	2302      	movs	r3, #2
 8001078:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800107e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001082:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	2102      	movs	r1, #2
 800108c:	4618      	mov	r0, r3
 800108e:	f003 fda3 	bl	8004bd8 <HAL_RCC_ClockConfig>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001098:	f000 f804 	bl	80010a4 <Error_Handler>
  }
}
 800109c:	bf00      	nop
 800109e:	3740      	adds	r7, #64	@ 0x40
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a8:	b672      	cpsid	i
}
 80010aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <Error_Handler+0x8>

080010b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010b6:	4b15      	ldr	r3, [pc, #84]	@ (800110c <HAL_MspInit+0x5c>)
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	4a14      	ldr	r2, [pc, #80]	@ (800110c <HAL_MspInit+0x5c>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	6193      	str	r3, [r2, #24]
 80010c2:	4b12      	ldr	r3, [pc, #72]	@ (800110c <HAL_MspInit+0x5c>)
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ce:	4b0f      	ldr	r3, [pc, #60]	@ (800110c <HAL_MspInit+0x5c>)
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	4a0e      	ldr	r2, [pc, #56]	@ (800110c <HAL_MspInit+0x5c>)
 80010d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010d8:	61d3      	str	r3, [r2, #28]
 80010da:	4b0c      	ldr	r3, [pc, #48]	@ (800110c <HAL_MspInit+0x5c>)
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001110 <HAL_MspInit+0x60>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	4a04      	ldr	r2, [pc, #16]	@ (8001110 <HAL_MspInit+0x60>)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001102:	bf00      	nop
 8001104:	3714      	adds	r7, #20
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr
 800110c:	40021000 	.word	0x40021000
 8001110:	40010000 	.word	0x40010000

08001114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <NMI_Handler+0x4>

0800111c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001120:	bf00      	nop
 8001122:	e7fd      	b.n	8001120 <HardFault_Handler+0x4>

08001124 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <MemManage_Handler+0x4>

0800112c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001130:	bf00      	nop
 8001132:	e7fd      	b.n	8001130 <BusFault_Handler+0x4>

08001134 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001138:	bf00      	nop
 800113a:	e7fd      	b.n	8001138 <UsageFault_Handler+0x4>

0800113c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr

08001148 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr

08001154 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr

08001160 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001164:	f000 fcb6 	bl	8001ad4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}

0800116c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001170:	4802      	ldr	r0, [pc, #8]	@ (800117c <DMA1_Channel4_IRQHandler+0x10>)
 8001172:	f000 ffb7 	bl	80020e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000568 	.word	0x20000568

08001180 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001184:	4802      	ldr	r0, [pc, #8]	@ (8001190 <DMA1_Channel5_IRQHandler+0x10>)
 8001186:	f000 ffad 	bl	80020e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200005ac 	.word	0x200005ac

08001194 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001198:	4802      	ldr	r0, [pc, #8]	@ (80011a4 <I2C2_EV_IRQHandler+0x10>)
 800119a:	f001 fdc8 	bl	8002d2e <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200003f0 	.word	0x200003f0

080011a8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80011ac:	4802      	ldr	r0, [pc, #8]	@ (80011b8 <I2C2_ER_IRQHandler+0x10>)
 80011ae:	f001 ff2f 	bl	8003010 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200003f0 	.word	0x200003f0

080011bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011c0:	4802      	ldr	r0, [pc, #8]	@ (80011cc <USART1_IRQHandler+0x10>)
 80011c2:	f005 f883 	bl	80062cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000520 	.word	0x20000520

080011d0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80011d4:	4802      	ldr	r0, [pc, #8]	@ (80011e0 <TIM7_IRQHandler+0x10>)
 80011d6:	f004 f84f 	bl	8005278 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000490 	.word	0x20000490

080011e4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	e00a      	b.n	800120c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011f6:	f3af 8000 	nop.w
 80011fa:	4601      	mov	r1, r0
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	1c5a      	adds	r2, r3, #1
 8001200:	60ba      	str	r2, [r7, #8]
 8001202:	b2ca      	uxtb	r2, r1
 8001204:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	3301      	adds	r3, #1
 800120a:	617b      	str	r3, [r7, #20]
 800120c:	697a      	ldr	r2, [r7, #20]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	429a      	cmp	r2, r3
 8001212:	dbf0      	blt.n	80011f6 <_read+0x12>
	}

return len;
 8001214:	687b      	ldr	r3, [r7, #4]
}
 8001216:	4618      	mov	r0, r3
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b086      	sub	sp, #24
 8001222:	af00      	add	r7, sp, #0
 8001224:	60f8      	str	r0, [r7, #12]
 8001226:	60b9      	str	r1, [r7, #8]
 8001228:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	e009      	b.n	8001244 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	1c5a      	adds	r2, r3, #1
 8001234:	60ba      	str	r2, [r7, #8]
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff fc35 	bl	8000aa8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	3301      	adds	r3, #1
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	697a      	ldr	r2, [r7, #20]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	429a      	cmp	r2, r3
 800124a:	dbf1      	blt.n	8001230 <_write+0x12>
	}
	return len;
 800124c:	687b      	ldr	r3, [r7, #4]
}
 800124e:	4618      	mov	r0, r3
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <_close>:

int _close(int file)
{
 8001256:	b480      	push	{r7}
 8001258:	b083      	sub	sp, #12
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
	return -1;
 800125e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001262:	4618      	mov	r0, r3
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr

0800126c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800127c:	605a      	str	r2, [r3, #4]
	return 0;
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr

0800128a <_isatty>:

int _isatty(int file)
{
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
	return 1;
 8001292:	2301      	movs	r3, #1
}
 8001294:	4618      	mov	r0, r3
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr

0800129e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800129e:	b480      	push	{r7}
 80012a0:	b085      	sub	sp, #20
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	60f8      	str	r0, [r7, #12]
 80012a6:	60b9      	str	r1, [r7, #8]
 80012a8:	607a      	str	r2, [r7, #4]
	return 0;
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr
	...

080012b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012c0:	4a14      	ldr	r2, [pc, #80]	@ (8001314 <_sbrk+0x5c>)
 80012c2:	4b15      	ldr	r3, [pc, #84]	@ (8001318 <_sbrk+0x60>)
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012cc:	4b13      	ldr	r3, [pc, #76]	@ (800131c <_sbrk+0x64>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d102      	bne.n	80012da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012d4:	4b11      	ldr	r3, [pc, #68]	@ (800131c <_sbrk+0x64>)
 80012d6:	4a12      	ldr	r2, [pc, #72]	@ (8001320 <_sbrk+0x68>)
 80012d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012da:	4b10      	ldr	r3, [pc, #64]	@ (800131c <_sbrk+0x64>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4413      	add	r3, r2
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d207      	bcs.n	80012f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012e8:	f005 ffba 	bl	8007260 <__errno>
 80012ec:	4603      	mov	r3, r0
 80012ee:	220c      	movs	r2, #12
 80012f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012f6:	e009      	b.n	800130c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012f8:	4b08      	ldr	r3, [pc, #32]	@ (800131c <_sbrk+0x64>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012fe:	4b07      	ldr	r3, [pc, #28]	@ (800131c <_sbrk+0x64>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4413      	add	r3, r2
 8001306:	4a05      	ldr	r2, [pc, #20]	@ (800131c <_sbrk+0x64>)
 8001308:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800130a:	68fb      	ldr	r3, [r7, #12]
}
 800130c:	4618      	mov	r0, r3
 800130e:	3718      	adds	r7, #24
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	2000c000 	.word	0x2000c000
 8001318:	00000400 	.word	0x00000400
 800131c:	20000444 	.word	0x20000444
 8001320:	20000740 	.word	0x20000740

08001324 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr

08001330 <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b096      	sub	sp, #88	@ 0x58
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001336:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001344:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800134e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
 800135c:	611a      	str	r2, [r3, #16]
 800135e:	615a      	str	r2, [r3, #20]
 8001360:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	2220      	movs	r2, #32
 8001366:	2100      	movs	r1, #0
 8001368:	4618      	mov	r0, r3
 800136a:	f005 ff2b 	bl	80071c4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800136e:	4b50      	ldr	r3, [pc, #320]	@ (80014b0 <MX_TIM1_Init+0x180>)
 8001370:	4a50      	ldr	r2, [pc, #320]	@ (80014b4 <MX_TIM1_Init+0x184>)
 8001372:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001374:	4b4e      	ldr	r3, [pc, #312]	@ (80014b0 <MX_TIM1_Init+0x180>)
 8001376:	2200      	movs	r2, #0
 8001378:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137a:	4b4d      	ldr	r3, [pc, #308]	@ (80014b0 <MX_TIM1_Init+0x180>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3600-1;
 8001380:	4b4b      	ldr	r3, [pc, #300]	@ (80014b0 <MX_TIM1_Init+0x180>)
 8001382:	f640 620f 	movw	r2, #3599	@ 0xe0f
 8001386:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001388:	4b49      	ldr	r3, [pc, #292]	@ (80014b0 <MX_TIM1_Init+0x180>)
 800138a:	2200      	movs	r2, #0
 800138c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800138e:	4b48      	ldr	r3, [pc, #288]	@ (80014b0 <MX_TIM1_Init+0x180>)
 8001390:	2200      	movs	r2, #0
 8001392:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001394:	4b46      	ldr	r3, [pc, #280]	@ (80014b0 <MX_TIM1_Init+0x180>)
 8001396:	2280      	movs	r2, #128	@ 0x80
 8001398:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800139a:	4845      	ldr	r0, [pc, #276]	@ (80014b0 <MX_TIM1_Init+0x180>)
 800139c:	f003 fdaa 	bl	8004ef4 <HAL_TIM_Base_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80013a6:	f7ff fe7d 	bl	80010a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013b0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80013b4:	4619      	mov	r1, r3
 80013b6:	483e      	ldr	r0, [pc, #248]	@ (80014b0 <MX_TIM1_Init+0x180>)
 80013b8:	f004 f910 	bl	80055dc <HAL_TIM_ConfigClockSource>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80013c2:	f7ff fe6f 	bl	80010a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013c6:	483a      	ldr	r0, [pc, #232]	@ (80014b0 <MX_TIM1_Init+0x180>)
 80013c8:	f003 fe44 	bl	8005054 <HAL_TIM_PWM_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80013d2:	f7ff fe67 	bl	80010a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d6:	2300      	movs	r3, #0
 80013d8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013da:	2300      	movs	r3, #0
 80013dc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013de:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80013e2:	4619      	mov	r1, r3
 80013e4:	4832      	ldr	r0, [pc, #200]	@ (80014b0 <MX_TIM1_Init+0x180>)
 80013e6:	f004 fd7d 	bl	8005ee4 <HAL_TIMEx_MasterConfigSynchronization>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80013f0:	f7ff fe58 	bl	80010a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013f4:	2360      	movs	r3, #96	@ 0x60
 80013f6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013fc:	2300      	movs	r3, #0
 80013fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001400:	2300      	movs	r3, #0
 8001402:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001404:	2300      	movs	r3, #0
 8001406:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001408:	2300      	movs	r3, #0
 800140a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800140c:	2300      	movs	r3, #0
 800140e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001410:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001414:	2200      	movs	r2, #0
 8001416:	4619      	mov	r1, r3
 8001418:	4825      	ldr	r0, [pc, #148]	@ (80014b0 <MX_TIM1_Init+0x180>)
 800141a:	f004 f81d 	bl	8005458 <HAL_TIM_PWM_ConfigChannel>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001424:	f7ff fe3e 	bl	80010a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001428:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800142c:	2204      	movs	r2, #4
 800142e:	4619      	mov	r1, r3
 8001430:	481f      	ldr	r0, [pc, #124]	@ (80014b0 <MX_TIM1_Init+0x180>)
 8001432:	f004 f811 	bl	8005458 <HAL_TIM_PWM_ConfigChannel>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800143c:	f7ff fe32 	bl	80010a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001440:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001444:	2208      	movs	r2, #8
 8001446:	4619      	mov	r1, r3
 8001448:	4819      	ldr	r0, [pc, #100]	@ (80014b0 <MX_TIM1_Init+0x180>)
 800144a:	f004 f805 	bl	8005458 <HAL_TIM_PWM_ConfigChannel>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001454:	f7ff fe26 	bl	80010a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001458:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800145c:	220c      	movs	r2, #12
 800145e:	4619      	mov	r1, r3
 8001460:	4813      	ldr	r0, [pc, #76]	@ (80014b0 <MX_TIM1_Init+0x180>)
 8001462:	f003 fff9 	bl	8005458 <HAL_TIM_PWM_ConfigChannel>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800146c:	f7ff fe1a 	bl	80010a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001470:	2300      	movs	r3, #0
 8001472:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001474:	2300      	movs	r3, #0
 8001476:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001478:	2300      	movs	r3, #0
 800147a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001484:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001488:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800148a:	2300      	movs	r3, #0
 800148c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	4619      	mov	r1, r3
 8001492:	4807      	ldr	r0, [pc, #28]	@ (80014b0 <MX_TIM1_Init+0x180>)
 8001494:	f004 fd92 	bl	8005fbc <HAL_TIMEx_ConfigBreakDeadTime>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800149e:	f7ff fe01 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014a2:	4803      	ldr	r0, [pc, #12]	@ (80014b0 <MX_TIM1_Init+0x180>)
 80014a4:	f000 f952 	bl	800174c <HAL_TIM_MspPostInit>

}
 80014a8:	bf00      	nop
 80014aa:	3758      	adds	r7, #88	@ 0x58
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000448 	.word	0x20000448
 80014b4:	40012c00 	.word	0x40012c00

080014b8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014be:	463b      	mov	r3, r7
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80014c6:	4b16      	ldr	r3, [pc, #88]	@ (8001520 <MX_TIM7_Init+0x68>)
 80014c8:	4a16      	ldr	r2, [pc, #88]	@ (8001524 <MX_TIM7_Init+0x6c>)
 80014ca:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 80014cc:	4b14      	ldr	r3, [pc, #80]	@ (8001520 <MX_TIM7_Init+0x68>)
 80014ce:	2247      	movs	r2, #71	@ 0x47
 80014d0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d2:	4b13      	ldr	r3, [pc, #76]	@ (8001520 <MX_TIM7_Init+0x68>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 80014d8:	4b11      	ldr	r3, [pc, #68]	@ (8001520 <MX_TIM7_Init+0x68>)
 80014da:	2209      	movs	r2, #9
 80014dc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014de:	4b10      	ldr	r3, [pc, #64]	@ (8001520 <MX_TIM7_Init+0x68>)
 80014e0:	2280      	movs	r2, #128	@ 0x80
 80014e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80014e4:	480e      	ldr	r0, [pc, #56]	@ (8001520 <MX_TIM7_Init+0x68>)
 80014e6:	f003 fd05 	bl	8004ef4 <HAL_TIM_Base_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80014f0:	f7ff fdd8 	bl	80010a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f4:	2300      	movs	r3, #0
 80014f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f8:	2300      	movs	r3, #0
 80014fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80014fc:	463b      	mov	r3, r7
 80014fe:	4619      	mov	r1, r3
 8001500:	4807      	ldr	r0, [pc, #28]	@ (8001520 <MX_TIM7_Init+0x68>)
 8001502:	f004 fcef 	bl	8005ee4 <HAL_TIMEx_MasterConfigSynchronization>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 800150c:	f7ff fdca 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 8001510:	4803      	ldr	r0, [pc, #12]	@ (8001520 <MX_TIM7_Init+0x68>)
 8001512:	f003 fd3f 	bl	8004f94 <HAL_TIM_Base_Start_IT>

  /* USER CODE END TIM7_Init 2 */

}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000490 	.word	0x20000490
 8001524:	40001400 	.word	0x40001400

08001528 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b096      	sub	sp, #88	@ 0x58
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800152e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800153c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001546:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	60da      	str	r2, [r3, #12]
 8001554:	611a      	str	r2, [r3, #16]
 8001556:	615a      	str	r2, [r3, #20]
 8001558:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	2220      	movs	r2, #32
 800155e:	2100      	movs	r1, #0
 8001560:	4618      	mov	r0, r3
 8001562:	f005 fe2f 	bl	80071c4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001566:	4b50      	ldr	r3, [pc, #320]	@ (80016a8 <MX_TIM8_Init+0x180>)
 8001568:	4a50      	ldr	r2, [pc, #320]	@ (80016ac <MX_TIM8_Init+0x184>)
 800156a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800156c:	4b4e      	ldr	r3, [pc, #312]	@ (80016a8 <MX_TIM8_Init+0x180>)
 800156e:	2200      	movs	r2, #0
 8001570:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001572:	4b4d      	ldr	r3, [pc, #308]	@ (80016a8 <MX_TIM8_Init+0x180>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3600-1;
 8001578:	4b4b      	ldr	r3, [pc, #300]	@ (80016a8 <MX_TIM8_Init+0x180>)
 800157a:	f640 620f 	movw	r2, #3599	@ 0xe0f
 800157e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001580:	4b49      	ldr	r3, [pc, #292]	@ (80016a8 <MX_TIM8_Init+0x180>)
 8001582:	2200      	movs	r2, #0
 8001584:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001586:	4b48      	ldr	r3, [pc, #288]	@ (80016a8 <MX_TIM8_Init+0x180>)
 8001588:	2200      	movs	r2, #0
 800158a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800158c:	4b46      	ldr	r3, [pc, #280]	@ (80016a8 <MX_TIM8_Init+0x180>)
 800158e:	2280      	movs	r2, #128	@ 0x80
 8001590:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001592:	4845      	ldr	r0, [pc, #276]	@ (80016a8 <MX_TIM8_Init+0x180>)
 8001594:	f003 fcae 	bl	8004ef4 <HAL_TIM_Base_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800159e:	f7ff fd81 	bl	80010a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80015a8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80015ac:	4619      	mov	r1, r3
 80015ae:	483e      	ldr	r0, [pc, #248]	@ (80016a8 <MX_TIM8_Init+0x180>)
 80015b0:	f004 f814 	bl	80055dc <HAL_TIM_ConfigClockSource>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80015ba:	f7ff fd73 	bl	80010a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80015be:	483a      	ldr	r0, [pc, #232]	@ (80016a8 <MX_TIM8_Init+0x180>)
 80015c0:	f003 fd48 	bl	8005054 <HAL_TIM_PWM_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80015ca:	f7ff fd6b 	bl	80010a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ce:	2300      	movs	r3, #0
 80015d0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80015d6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015da:	4619      	mov	r1, r3
 80015dc:	4832      	ldr	r0, [pc, #200]	@ (80016a8 <MX_TIM8_Init+0x180>)
 80015de:	f004 fc81 	bl	8005ee4 <HAL_TIMEx_MasterConfigSynchronization>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80015e8:	f7ff fd5c 	bl	80010a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ec:	2360      	movs	r3, #96	@ 0x60
 80015ee:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015f4:	2300      	movs	r3, #0
 80015f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015f8:	2300      	movs	r3, #0
 80015fa:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001600:	2300      	movs	r3, #0
 8001602:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001604:	2300      	movs	r3, #0
 8001606:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001608:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800160c:	2200      	movs	r2, #0
 800160e:	4619      	mov	r1, r3
 8001610:	4825      	ldr	r0, [pc, #148]	@ (80016a8 <MX_TIM8_Init+0x180>)
 8001612:	f003 ff21 	bl	8005458 <HAL_TIM_PWM_ConfigChannel>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 800161c:	f7ff fd42 	bl	80010a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001620:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001624:	2204      	movs	r2, #4
 8001626:	4619      	mov	r1, r3
 8001628:	481f      	ldr	r0, [pc, #124]	@ (80016a8 <MX_TIM8_Init+0x180>)
 800162a:	f003 ff15 	bl	8005458 <HAL_TIM_PWM_ConfigChannel>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001634:	f7ff fd36 	bl	80010a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001638:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800163c:	2208      	movs	r2, #8
 800163e:	4619      	mov	r1, r3
 8001640:	4819      	ldr	r0, [pc, #100]	@ (80016a8 <MX_TIM8_Init+0x180>)
 8001642:	f003 ff09 	bl	8005458 <HAL_TIM_PWM_ConfigChannel>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 800164c:	f7ff fd2a 	bl	80010a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001650:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001654:	220c      	movs	r2, #12
 8001656:	4619      	mov	r1, r3
 8001658:	4813      	ldr	r0, [pc, #76]	@ (80016a8 <MX_TIM8_Init+0x180>)
 800165a:	f003 fefd 	bl	8005458 <HAL_TIM_PWM_ConfigChannel>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8001664:	f7ff fd1e 	bl	80010a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001668:	2300      	movs	r3, #0
 800166a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800166c:	2300      	movs	r3, #0
 800166e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001670:	2300      	movs	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800167c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001680:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001682:	2300      	movs	r3, #0
 8001684:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001686:	1d3b      	adds	r3, r7, #4
 8001688:	4619      	mov	r1, r3
 800168a:	4807      	ldr	r0, [pc, #28]	@ (80016a8 <MX_TIM8_Init+0x180>)
 800168c:	f004 fc96 	bl	8005fbc <HAL_TIMEx_ConfigBreakDeadTime>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8001696:	f7ff fd05 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800169a:	4803      	ldr	r0, [pc, #12]	@ (80016a8 <MX_TIM8_Init+0x180>)
 800169c:	f000 f856 	bl	800174c <HAL_TIM_MspPostInit>

}
 80016a0:	bf00      	nop
 80016a2:	3758      	adds	r7, #88	@ 0x58
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	200004d8 	.word	0x200004d8
 80016ac:	40013400 	.word	0x40013400

080016b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a1f      	ldr	r2, [pc, #124]	@ (800173c <HAL_TIM_Base_MspInit+0x8c>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d10c      	bne.n	80016dc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001740 <HAL_TIM_Base_MspInit+0x90>)
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	4a1e      	ldr	r2, [pc, #120]	@ (8001740 <HAL_TIM_Base_MspInit+0x90>)
 80016c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016cc:	6193      	str	r3, [r2, #24]
 80016ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001740 <HAL_TIM_Base_MspInit+0x90>)
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80016da:	e02a      	b.n	8001732 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM7)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a18      	ldr	r2, [pc, #96]	@ (8001744 <HAL_TIM_Base_MspInit+0x94>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d114      	bne.n	8001710 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80016e6:	4b16      	ldr	r3, [pc, #88]	@ (8001740 <HAL_TIM_Base_MspInit+0x90>)
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	4a15      	ldr	r2, [pc, #84]	@ (8001740 <HAL_TIM_Base_MspInit+0x90>)
 80016ec:	f043 0320 	orr.w	r3, r3, #32
 80016f0:	61d3      	str	r3, [r2, #28]
 80016f2:	4b13      	ldr	r3, [pc, #76]	@ (8001740 <HAL_TIM_Base_MspInit+0x90>)
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	f003 0320 	and.w	r3, r3, #32
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80016fe:	2200      	movs	r2, #0
 8001700:	2100      	movs	r1, #0
 8001702:	2037      	movs	r0, #55	@ 0x37
 8001704:	f000 fafd 	bl	8001d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001708:	2037      	movs	r0, #55	@ 0x37
 800170a:	f000 fb16 	bl	8001d3a <HAL_NVIC_EnableIRQ>
}
 800170e:	e010      	b.n	8001732 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM8)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a0c      	ldr	r2, [pc, #48]	@ (8001748 <HAL_TIM_Base_MspInit+0x98>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d10b      	bne.n	8001732 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800171a:	4b09      	ldr	r3, [pc, #36]	@ (8001740 <HAL_TIM_Base_MspInit+0x90>)
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	4a08      	ldr	r2, [pc, #32]	@ (8001740 <HAL_TIM_Base_MspInit+0x90>)
 8001720:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001724:	6193      	str	r3, [r2, #24]
 8001726:	4b06      	ldr	r3, [pc, #24]	@ (8001740 <HAL_TIM_Base_MspInit+0x90>)
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
}
 8001732:	bf00      	nop
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40012c00 	.word	0x40012c00
 8001740:	40021000 	.word	0x40021000
 8001744:	40001400 	.word	0x40001400
 8001748:	40013400 	.word	0x40013400

0800174c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08a      	sub	sp, #40	@ 0x28
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a34      	ldr	r2, [pc, #208]	@ (8001838 <HAL_TIM_MspPostInit+0xec>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d143      	bne.n	80017f4 <HAL_TIM_MspPostInit+0xa8>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800176c:	4b33      	ldr	r3, [pc, #204]	@ (800183c <HAL_TIM_MspPostInit+0xf0>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	4a32      	ldr	r2, [pc, #200]	@ (800183c <HAL_TIM_MspPostInit+0xf0>)
 8001772:	f043 0308 	orr.w	r3, r3, #8
 8001776:	6193      	str	r3, [r2, #24]
 8001778:	4b30      	ldr	r3, [pc, #192]	@ (800183c <HAL_TIM_MspPostInit+0xf0>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	f003 0308 	and.w	r3, r3, #8
 8001780:	613b      	str	r3, [r7, #16]
 8001782:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001784:	4b2d      	ldr	r3, [pc, #180]	@ (800183c <HAL_TIM_MspPostInit+0xf0>)
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	4a2c      	ldr	r2, [pc, #176]	@ (800183c <HAL_TIM_MspPostInit+0xf0>)
 800178a:	f043 0304 	orr.w	r3, r3, #4
 800178e:	6193      	str	r3, [r2, #24]
 8001790:	4b2a      	ldr	r3, [pc, #168]	@ (800183c <HAL_TIM_MspPostInit+0xf0>)
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> TIM1_CH2N
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800179c:	2303      	movs	r3, #3
 800179e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a0:	2302      	movs	r3, #2
 80017a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a4:	2302      	movs	r3, #2
 80017a6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	4619      	mov	r1, r3
 80017ae:	4824      	ldr	r0, [pc, #144]	@ (8001840 <HAL_TIM_MspPostInit+0xf4>)
 80017b0:	f000 fee2 	bl	8002578 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 80017b4:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 80017b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ba:	2302      	movs	r3, #2
 80017bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017be:	2302      	movs	r3, #2
 80017c0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c2:	f107 0314 	add.w	r3, r7, #20
 80017c6:	4619      	mov	r1, r3
 80017c8:	481e      	ldr	r0, [pc, #120]	@ (8001844 <HAL_TIM_MspPostInit+0xf8>)
 80017ca:	f000 fed5 	bl	8002578 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 80017ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001848 <HAL_TIM_MspPostInit+0xfc>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80017d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80017da:	627b      	str	r3, [r7, #36]	@ 0x24
 80017dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017de:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80017e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80017e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80017ec:	4a16      	ldr	r2, [pc, #88]	@ (8001848 <HAL_TIM_MspPostInit+0xfc>)
 80017ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f0:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80017f2:	e01d      	b.n	8001830 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM8)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a14      	ldr	r2, [pc, #80]	@ (800184c <HAL_TIM_MspPostInit+0x100>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d118      	bne.n	8001830 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017fe:	4b0f      	ldr	r3, [pc, #60]	@ (800183c <HAL_TIM_MspPostInit+0xf0>)
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	4a0e      	ldr	r2, [pc, #56]	@ (800183c <HAL_TIM_MspPostInit+0xf0>)
 8001804:	f043 0310 	orr.w	r3, r3, #16
 8001808:	6193      	str	r3, [r2, #24]
 800180a:	4b0c      	ldr	r3, [pc, #48]	@ (800183c <HAL_TIM_MspPostInit+0xf0>)
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	f003 0310 	and.w	r3, r3, #16
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001816:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800181a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181c:	2302      	movs	r3, #2
 800181e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001820:	2302      	movs	r3, #2
 8001822:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001824:	f107 0314 	add.w	r3, r7, #20
 8001828:	4619      	mov	r1, r3
 800182a:	4809      	ldr	r0, [pc, #36]	@ (8001850 <HAL_TIM_MspPostInit+0x104>)
 800182c:	f000 fea4 	bl	8002578 <HAL_GPIO_Init>
}
 8001830:	bf00      	nop
 8001832:	3728      	adds	r7, #40	@ 0x28
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40012c00 	.word	0x40012c00
 800183c:	40021000 	.word	0x40021000
 8001840:	40010c00 	.word	0x40010c00
 8001844:	40010800 	.word	0x40010800
 8001848:	40010000 	.word	0x40010000
 800184c:	40013400 	.word	0x40013400
 8001850:	40011000 	.word	0x40011000

08001854 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001858:	4b11      	ldr	r3, [pc, #68]	@ (80018a0 <MX_USART1_UART_Init+0x4c>)
 800185a:	4a12      	ldr	r2, [pc, #72]	@ (80018a4 <MX_USART1_UART_Init+0x50>)
 800185c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800185e:	4b10      	ldr	r3, [pc, #64]	@ (80018a0 <MX_USART1_UART_Init+0x4c>)
 8001860:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001864:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001866:	4b0e      	ldr	r3, [pc, #56]	@ (80018a0 <MX_USART1_UART_Init+0x4c>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800186c:	4b0c      	ldr	r3, [pc, #48]	@ (80018a0 <MX_USART1_UART_Init+0x4c>)
 800186e:	2200      	movs	r2, #0
 8001870:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001872:	4b0b      	ldr	r3, [pc, #44]	@ (80018a0 <MX_USART1_UART_Init+0x4c>)
 8001874:	2200      	movs	r2, #0
 8001876:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001878:	4b09      	ldr	r3, [pc, #36]	@ (80018a0 <MX_USART1_UART_Init+0x4c>)
 800187a:	220c      	movs	r2, #12
 800187c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800187e:	4b08      	ldr	r3, [pc, #32]	@ (80018a0 <MX_USART1_UART_Init+0x4c>)
 8001880:	2200      	movs	r2, #0
 8001882:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001884:	4b06      	ldr	r3, [pc, #24]	@ (80018a0 <MX_USART1_UART_Init+0x4c>)
 8001886:	2200      	movs	r2, #0
 8001888:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800188a:	4805      	ldr	r0, [pc, #20]	@ (80018a0 <MX_USART1_UART_Init+0x4c>)
 800188c:	f004 fc1d 	bl	80060ca <HAL_UART_Init>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001896:	f7ff fc05 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000520 	.word	0x20000520
 80018a4:	40013800 	.word	0x40013800

080018a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b088      	sub	sp, #32
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 0310 	add.w	r3, r7, #16
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a47      	ldr	r2, [pc, #284]	@ (80019e0 <HAL_UART_MspInit+0x138>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	f040 8086 	bne.w	80019d6 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018ca:	4b46      	ldr	r3, [pc, #280]	@ (80019e4 <HAL_UART_MspInit+0x13c>)
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	4a45      	ldr	r2, [pc, #276]	@ (80019e4 <HAL_UART_MspInit+0x13c>)
 80018d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018d4:	6193      	str	r3, [r2, #24]
 80018d6:	4b43      	ldr	r3, [pc, #268]	@ (80019e4 <HAL_UART_MspInit+0x13c>)
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e2:	4b40      	ldr	r3, [pc, #256]	@ (80019e4 <HAL_UART_MspInit+0x13c>)
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	4a3f      	ldr	r2, [pc, #252]	@ (80019e4 <HAL_UART_MspInit+0x13c>)
 80018e8:	f043 0304 	orr.w	r3, r3, #4
 80018ec:	6193      	str	r3, [r2, #24]
 80018ee:	4b3d      	ldr	r3, [pc, #244]	@ (80019e4 <HAL_UART_MspInit+0x13c>)
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	f003 0304 	and.w	r3, r3, #4
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001900:	2302      	movs	r3, #2
 8001902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001904:	2303      	movs	r3, #3
 8001906:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001908:	f107 0310 	add.w	r3, r7, #16
 800190c:	4619      	mov	r1, r3
 800190e:	4836      	ldr	r0, [pc, #216]	@ (80019e8 <HAL_UART_MspInit+0x140>)
 8001910:	f000 fe32 	bl	8002578 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001914:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001918:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001922:	f107 0310 	add.w	r3, r7, #16
 8001926:	4619      	mov	r1, r3
 8001928:	482f      	ldr	r0, [pc, #188]	@ (80019e8 <HAL_UART_MspInit+0x140>)
 800192a:	f000 fe25 	bl	8002578 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800192e:	4b2f      	ldr	r3, [pc, #188]	@ (80019ec <HAL_UART_MspInit+0x144>)
 8001930:	4a2f      	ldr	r2, [pc, #188]	@ (80019f0 <HAL_UART_MspInit+0x148>)
 8001932:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001934:	4b2d      	ldr	r3, [pc, #180]	@ (80019ec <HAL_UART_MspInit+0x144>)
 8001936:	2210      	movs	r2, #16
 8001938:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800193a:	4b2c      	ldr	r3, [pc, #176]	@ (80019ec <HAL_UART_MspInit+0x144>)
 800193c:	2200      	movs	r2, #0
 800193e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001940:	4b2a      	ldr	r3, [pc, #168]	@ (80019ec <HAL_UART_MspInit+0x144>)
 8001942:	2280      	movs	r2, #128	@ 0x80
 8001944:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001946:	4b29      	ldr	r3, [pc, #164]	@ (80019ec <HAL_UART_MspInit+0x144>)
 8001948:	2200      	movs	r2, #0
 800194a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800194c:	4b27      	ldr	r3, [pc, #156]	@ (80019ec <HAL_UART_MspInit+0x144>)
 800194e:	2200      	movs	r2, #0
 8001950:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001952:	4b26      	ldr	r3, [pc, #152]	@ (80019ec <HAL_UART_MspInit+0x144>)
 8001954:	2200      	movs	r2, #0
 8001956:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001958:	4b24      	ldr	r3, [pc, #144]	@ (80019ec <HAL_UART_MspInit+0x144>)
 800195a:	2200      	movs	r2, #0
 800195c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800195e:	4823      	ldr	r0, [pc, #140]	@ (80019ec <HAL_UART_MspInit+0x144>)
 8001960:	f000 fa06 	bl	8001d70 <HAL_DMA_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800196a:	f7ff fb9b 	bl	80010a4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a1e      	ldr	r2, [pc, #120]	@ (80019ec <HAL_UART_MspInit+0x144>)
 8001972:	639a      	str	r2, [r3, #56]	@ 0x38
 8001974:	4a1d      	ldr	r2, [pc, #116]	@ (80019ec <HAL_UART_MspInit+0x144>)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800197a:	4b1e      	ldr	r3, [pc, #120]	@ (80019f4 <HAL_UART_MspInit+0x14c>)
 800197c:	4a1e      	ldr	r2, [pc, #120]	@ (80019f8 <HAL_UART_MspInit+0x150>)
 800197e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001980:	4b1c      	ldr	r3, [pc, #112]	@ (80019f4 <HAL_UART_MspInit+0x14c>)
 8001982:	2200      	movs	r2, #0
 8001984:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001986:	4b1b      	ldr	r3, [pc, #108]	@ (80019f4 <HAL_UART_MspInit+0x14c>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800198c:	4b19      	ldr	r3, [pc, #100]	@ (80019f4 <HAL_UART_MspInit+0x14c>)
 800198e:	2280      	movs	r2, #128	@ 0x80
 8001990:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001992:	4b18      	ldr	r3, [pc, #96]	@ (80019f4 <HAL_UART_MspInit+0x14c>)
 8001994:	2200      	movs	r2, #0
 8001996:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001998:	4b16      	ldr	r3, [pc, #88]	@ (80019f4 <HAL_UART_MspInit+0x14c>)
 800199a:	2200      	movs	r2, #0
 800199c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800199e:	4b15      	ldr	r3, [pc, #84]	@ (80019f4 <HAL_UART_MspInit+0x14c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019a4:	4b13      	ldr	r3, [pc, #76]	@ (80019f4 <HAL_UART_MspInit+0x14c>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80019aa:	4812      	ldr	r0, [pc, #72]	@ (80019f4 <HAL_UART_MspInit+0x14c>)
 80019ac:	f000 f9e0 	bl	8001d70 <HAL_DMA_Init>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80019b6:	f7ff fb75 	bl	80010a4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a0d      	ldr	r2, [pc, #52]	@ (80019f4 <HAL_UART_MspInit+0x14c>)
 80019be:	63da      	str	r2, [r3, #60]	@ 0x3c
 80019c0:	4a0c      	ldr	r2, [pc, #48]	@ (80019f4 <HAL_UART_MspInit+0x14c>)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80019c6:	2200      	movs	r2, #0
 80019c8:	2100      	movs	r1, #0
 80019ca:	2025      	movs	r0, #37	@ 0x25
 80019cc:	f000 f999 	bl	8001d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019d0:	2025      	movs	r0, #37	@ 0x25
 80019d2:	f000 f9b2 	bl	8001d3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80019d6:	bf00      	nop
 80019d8:	3720      	adds	r7, #32
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40013800 	.word	0x40013800
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40010800 	.word	0x40010800
 80019ec:	20000568 	.word	0x20000568
 80019f0:	40020044 	.word	0x40020044
 80019f4:	200005ac 	.word	0x200005ac
 80019f8:	40020058 	.word	0x40020058

080019fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019fc:	480c      	ldr	r0, [pc, #48]	@ (8001a30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019fe:	490d      	ldr	r1, [pc, #52]	@ (8001a34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a00:	4a0d      	ldr	r2, [pc, #52]	@ (8001a38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a04:	e002      	b.n	8001a0c <LoopCopyDataInit>

08001a06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a0a:	3304      	adds	r3, #4

08001a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a10:	d3f9      	bcc.n	8001a06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a12:	4a0a      	ldr	r2, [pc, #40]	@ (8001a3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a14:	4c0a      	ldr	r4, [pc, #40]	@ (8001a40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a18:	e001      	b.n	8001a1e <LoopFillZerobss>

08001a1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a1c:	3204      	adds	r2, #4

08001a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a20:	d3fb      	bcc.n	8001a1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a22:	f7ff fc7f 	bl	8001324 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a26:	f005 fc21 	bl	800726c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a2a:	f7ff fadd 	bl	8000fe8 <main>
  bx lr
 8001a2e:	4770      	bx	lr
  ldr r0, =_sdata
 8001a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a34:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001a38:	08007ee0 	.word	0x08007ee0
  ldr r2, =_sbss
 8001a3c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001a40:	20000740 	.word	0x20000740

08001a44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a44:	e7fe      	b.n	8001a44 <ADC1_2_IRQHandler>
	...

08001a48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a4c:	4b08      	ldr	r3, [pc, #32]	@ (8001a70 <HAL_Init+0x28>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a07      	ldr	r2, [pc, #28]	@ (8001a70 <HAL_Init+0x28>)
 8001a52:	f043 0310 	orr.w	r3, r3, #16
 8001a56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a58:	2003      	movs	r0, #3
 8001a5a:	f000 f947 	bl	8001cec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a5e:	200f      	movs	r0, #15
 8001a60:	f000 f808 	bl	8001a74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a64:	f7ff fb24 	bl	80010b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40022000 	.word	0x40022000

08001a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a7c:	4b12      	ldr	r3, [pc, #72]	@ (8001ac8 <HAL_InitTick+0x54>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4b12      	ldr	r3, [pc, #72]	@ (8001acc <HAL_InitTick+0x58>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	4619      	mov	r1, r3
 8001a86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a92:	4618      	mov	r0, r3
 8001a94:	f000 f95f 	bl	8001d56 <HAL_SYSTICK_Config>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e00e      	b.n	8001ac0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2b0f      	cmp	r3, #15
 8001aa6:	d80a      	bhi.n	8001abe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ab0:	f000 f927 	bl	8001d02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ab4:	4a06      	ldr	r2, [pc, #24]	@ (8001ad0 <HAL_InitTick+0x5c>)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
 8001abc:	e000      	b.n	8001ac0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	2000000c 	.word	0x2000000c
 8001acc:	20000014 	.word	0x20000014
 8001ad0:	20000010 	.word	0x20000010

08001ad4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ad8:	4b05      	ldr	r3, [pc, #20]	@ (8001af0 <HAL_IncTick+0x1c>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	461a      	mov	r2, r3
 8001ade:	4b05      	ldr	r3, [pc, #20]	@ (8001af4 <HAL_IncTick+0x20>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	4a03      	ldr	r2, [pc, #12]	@ (8001af4 <HAL_IncTick+0x20>)
 8001ae6:	6013      	str	r3, [r2, #0]
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr
 8001af0:	20000014 	.word	0x20000014
 8001af4:	200005f0 	.word	0x200005f0

08001af8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return uwTick;
 8001afc:	4b02      	ldr	r3, [pc, #8]	@ (8001b08 <HAL_GetTick+0x10>)
 8001afe:	681b      	ldr	r3, [r3, #0]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr
 8001b08:	200005f0 	.word	0x200005f0

08001b0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b14:	f7ff fff0 	bl	8001af8 <HAL_GetTick>
 8001b18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b24:	d005      	beq.n	8001b32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b26:	4b0a      	ldr	r3, [pc, #40]	@ (8001b50 <HAL_Delay+0x44>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4413      	add	r3, r2
 8001b30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b32:	bf00      	nop
 8001b34:	f7ff ffe0 	bl	8001af8 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d8f7      	bhi.n	8001b34 <HAL_Delay+0x28>
  {
  }
}
 8001b44:	bf00      	nop
 8001b46:	bf00      	nop
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000014 	.word	0x20000014

08001b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b64:	4b0c      	ldr	r3, [pc, #48]	@ (8001b98 <__NVIC_SetPriorityGrouping+0x44>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b6a:	68ba      	ldr	r2, [r7, #8]
 8001b6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b70:	4013      	ands	r3, r2
 8001b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b86:	4a04      	ldr	r2, [pc, #16]	@ (8001b98 <__NVIC_SetPriorityGrouping+0x44>)
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	60d3      	str	r3, [r2, #12]
}
 8001b8c:	bf00      	nop
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba0:	4b04      	ldr	r3, [pc, #16]	@ (8001bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	0a1b      	lsrs	r3, r3, #8
 8001ba6:	f003 0307 	and.w	r3, r3, #7
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	db0b      	blt.n	8001be2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bca:	79fb      	ldrb	r3, [r7, #7]
 8001bcc:	f003 021f 	and.w	r2, r3, #31
 8001bd0:	4906      	ldr	r1, [pc, #24]	@ (8001bec <__NVIC_EnableIRQ+0x34>)
 8001bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd6:	095b      	lsrs	r3, r3, #5
 8001bd8:	2001      	movs	r0, #1
 8001bda:	fa00 f202 	lsl.w	r2, r0, r2
 8001bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr
 8001bec:	e000e100 	.word	0xe000e100

08001bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	6039      	str	r1, [r7, #0]
 8001bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	db0a      	blt.n	8001c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	490c      	ldr	r1, [pc, #48]	@ (8001c3c <__NVIC_SetPriority+0x4c>)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	0112      	lsls	r2, r2, #4
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	440b      	add	r3, r1
 8001c14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c18:	e00a      	b.n	8001c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	4908      	ldr	r1, [pc, #32]	@ (8001c40 <__NVIC_SetPriority+0x50>)
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	3b04      	subs	r3, #4
 8001c28:	0112      	lsls	r2, r2, #4
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	761a      	strb	r2, [r3, #24]
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	e000e100 	.word	0xe000e100
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b089      	sub	sp, #36	@ 0x24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f1c3 0307 	rsb	r3, r3, #7
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	bf28      	it	cs
 8001c62:	2304      	movcs	r3, #4
 8001c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3304      	adds	r3, #4
 8001c6a:	2b06      	cmp	r3, #6
 8001c6c:	d902      	bls.n	8001c74 <NVIC_EncodePriority+0x30>
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3b03      	subs	r3, #3
 8001c72:	e000      	b.n	8001c76 <NVIC_EncodePriority+0x32>
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43da      	mvns	r2, r3
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	401a      	ands	r2, r3
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c8c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	fa01 f303 	lsl.w	r3, r1, r3
 8001c96:	43d9      	mvns	r1, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c9c:	4313      	orrs	r3, r2
         );
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3724      	adds	r7, #36	@ 0x24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr

08001ca8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cb8:	d301      	bcc.n	8001cbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e00f      	b.n	8001cde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce8 <SysTick_Config+0x40>)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cc6:	210f      	movs	r1, #15
 8001cc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ccc:	f7ff ff90 	bl	8001bf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cd0:	4b05      	ldr	r3, [pc, #20]	@ (8001ce8 <SysTick_Config+0x40>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cd6:	4b04      	ldr	r3, [pc, #16]	@ (8001ce8 <SysTick_Config+0x40>)
 8001cd8:	2207      	movs	r2, #7
 8001cda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	e000e010 	.word	0xe000e010

08001cec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7ff ff2d 	bl	8001b54 <__NVIC_SetPriorityGrouping>
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b086      	sub	sp, #24
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	4603      	mov	r3, r0
 8001d0a:	60b9      	str	r1, [r7, #8]
 8001d0c:	607a      	str	r2, [r7, #4]
 8001d0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d14:	f7ff ff42 	bl	8001b9c <__NVIC_GetPriorityGrouping>
 8001d18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	68b9      	ldr	r1, [r7, #8]
 8001d1e:	6978      	ldr	r0, [r7, #20]
 8001d20:	f7ff ff90 	bl	8001c44 <NVIC_EncodePriority>
 8001d24:	4602      	mov	r2, r0
 8001d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d2a:	4611      	mov	r1, r2
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff ff5f 	bl	8001bf0 <__NVIC_SetPriority>
}
 8001d32:	bf00      	nop
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	4603      	mov	r3, r0
 8001d42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff ff35 	bl	8001bb8 <__NVIC_EnableIRQ>
}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b082      	sub	sp, #8
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7ff ffa2 	bl	8001ca8 <SysTick_Config>
 8001d64:	4603      	mov	r3, r0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
	...

08001d70 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e059      	b.n	8001e3a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	4b2d      	ldr	r3, [pc, #180]	@ (8001e44 <HAL_DMA_Init+0xd4>)
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d80f      	bhi.n	8001db2 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	461a      	mov	r2, r3
 8001d98:	4b2b      	ldr	r3, [pc, #172]	@ (8001e48 <HAL_DMA_Init+0xd8>)
 8001d9a:	4413      	add	r3, r2
 8001d9c:	4a2b      	ldr	r2, [pc, #172]	@ (8001e4c <HAL_DMA_Init+0xdc>)
 8001d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001da2:	091b      	lsrs	r3, r3, #4
 8001da4:	009a      	lsls	r2, r3, #2
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a28      	ldr	r2, [pc, #160]	@ (8001e50 <HAL_DMA_Init+0xe0>)
 8001dae:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001db0:	e00e      	b.n	8001dd0 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	461a      	mov	r2, r3
 8001db8:	4b26      	ldr	r3, [pc, #152]	@ (8001e54 <HAL_DMA_Init+0xe4>)
 8001dba:	4413      	add	r3, r2
 8001dbc:	4a23      	ldr	r2, [pc, #140]	@ (8001e4c <HAL_DMA_Init+0xdc>)
 8001dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc2:	091b      	lsrs	r3, r3, #4
 8001dc4:	009a      	lsls	r2, r3, #2
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a22      	ldr	r2, [pc, #136]	@ (8001e58 <HAL_DMA_Init+0xe8>)
 8001dce:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001de6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001dea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001df4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr
 8001e44:	40020407 	.word	0x40020407
 8001e48:	bffdfff8 	.word	0xbffdfff8
 8001e4c:	cccccccd 	.word	0xcccccccd
 8001e50:	40020000 	.word	0x40020000
 8001e54:	bffdfbf8 	.word	0xbffdfbf8
 8001e58:	40020400 	.word	0x40020400

08001e5c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e64:	2300      	movs	r3, #0
 8001e66:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d008      	beq.n	8001e86 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2204      	movs	r2, #4
 8001e78:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e020      	b.n	8001ec8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 020e 	bic.w	r2, r2, #14
 8001e94:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0201 	bic.w	r2, r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eae:	2101      	movs	r1, #1
 8001eb0:	fa01 f202 	lsl.w	r2, r1, r2
 8001eb4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3714      	adds	r7, #20
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr
	...

08001ed4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001edc:	2300      	movs	r3, #0
 8001ede:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d005      	beq.n	8001ef8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2204      	movs	r2, #4
 8001ef0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	73fb      	strb	r3, [r7, #15]
 8001ef6:	e0d6      	b.n	80020a6 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 020e 	bic.w	r2, r2, #14
 8001f06:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0201 	bic.w	r2, r2, #1
 8001f16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4b64      	ldr	r3, [pc, #400]	@ (80020b0 <HAL_DMA_Abort_IT+0x1dc>)
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d958      	bls.n	8001fd6 <HAL_DMA_Abort_IT+0x102>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a62      	ldr	r2, [pc, #392]	@ (80020b4 <HAL_DMA_Abort_IT+0x1e0>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d04f      	beq.n	8001fce <HAL_DMA_Abort_IT+0xfa>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a61      	ldr	r2, [pc, #388]	@ (80020b8 <HAL_DMA_Abort_IT+0x1e4>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d048      	beq.n	8001fca <HAL_DMA_Abort_IT+0xf6>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a5f      	ldr	r2, [pc, #380]	@ (80020bc <HAL_DMA_Abort_IT+0x1e8>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d040      	beq.n	8001fc4 <HAL_DMA_Abort_IT+0xf0>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a5e      	ldr	r2, [pc, #376]	@ (80020c0 <HAL_DMA_Abort_IT+0x1ec>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d038      	beq.n	8001fbe <HAL_DMA_Abort_IT+0xea>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a5c      	ldr	r2, [pc, #368]	@ (80020c4 <HAL_DMA_Abort_IT+0x1f0>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d030      	beq.n	8001fb8 <HAL_DMA_Abort_IT+0xe4>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a5b      	ldr	r2, [pc, #364]	@ (80020c8 <HAL_DMA_Abort_IT+0x1f4>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d028      	beq.n	8001fb2 <HAL_DMA_Abort_IT+0xde>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a52      	ldr	r2, [pc, #328]	@ (80020b0 <HAL_DMA_Abort_IT+0x1dc>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d020      	beq.n	8001fac <HAL_DMA_Abort_IT+0xd8>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a57      	ldr	r2, [pc, #348]	@ (80020cc <HAL_DMA_Abort_IT+0x1f8>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d019      	beq.n	8001fa8 <HAL_DMA_Abort_IT+0xd4>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a55      	ldr	r2, [pc, #340]	@ (80020d0 <HAL_DMA_Abort_IT+0x1fc>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d012      	beq.n	8001fa4 <HAL_DMA_Abort_IT+0xd0>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a54      	ldr	r2, [pc, #336]	@ (80020d4 <HAL_DMA_Abort_IT+0x200>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d00a      	beq.n	8001f9e <HAL_DMA_Abort_IT+0xca>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a52      	ldr	r2, [pc, #328]	@ (80020d8 <HAL_DMA_Abort_IT+0x204>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d102      	bne.n	8001f98 <HAL_DMA_Abort_IT+0xc4>
 8001f92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f96:	e01b      	b.n	8001fd0 <HAL_DMA_Abort_IT+0xfc>
 8001f98:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f9c:	e018      	b.n	8001fd0 <HAL_DMA_Abort_IT+0xfc>
 8001f9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fa2:	e015      	b.n	8001fd0 <HAL_DMA_Abort_IT+0xfc>
 8001fa4:	2310      	movs	r3, #16
 8001fa6:	e013      	b.n	8001fd0 <HAL_DMA_Abort_IT+0xfc>
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e011      	b.n	8001fd0 <HAL_DMA_Abort_IT+0xfc>
 8001fac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001fb0:	e00e      	b.n	8001fd0 <HAL_DMA_Abort_IT+0xfc>
 8001fb2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001fb6:	e00b      	b.n	8001fd0 <HAL_DMA_Abort_IT+0xfc>
 8001fb8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fbc:	e008      	b.n	8001fd0 <HAL_DMA_Abort_IT+0xfc>
 8001fbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fc2:	e005      	b.n	8001fd0 <HAL_DMA_Abort_IT+0xfc>
 8001fc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fc8:	e002      	b.n	8001fd0 <HAL_DMA_Abort_IT+0xfc>
 8001fca:	2310      	movs	r3, #16
 8001fcc:	e000      	b.n	8001fd0 <HAL_DMA_Abort_IT+0xfc>
 8001fce:	2301      	movs	r3, #1
 8001fd0:	4a42      	ldr	r2, [pc, #264]	@ (80020dc <HAL_DMA_Abort_IT+0x208>)
 8001fd2:	6053      	str	r3, [r2, #4]
 8001fd4:	e057      	b.n	8002086 <HAL_DMA_Abort_IT+0x1b2>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a36      	ldr	r2, [pc, #216]	@ (80020b4 <HAL_DMA_Abort_IT+0x1e0>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d04f      	beq.n	8002080 <HAL_DMA_Abort_IT+0x1ac>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a34      	ldr	r2, [pc, #208]	@ (80020b8 <HAL_DMA_Abort_IT+0x1e4>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d048      	beq.n	800207c <HAL_DMA_Abort_IT+0x1a8>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a33      	ldr	r2, [pc, #204]	@ (80020bc <HAL_DMA_Abort_IT+0x1e8>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d040      	beq.n	8002076 <HAL_DMA_Abort_IT+0x1a2>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a31      	ldr	r2, [pc, #196]	@ (80020c0 <HAL_DMA_Abort_IT+0x1ec>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d038      	beq.n	8002070 <HAL_DMA_Abort_IT+0x19c>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a30      	ldr	r2, [pc, #192]	@ (80020c4 <HAL_DMA_Abort_IT+0x1f0>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d030      	beq.n	800206a <HAL_DMA_Abort_IT+0x196>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a2e      	ldr	r2, [pc, #184]	@ (80020c8 <HAL_DMA_Abort_IT+0x1f4>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d028      	beq.n	8002064 <HAL_DMA_Abort_IT+0x190>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a26      	ldr	r2, [pc, #152]	@ (80020b0 <HAL_DMA_Abort_IT+0x1dc>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d020      	beq.n	800205e <HAL_DMA_Abort_IT+0x18a>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a2a      	ldr	r2, [pc, #168]	@ (80020cc <HAL_DMA_Abort_IT+0x1f8>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d019      	beq.n	800205a <HAL_DMA_Abort_IT+0x186>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a29      	ldr	r2, [pc, #164]	@ (80020d0 <HAL_DMA_Abort_IT+0x1fc>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d012      	beq.n	8002056 <HAL_DMA_Abort_IT+0x182>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a27      	ldr	r2, [pc, #156]	@ (80020d4 <HAL_DMA_Abort_IT+0x200>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d00a      	beq.n	8002050 <HAL_DMA_Abort_IT+0x17c>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a26      	ldr	r2, [pc, #152]	@ (80020d8 <HAL_DMA_Abort_IT+0x204>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d102      	bne.n	800204a <HAL_DMA_Abort_IT+0x176>
 8002044:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002048:	e01b      	b.n	8002082 <HAL_DMA_Abort_IT+0x1ae>
 800204a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800204e:	e018      	b.n	8002082 <HAL_DMA_Abort_IT+0x1ae>
 8002050:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002054:	e015      	b.n	8002082 <HAL_DMA_Abort_IT+0x1ae>
 8002056:	2310      	movs	r3, #16
 8002058:	e013      	b.n	8002082 <HAL_DMA_Abort_IT+0x1ae>
 800205a:	2301      	movs	r3, #1
 800205c:	e011      	b.n	8002082 <HAL_DMA_Abort_IT+0x1ae>
 800205e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002062:	e00e      	b.n	8002082 <HAL_DMA_Abort_IT+0x1ae>
 8002064:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002068:	e00b      	b.n	8002082 <HAL_DMA_Abort_IT+0x1ae>
 800206a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800206e:	e008      	b.n	8002082 <HAL_DMA_Abort_IT+0x1ae>
 8002070:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002074:	e005      	b.n	8002082 <HAL_DMA_Abort_IT+0x1ae>
 8002076:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800207a:	e002      	b.n	8002082 <HAL_DMA_Abort_IT+0x1ae>
 800207c:	2310      	movs	r3, #16
 800207e:	e000      	b.n	8002082 <HAL_DMA_Abort_IT+0x1ae>
 8002080:	2301      	movs	r3, #1
 8002082:	4a17      	ldr	r2, [pc, #92]	@ (80020e0 <HAL_DMA_Abort_IT+0x20c>)
 8002084:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	4798      	blx	r3
    } 
  }
  return status;
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40020080 	.word	0x40020080
 80020b4:	40020008 	.word	0x40020008
 80020b8:	4002001c 	.word	0x4002001c
 80020bc:	40020030 	.word	0x40020030
 80020c0:	40020044 	.word	0x40020044
 80020c4:	40020058 	.word	0x40020058
 80020c8:	4002006c 	.word	0x4002006c
 80020cc:	40020408 	.word	0x40020408
 80020d0:	4002041c 	.word	0x4002041c
 80020d4:	40020430 	.word	0x40020430
 80020d8:	40020444 	.word	0x40020444
 80020dc:	40020400 	.word	0x40020400
 80020e0:	40020000 	.word	0x40020000

080020e4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002100:	2204      	movs	r2, #4
 8002102:	409a      	lsls	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	4013      	ands	r3, r2
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 80f1 	beq.w	80022f0 <HAL_DMA_IRQHandler+0x20c>
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	2b00      	cmp	r3, #0
 8002116:	f000 80eb 	beq.w	80022f0 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0320 	and.w	r3, r3, #32
 8002124:	2b00      	cmp	r3, #0
 8002126:	d107      	bne.n	8002138 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 0204 	bic.w	r2, r2, #4
 8002136:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	461a      	mov	r2, r3
 800213e:	4b5f      	ldr	r3, [pc, #380]	@ (80022bc <HAL_DMA_IRQHandler+0x1d8>)
 8002140:	429a      	cmp	r2, r3
 8002142:	d958      	bls.n	80021f6 <HAL_DMA_IRQHandler+0x112>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a5d      	ldr	r2, [pc, #372]	@ (80022c0 <HAL_DMA_IRQHandler+0x1dc>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d04f      	beq.n	80021ee <HAL_DMA_IRQHandler+0x10a>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a5c      	ldr	r2, [pc, #368]	@ (80022c4 <HAL_DMA_IRQHandler+0x1e0>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d048      	beq.n	80021ea <HAL_DMA_IRQHandler+0x106>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a5a      	ldr	r2, [pc, #360]	@ (80022c8 <HAL_DMA_IRQHandler+0x1e4>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d040      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x100>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a59      	ldr	r2, [pc, #356]	@ (80022cc <HAL_DMA_IRQHandler+0x1e8>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d038      	beq.n	80021de <HAL_DMA_IRQHandler+0xfa>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a57      	ldr	r2, [pc, #348]	@ (80022d0 <HAL_DMA_IRQHandler+0x1ec>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d030      	beq.n	80021d8 <HAL_DMA_IRQHandler+0xf4>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a56      	ldr	r2, [pc, #344]	@ (80022d4 <HAL_DMA_IRQHandler+0x1f0>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d028      	beq.n	80021d2 <HAL_DMA_IRQHandler+0xee>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a4d      	ldr	r2, [pc, #308]	@ (80022bc <HAL_DMA_IRQHandler+0x1d8>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d020      	beq.n	80021cc <HAL_DMA_IRQHandler+0xe8>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a52      	ldr	r2, [pc, #328]	@ (80022d8 <HAL_DMA_IRQHandler+0x1f4>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d019      	beq.n	80021c8 <HAL_DMA_IRQHandler+0xe4>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a50      	ldr	r2, [pc, #320]	@ (80022dc <HAL_DMA_IRQHandler+0x1f8>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d012      	beq.n	80021c4 <HAL_DMA_IRQHandler+0xe0>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a4f      	ldr	r2, [pc, #316]	@ (80022e0 <HAL_DMA_IRQHandler+0x1fc>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d00a      	beq.n	80021be <HAL_DMA_IRQHandler+0xda>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a4d      	ldr	r2, [pc, #308]	@ (80022e4 <HAL_DMA_IRQHandler+0x200>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d102      	bne.n	80021b8 <HAL_DMA_IRQHandler+0xd4>
 80021b2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80021b6:	e01b      	b.n	80021f0 <HAL_DMA_IRQHandler+0x10c>
 80021b8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80021bc:	e018      	b.n	80021f0 <HAL_DMA_IRQHandler+0x10c>
 80021be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021c2:	e015      	b.n	80021f0 <HAL_DMA_IRQHandler+0x10c>
 80021c4:	2340      	movs	r3, #64	@ 0x40
 80021c6:	e013      	b.n	80021f0 <HAL_DMA_IRQHandler+0x10c>
 80021c8:	2304      	movs	r3, #4
 80021ca:	e011      	b.n	80021f0 <HAL_DMA_IRQHandler+0x10c>
 80021cc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80021d0:	e00e      	b.n	80021f0 <HAL_DMA_IRQHandler+0x10c>
 80021d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80021d6:	e00b      	b.n	80021f0 <HAL_DMA_IRQHandler+0x10c>
 80021d8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80021dc:	e008      	b.n	80021f0 <HAL_DMA_IRQHandler+0x10c>
 80021de:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80021e2:	e005      	b.n	80021f0 <HAL_DMA_IRQHandler+0x10c>
 80021e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021e8:	e002      	b.n	80021f0 <HAL_DMA_IRQHandler+0x10c>
 80021ea:	2340      	movs	r3, #64	@ 0x40
 80021ec:	e000      	b.n	80021f0 <HAL_DMA_IRQHandler+0x10c>
 80021ee:	2304      	movs	r3, #4
 80021f0:	4a3d      	ldr	r2, [pc, #244]	@ (80022e8 <HAL_DMA_IRQHandler+0x204>)
 80021f2:	6053      	str	r3, [r2, #4]
 80021f4:	e057      	b.n	80022a6 <HAL_DMA_IRQHandler+0x1c2>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a31      	ldr	r2, [pc, #196]	@ (80022c0 <HAL_DMA_IRQHandler+0x1dc>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d04f      	beq.n	80022a0 <HAL_DMA_IRQHandler+0x1bc>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a2f      	ldr	r2, [pc, #188]	@ (80022c4 <HAL_DMA_IRQHandler+0x1e0>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d048      	beq.n	800229c <HAL_DMA_IRQHandler+0x1b8>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a2e      	ldr	r2, [pc, #184]	@ (80022c8 <HAL_DMA_IRQHandler+0x1e4>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d040      	beq.n	8002296 <HAL_DMA_IRQHandler+0x1b2>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a2c      	ldr	r2, [pc, #176]	@ (80022cc <HAL_DMA_IRQHandler+0x1e8>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d038      	beq.n	8002290 <HAL_DMA_IRQHandler+0x1ac>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a2b      	ldr	r2, [pc, #172]	@ (80022d0 <HAL_DMA_IRQHandler+0x1ec>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d030      	beq.n	800228a <HAL_DMA_IRQHandler+0x1a6>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a29      	ldr	r2, [pc, #164]	@ (80022d4 <HAL_DMA_IRQHandler+0x1f0>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d028      	beq.n	8002284 <HAL_DMA_IRQHandler+0x1a0>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a21      	ldr	r2, [pc, #132]	@ (80022bc <HAL_DMA_IRQHandler+0x1d8>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d020      	beq.n	800227e <HAL_DMA_IRQHandler+0x19a>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a25      	ldr	r2, [pc, #148]	@ (80022d8 <HAL_DMA_IRQHandler+0x1f4>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d019      	beq.n	800227a <HAL_DMA_IRQHandler+0x196>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a24      	ldr	r2, [pc, #144]	@ (80022dc <HAL_DMA_IRQHandler+0x1f8>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d012      	beq.n	8002276 <HAL_DMA_IRQHandler+0x192>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a22      	ldr	r2, [pc, #136]	@ (80022e0 <HAL_DMA_IRQHandler+0x1fc>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d00a      	beq.n	8002270 <HAL_DMA_IRQHandler+0x18c>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a21      	ldr	r2, [pc, #132]	@ (80022e4 <HAL_DMA_IRQHandler+0x200>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d102      	bne.n	800226a <HAL_DMA_IRQHandler+0x186>
 8002264:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002268:	e01b      	b.n	80022a2 <HAL_DMA_IRQHandler+0x1be>
 800226a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800226e:	e018      	b.n	80022a2 <HAL_DMA_IRQHandler+0x1be>
 8002270:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002274:	e015      	b.n	80022a2 <HAL_DMA_IRQHandler+0x1be>
 8002276:	2340      	movs	r3, #64	@ 0x40
 8002278:	e013      	b.n	80022a2 <HAL_DMA_IRQHandler+0x1be>
 800227a:	2304      	movs	r3, #4
 800227c:	e011      	b.n	80022a2 <HAL_DMA_IRQHandler+0x1be>
 800227e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002282:	e00e      	b.n	80022a2 <HAL_DMA_IRQHandler+0x1be>
 8002284:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002288:	e00b      	b.n	80022a2 <HAL_DMA_IRQHandler+0x1be>
 800228a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800228e:	e008      	b.n	80022a2 <HAL_DMA_IRQHandler+0x1be>
 8002290:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002294:	e005      	b.n	80022a2 <HAL_DMA_IRQHandler+0x1be>
 8002296:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800229a:	e002      	b.n	80022a2 <HAL_DMA_IRQHandler+0x1be>
 800229c:	2340      	movs	r3, #64	@ 0x40
 800229e:	e000      	b.n	80022a2 <HAL_DMA_IRQHandler+0x1be>
 80022a0:	2304      	movs	r3, #4
 80022a2:	4a12      	ldr	r2, [pc, #72]	@ (80022ec <HAL_DMA_IRQHandler+0x208>)
 80022a4:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f000 8136 	beq.w	800251c <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80022b8:	e130      	b.n	800251c <HAL_DMA_IRQHandler+0x438>
 80022ba:	bf00      	nop
 80022bc:	40020080 	.word	0x40020080
 80022c0:	40020008 	.word	0x40020008
 80022c4:	4002001c 	.word	0x4002001c
 80022c8:	40020030 	.word	0x40020030
 80022cc:	40020044 	.word	0x40020044
 80022d0:	40020058 	.word	0x40020058
 80022d4:	4002006c 	.word	0x4002006c
 80022d8:	40020408 	.word	0x40020408
 80022dc:	4002041c 	.word	0x4002041c
 80022e0:	40020430 	.word	0x40020430
 80022e4:	40020444 	.word	0x40020444
 80022e8:	40020400 	.word	0x40020400
 80022ec:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f4:	2202      	movs	r2, #2
 80022f6:	409a      	lsls	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4013      	ands	r3, r2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f000 80dd 	beq.w	80024bc <HAL_DMA_IRQHandler+0x3d8>
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 80d7 	beq.w	80024bc <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0320 	and.w	r3, r3, #32
 8002318:	2b00      	cmp	r3, #0
 800231a:	d10b      	bne.n	8002334 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 020a 	bic.w	r2, r2, #10
 800232a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	461a      	mov	r2, r3
 800233a:	4b7b      	ldr	r3, [pc, #492]	@ (8002528 <HAL_DMA_IRQHandler+0x444>)
 800233c:	429a      	cmp	r2, r3
 800233e:	d958      	bls.n	80023f2 <HAL_DMA_IRQHandler+0x30e>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a79      	ldr	r2, [pc, #484]	@ (800252c <HAL_DMA_IRQHandler+0x448>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d04f      	beq.n	80023ea <HAL_DMA_IRQHandler+0x306>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a78      	ldr	r2, [pc, #480]	@ (8002530 <HAL_DMA_IRQHandler+0x44c>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d048      	beq.n	80023e6 <HAL_DMA_IRQHandler+0x302>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a76      	ldr	r2, [pc, #472]	@ (8002534 <HAL_DMA_IRQHandler+0x450>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d040      	beq.n	80023e0 <HAL_DMA_IRQHandler+0x2fc>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a75      	ldr	r2, [pc, #468]	@ (8002538 <HAL_DMA_IRQHandler+0x454>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d038      	beq.n	80023da <HAL_DMA_IRQHandler+0x2f6>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a73      	ldr	r2, [pc, #460]	@ (800253c <HAL_DMA_IRQHandler+0x458>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d030      	beq.n	80023d4 <HAL_DMA_IRQHandler+0x2f0>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a72      	ldr	r2, [pc, #456]	@ (8002540 <HAL_DMA_IRQHandler+0x45c>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d028      	beq.n	80023ce <HAL_DMA_IRQHandler+0x2ea>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a69      	ldr	r2, [pc, #420]	@ (8002528 <HAL_DMA_IRQHandler+0x444>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d020      	beq.n	80023c8 <HAL_DMA_IRQHandler+0x2e4>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a6e      	ldr	r2, [pc, #440]	@ (8002544 <HAL_DMA_IRQHandler+0x460>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d019      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x2e0>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a6c      	ldr	r2, [pc, #432]	@ (8002548 <HAL_DMA_IRQHandler+0x464>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d012      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x2dc>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a6b      	ldr	r2, [pc, #428]	@ (800254c <HAL_DMA_IRQHandler+0x468>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d00a      	beq.n	80023ba <HAL_DMA_IRQHandler+0x2d6>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a69      	ldr	r2, [pc, #420]	@ (8002550 <HAL_DMA_IRQHandler+0x46c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d102      	bne.n	80023b4 <HAL_DMA_IRQHandler+0x2d0>
 80023ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023b2:	e01b      	b.n	80023ec <HAL_DMA_IRQHandler+0x308>
 80023b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023b8:	e018      	b.n	80023ec <HAL_DMA_IRQHandler+0x308>
 80023ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023be:	e015      	b.n	80023ec <HAL_DMA_IRQHandler+0x308>
 80023c0:	2320      	movs	r3, #32
 80023c2:	e013      	b.n	80023ec <HAL_DMA_IRQHandler+0x308>
 80023c4:	2302      	movs	r3, #2
 80023c6:	e011      	b.n	80023ec <HAL_DMA_IRQHandler+0x308>
 80023c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023cc:	e00e      	b.n	80023ec <HAL_DMA_IRQHandler+0x308>
 80023ce:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80023d2:	e00b      	b.n	80023ec <HAL_DMA_IRQHandler+0x308>
 80023d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023d8:	e008      	b.n	80023ec <HAL_DMA_IRQHandler+0x308>
 80023da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023de:	e005      	b.n	80023ec <HAL_DMA_IRQHandler+0x308>
 80023e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023e4:	e002      	b.n	80023ec <HAL_DMA_IRQHandler+0x308>
 80023e6:	2320      	movs	r3, #32
 80023e8:	e000      	b.n	80023ec <HAL_DMA_IRQHandler+0x308>
 80023ea:	2302      	movs	r3, #2
 80023ec:	4a59      	ldr	r2, [pc, #356]	@ (8002554 <HAL_DMA_IRQHandler+0x470>)
 80023ee:	6053      	str	r3, [r2, #4]
 80023f0:	e057      	b.n	80024a2 <HAL_DMA_IRQHandler+0x3be>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a4d      	ldr	r2, [pc, #308]	@ (800252c <HAL_DMA_IRQHandler+0x448>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d04f      	beq.n	800249c <HAL_DMA_IRQHandler+0x3b8>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a4b      	ldr	r2, [pc, #300]	@ (8002530 <HAL_DMA_IRQHandler+0x44c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d048      	beq.n	8002498 <HAL_DMA_IRQHandler+0x3b4>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a4a      	ldr	r2, [pc, #296]	@ (8002534 <HAL_DMA_IRQHandler+0x450>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d040      	beq.n	8002492 <HAL_DMA_IRQHandler+0x3ae>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a48      	ldr	r2, [pc, #288]	@ (8002538 <HAL_DMA_IRQHandler+0x454>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d038      	beq.n	800248c <HAL_DMA_IRQHandler+0x3a8>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a47      	ldr	r2, [pc, #284]	@ (800253c <HAL_DMA_IRQHandler+0x458>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d030      	beq.n	8002486 <HAL_DMA_IRQHandler+0x3a2>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a45      	ldr	r2, [pc, #276]	@ (8002540 <HAL_DMA_IRQHandler+0x45c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d028      	beq.n	8002480 <HAL_DMA_IRQHandler+0x39c>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a3d      	ldr	r2, [pc, #244]	@ (8002528 <HAL_DMA_IRQHandler+0x444>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d020      	beq.n	800247a <HAL_DMA_IRQHandler+0x396>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a41      	ldr	r2, [pc, #260]	@ (8002544 <HAL_DMA_IRQHandler+0x460>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d019      	beq.n	8002476 <HAL_DMA_IRQHandler+0x392>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a40      	ldr	r2, [pc, #256]	@ (8002548 <HAL_DMA_IRQHandler+0x464>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d012      	beq.n	8002472 <HAL_DMA_IRQHandler+0x38e>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a3e      	ldr	r2, [pc, #248]	@ (800254c <HAL_DMA_IRQHandler+0x468>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d00a      	beq.n	800246c <HAL_DMA_IRQHandler+0x388>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a3d      	ldr	r2, [pc, #244]	@ (8002550 <HAL_DMA_IRQHandler+0x46c>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d102      	bne.n	8002466 <HAL_DMA_IRQHandler+0x382>
 8002460:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002464:	e01b      	b.n	800249e <HAL_DMA_IRQHandler+0x3ba>
 8002466:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800246a:	e018      	b.n	800249e <HAL_DMA_IRQHandler+0x3ba>
 800246c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002470:	e015      	b.n	800249e <HAL_DMA_IRQHandler+0x3ba>
 8002472:	2320      	movs	r3, #32
 8002474:	e013      	b.n	800249e <HAL_DMA_IRQHandler+0x3ba>
 8002476:	2302      	movs	r3, #2
 8002478:	e011      	b.n	800249e <HAL_DMA_IRQHandler+0x3ba>
 800247a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800247e:	e00e      	b.n	800249e <HAL_DMA_IRQHandler+0x3ba>
 8002480:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002484:	e00b      	b.n	800249e <HAL_DMA_IRQHandler+0x3ba>
 8002486:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800248a:	e008      	b.n	800249e <HAL_DMA_IRQHandler+0x3ba>
 800248c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002490:	e005      	b.n	800249e <HAL_DMA_IRQHandler+0x3ba>
 8002492:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002496:	e002      	b.n	800249e <HAL_DMA_IRQHandler+0x3ba>
 8002498:	2320      	movs	r3, #32
 800249a:	e000      	b.n	800249e <HAL_DMA_IRQHandler+0x3ba>
 800249c:	2302      	movs	r3, #2
 800249e:	4a2e      	ldr	r2, [pc, #184]	@ (8002558 <HAL_DMA_IRQHandler+0x474>)
 80024a0:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d034      	beq.n	800251c <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80024ba:	e02f      	b.n	800251c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c0:	2208      	movs	r2, #8
 80024c2:	409a      	lsls	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4013      	ands	r3, r2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d028      	beq.n	800251e <HAL_DMA_IRQHandler+0x43a>
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d023      	beq.n	800251e <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 020e 	bic.w	r2, r2, #14
 80024e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ee:	2101      	movs	r1, #1
 80024f0:	fa01 f202 	lsl.w	r2, r1, r2
 80024f4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002510:	2b00      	cmp	r3, #0
 8002512:	d004      	beq.n	800251e <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	4798      	blx	r3
    }
  }
  return;
 800251c:	bf00      	nop
 800251e:	bf00      	nop
}
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40020080 	.word	0x40020080
 800252c:	40020008 	.word	0x40020008
 8002530:	4002001c 	.word	0x4002001c
 8002534:	40020030 	.word	0x40020030
 8002538:	40020044 	.word	0x40020044
 800253c:	40020058 	.word	0x40020058
 8002540:	4002006c 	.word	0x4002006c
 8002544:	40020408 	.word	0x40020408
 8002548:	4002041c 	.word	0x4002041c
 800254c:	40020430 	.word	0x40020430
 8002550:	40020444 	.word	0x40020444
 8002554:	40020400 	.word	0x40020400
 8002558:	40020000 	.word	0x40020000

0800255c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800256a:	b2db      	uxtb	r3, r3
}
 800256c:	4618      	mov	r0, r3
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr
	...

08002578 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002578:	b480      	push	{r7}
 800257a:	b08b      	sub	sp, #44	@ 0x2c
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002582:	2300      	movs	r3, #0
 8002584:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002586:	2300      	movs	r3, #0
 8002588:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800258a:	e179      	b.n	8002880 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800258c:	2201      	movs	r2, #1
 800258e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	69fa      	ldr	r2, [r7, #28]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	f040 8168 	bne.w	800287a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	4a96      	ldr	r2, [pc, #600]	@ (8002808 <HAL_GPIO_Init+0x290>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d05e      	beq.n	8002672 <HAL_GPIO_Init+0xfa>
 80025b4:	4a94      	ldr	r2, [pc, #592]	@ (8002808 <HAL_GPIO_Init+0x290>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d875      	bhi.n	80026a6 <HAL_GPIO_Init+0x12e>
 80025ba:	4a94      	ldr	r2, [pc, #592]	@ (800280c <HAL_GPIO_Init+0x294>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d058      	beq.n	8002672 <HAL_GPIO_Init+0xfa>
 80025c0:	4a92      	ldr	r2, [pc, #584]	@ (800280c <HAL_GPIO_Init+0x294>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d86f      	bhi.n	80026a6 <HAL_GPIO_Init+0x12e>
 80025c6:	4a92      	ldr	r2, [pc, #584]	@ (8002810 <HAL_GPIO_Init+0x298>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d052      	beq.n	8002672 <HAL_GPIO_Init+0xfa>
 80025cc:	4a90      	ldr	r2, [pc, #576]	@ (8002810 <HAL_GPIO_Init+0x298>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d869      	bhi.n	80026a6 <HAL_GPIO_Init+0x12e>
 80025d2:	4a90      	ldr	r2, [pc, #576]	@ (8002814 <HAL_GPIO_Init+0x29c>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d04c      	beq.n	8002672 <HAL_GPIO_Init+0xfa>
 80025d8:	4a8e      	ldr	r2, [pc, #568]	@ (8002814 <HAL_GPIO_Init+0x29c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d863      	bhi.n	80026a6 <HAL_GPIO_Init+0x12e>
 80025de:	4a8e      	ldr	r2, [pc, #568]	@ (8002818 <HAL_GPIO_Init+0x2a0>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d046      	beq.n	8002672 <HAL_GPIO_Init+0xfa>
 80025e4:	4a8c      	ldr	r2, [pc, #560]	@ (8002818 <HAL_GPIO_Init+0x2a0>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d85d      	bhi.n	80026a6 <HAL_GPIO_Init+0x12e>
 80025ea:	2b12      	cmp	r3, #18
 80025ec:	d82a      	bhi.n	8002644 <HAL_GPIO_Init+0xcc>
 80025ee:	2b12      	cmp	r3, #18
 80025f0:	d859      	bhi.n	80026a6 <HAL_GPIO_Init+0x12e>
 80025f2:	a201      	add	r2, pc, #4	@ (adr r2, 80025f8 <HAL_GPIO_Init+0x80>)
 80025f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f8:	08002673 	.word	0x08002673
 80025fc:	0800264d 	.word	0x0800264d
 8002600:	0800265f 	.word	0x0800265f
 8002604:	080026a1 	.word	0x080026a1
 8002608:	080026a7 	.word	0x080026a7
 800260c:	080026a7 	.word	0x080026a7
 8002610:	080026a7 	.word	0x080026a7
 8002614:	080026a7 	.word	0x080026a7
 8002618:	080026a7 	.word	0x080026a7
 800261c:	080026a7 	.word	0x080026a7
 8002620:	080026a7 	.word	0x080026a7
 8002624:	080026a7 	.word	0x080026a7
 8002628:	080026a7 	.word	0x080026a7
 800262c:	080026a7 	.word	0x080026a7
 8002630:	080026a7 	.word	0x080026a7
 8002634:	080026a7 	.word	0x080026a7
 8002638:	080026a7 	.word	0x080026a7
 800263c:	08002655 	.word	0x08002655
 8002640:	08002669 	.word	0x08002669
 8002644:	4a75      	ldr	r2, [pc, #468]	@ (800281c <HAL_GPIO_Init+0x2a4>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d013      	beq.n	8002672 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800264a:	e02c      	b.n	80026a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	623b      	str	r3, [r7, #32]
          break;
 8002652:	e029      	b.n	80026a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	3304      	adds	r3, #4
 800265a:	623b      	str	r3, [r7, #32]
          break;
 800265c:	e024      	b.n	80026a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	3308      	adds	r3, #8
 8002664:	623b      	str	r3, [r7, #32]
          break;
 8002666:	e01f      	b.n	80026a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	330c      	adds	r3, #12
 800266e:	623b      	str	r3, [r7, #32]
          break;
 8002670:	e01a      	b.n	80026a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d102      	bne.n	8002680 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800267a:	2304      	movs	r3, #4
 800267c:	623b      	str	r3, [r7, #32]
          break;
 800267e:	e013      	b.n	80026a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d105      	bne.n	8002694 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002688:	2308      	movs	r3, #8
 800268a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	69fa      	ldr	r2, [r7, #28]
 8002690:	611a      	str	r2, [r3, #16]
          break;
 8002692:	e009      	b.n	80026a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002694:	2308      	movs	r3, #8
 8002696:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	69fa      	ldr	r2, [r7, #28]
 800269c:	615a      	str	r2, [r3, #20]
          break;
 800269e:	e003      	b.n	80026a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026a0:	2300      	movs	r3, #0
 80026a2:	623b      	str	r3, [r7, #32]
          break;
 80026a4:	e000      	b.n	80026a8 <HAL_GPIO_Init+0x130>
          break;
 80026a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	2bff      	cmp	r3, #255	@ 0xff
 80026ac:	d801      	bhi.n	80026b2 <HAL_GPIO_Init+0x13a>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	e001      	b.n	80026b6 <HAL_GPIO_Init+0x13e>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3304      	adds	r3, #4
 80026b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	2bff      	cmp	r3, #255	@ 0xff
 80026bc:	d802      	bhi.n	80026c4 <HAL_GPIO_Init+0x14c>
 80026be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	e002      	b.n	80026ca <HAL_GPIO_Init+0x152>
 80026c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c6:	3b08      	subs	r3, #8
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	210f      	movs	r1, #15
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	fa01 f303 	lsl.w	r3, r1, r3
 80026d8:	43db      	mvns	r3, r3
 80026da:	401a      	ands	r2, r3
 80026dc:	6a39      	ldr	r1, [r7, #32]
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	fa01 f303 	lsl.w	r3, r1, r3
 80026e4:	431a      	orrs	r2, r3
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 80c1 	beq.w	800287a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026f8:	4b49      	ldr	r3, [pc, #292]	@ (8002820 <HAL_GPIO_Init+0x2a8>)
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	4a48      	ldr	r2, [pc, #288]	@ (8002820 <HAL_GPIO_Init+0x2a8>)
 80026fe:	f043 0301 	orr.w	r3, r3, #1
 8002702:	6193      	str	r3, [r2, #24]
 8002704:	4b46      	ldr	r3, [pc, #280]	@ (8002820 <HAL_GPIO_Init+0x2a8>)
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002710:	4a44      	ldr	r2, [pc, #272]	@ (8002824 <HAL_GPIO_Init+0x2ac>)
 8002712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002714:	089b      	lsrs	r3, r3, #2
 8002716:	3302      	adds	r3, #2
 8002718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800271c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800271e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002720:	f003 0303 	and.w	r3, r3, #3
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	220f      	movs	r2, #15
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	43db      	mvns	r3, r3
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	4013      	ands	r3, r2
 8002732:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a3c      	ldr	r2, [pc, #240]	@ (8002828 <HAL_GPIO_Init+0x2b0>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d01f      	beq.n	800277c <HAL_GPIO_Init+0x204>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a3b      	ldr	r2, [pc, #236]	@ (800282c <HAL_GPIO_Init+0x2b4>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d019      	beq.n	8002778 <HAL_GPIO_Init+0x200>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a3a      	ldr	r2, [pc, #232]	@ (8002830 <HAL_GPIO_Init+0x2b8>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d013      	beq.n	8002774 <HAL_GPIO_Init+0x1fc>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a39      	ldr	r2, [pc, #228]	@ (8002834 <HAL_GPIO_Init+0x2bc>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d00d      	beq.n	8002770 <HAL_GPIO_Init+0x1f8>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a38      	ldr	r2, [pc, #224]	@ (8002838 <HAL_GPIO_Init+0x2c0>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d007      	beq.n	800276c <HAL_GPIO_Init+0x1f4>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a37      	ldr	r2, [pc, #220]	@ (800283c <HAL_GPIO_Init+0x2c4>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d101      	bne.n	8002768 <HAL_GPIO_Init+0x1f0>
 8002764:	2305      	movs	r3, #5
 8002766:	e00a      	b.n	800277e <HAL_GPIO_Init+0x206>
 8002768:	2306      	movs	r3, #6
 800276a:	e008      	b.n	800277e <HAL_GPIO_Init+0x206>
 800276c:	2304      	movs	r3, #4
 800276e:	e006      	b.n	800277e <HAL_GPIO_Init+0x206>
 8002770:	2303      	movs	r3, #3
 8002772:	e004      	b.n	800277e <HAL_GPIO_Init+0x206>
 8002774:	2302      	movs	r3, #2
 8002776:	e002      	b.n	800277e <HAL_GPIO_Init+0x206>
 8002778:	2301      	movs	r3, #1
 800277a:	e000      	b.n	800277e <HAL_GPIO_Init+0x206>
 800277c:	2300      	movs	r3, #0
 800277e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002780:	f002 0203 	and.w	r2, r2, #3
 8002784:	0092      	lsls	r2, r2, #2
 8002786:	4093      	lsls	r3, r2
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	4313      	orrs	r3, r2
 800278c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800278e:	4925      	ldr	r1, [pc, #148]	@ (8002824 <HAL_GPIO_Init+0x2ac>)
 8002790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002792:	089b      	lsrs	r3, r3, #2
 8002794:	3302      	adds	r3, #2
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d006      	beq.n	80027b6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027a8:	4b25      	ldr	r3, [pc, #148]	@ (8002840 <HAL_GPIO_Init+0x2c8>)
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	4924      	ldr	r1, [pc, #144]	@ (8002840 <HAL_GPIO_Init+0x2c8>)
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	608b      	str	r3, [r1, #8]
 80027b4:	e006      	b.n	80027c4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027b6:	4b22      	ldr	r3, [pc, #136]	@ (8002840 <HAL_GPIO_Init+0x2c8>)
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	43db      	mvns	r3, r3
 80027be:	4920      	ldr	r1, [pc, #128]	@ (8002840 <HAL_GPIO_Init+0x2c8>)
 80027c0:	4013      	ands	r3, r2
 80027c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d006      	beq.n	80027de <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002840 <HAL_GPIO_Init+0x2c8>)
 80027d2:	68da      	ldr	r2, [r3, #12]
 80027d4:	491a      	ldr	r1, [pc, #104]	@ (8002840 <HAL_GPIO_Init+0x2c8>)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	4313      	orrs	r3, r2
 80027da:	60cb      	str	r3, [r1, #12]
 80027dc:	e006      	b.n	80027ec <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027de:	4b18      	ldr	r3, [pc, #96]	@ (8002840 <HAL_GPIO_Init+0x2c8>)
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	43db      	mvns	r3, r3
 80027e6:	4916      	ldr	r1, [pc, #88]	@ (8002840 <HAL_GPIO_Init+0x2c8>)
 80027e8:	4013      	ands	r3, r2
 80027ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d025      	beq.n	8002844 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80027f8:	4b11      	ldr	r3, [pc, #68]	@ (8002840 <HAL_GPIO_Init+0x2c8>)
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	4910      	ldr	r1, [pc, #64]	@ (8002840 <HAL_GPIO_Init+0x2c8>)
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	4313      	orrs	r3, r2
 8002802:	604b      	str	r3, [r1, #4]
 8002804:	e025      	b.n	8002852 <HAL_GPIO_Init+0x2da>
 8002806:	bf00      	nop
 8002808:	10320000 	.word	0x10320000
 800280c:	10310000 	.word	0x10310000
 8002810:	10220000 	.word	0x10220000
 8002814:	10210000 	.word	0x10210000
 8002818:	10120000 	.word	0x10120000
 800281c:	10110000 	.word	0x10110000
 8002820:	40021000 	.word	0x40021000
 8002824:	40010000 	.word	0x40010000
 8002828:	40010800 	.word	0x40010800
 800282c:	40010c00 	.word	0x40010c00
 8002830:	40011000 	.word	0x40011000
 8002834:	40011400 	.word	0x40011400
 8002838:	40011800 	.word	0x40011800
 800283c:	40011c00 	.word	0x40011c00
 8002840:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002844:	4b15      	ldr	r3, [pc, #84]	@ (800289c <HAL_GPIO_Init+0x324>)
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	43db      	mvns	r3, r3
 800284c:	4913      	ldr	r1, [pc, #76]	@ (800289c <HAL_GPIO_Init+0x324>)
 800284e:	4013      	ands	r3, r2
 8002850:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d006      	beq.n	800286c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800285e:	4b0f      	ldr	r3, [pc, #60]	@ (800289c <HAL_GPIO_Init+0x324>)
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	490e      	ldr	r1, [pc, #56]	@ (800289c <HAL_GPIO_Init+0x324>)
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	4313      	orrs	r3, r2
 8002868:	600b      	str	r3, [r1, #0]
 800286a:	e006      	b.n	800287a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800286c:	4b0b      	ldr	r3, [pc, #44]	@ (800289c <HAL_GPIO_Init+0x324>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	43db      	mvns	r3, r3
 8002874:	4909      	ldr	r1, [pc, #36]	@ (800289c <HAL_GPIO_Init+0x324>)
 8002876:	4013      	ands	r3, r2
 8002878:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800287a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287c:	3301      	adds	r3, #1
 800287e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002886:	fa22 f303 	lsr.w	r3, r2, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	f47f ae7e 	bne.w	800258c <HAL_GPIO_Init+0x14>
  }
}
 8002890:	bf00      	nop
 8002892:	bf00      	nop
 8002894:	372c      	adds	r7, #44	@ 0x2c
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr
 800289c:	40010400 	.word	0x40010400

080028a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	887b      	ldrh	r3, [r7, #2]
 80028b2:	4013      	ands	r3, r2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d002      	beq.n	80028be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028b8:	2301      	movs	r3, #1
 80028ba:	73fb      	strb	r3, [r7, #15]
 80028bc:	e001      	b.n	80028c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028be:	2300      	movs	r3, #0
 80028c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr

080028ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
 80028d6:	460b      	mov	r3, r1
 80028d8:	807b      	strh	r3, [r7, #2]
 80028da:	4613      	mov	r3, r2
 80028dc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028de:	787b      	ldrb	r3, [r7, #1]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d003      	beq.n	80028ec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028e4:	887a      	ldrh	r2, [r7, #2]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028ea:	e003      	b.n	80028f4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028ec:	887b      	ldrh	r3, [r7, #2]
 80028ee:	041a      	lsls	r2, r3, #16
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	611a      	str	r2, [r3, #16]
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bc80      	pop	{r7}
 80028fc:	4770      	bx	lr

080028fe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028fe:	b480      	push	{r7}
 8002900:	b085      	sub	sp, #20
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
 8002906:	460b      	mov	r3, r1
 8002908:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002910:	887a      	ldrh	r2, [r7, #2]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	4013      	ands	r3, r2
 8002916:	041a      	lsls	r2, r3, #16
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	43d9      	mvns	r1, r3
 800291c:	887b      	ldrh	r3, [r7, #2]
 800291e:	400b      	ands	r3, r1
 8002920:	431a      	orrs	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	611a      	str	r2, [r3, #16]
}
 8002926:	bf00      	nop
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr

08002930 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e12b      	b.n	8002b9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d106      	bne.n	800295c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7fe faf6 	bl	8000f48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2224      	movs	r2, #36	@ 0x24
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0201 	bic.w	r2, r2, #1
 8002972:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002982:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002992:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002994:	f002 fa68 	bl	8004e68 <HAL_RCC_GetPCLK1Freq>
 8002998:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	4a81      	ldr	r2, [pc, #516]	@ (8002ba4 <HAL_I2C_Init+0x274>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d807      	bhi.n	80029b4 <HAL_I2C_Init+0x84>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4a80      	ldr	r2, [pc, #512]	@ (8002ba8 <HAL_I2C_Init+0x278>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	bf94      	ite	ls
 80029ac:	2301      	movls	r3, #1
 80029ae:	2300      	movhi	r3, #0
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	e006      	b.n	80029c2 <HAL_I2C_Init+0x92>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4a7d      	ldr	r2, [pc, #500]	@ (8002bac <HAL_I2C_Init+0x27c>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	bf94      	ite	ls
 80029bc:	2301      	movls	r3, #1
 80029be:	2300      	movhi	r3, #0
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e0e7      	b.n	8002b9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	4a78      	ldr	r2, [pc, #480]	@ (8002bb0 <HAL_I2C_Init+0x280>)
 80029ce:	fba2 2303 	umull	r2, r3, r2, r3
 80029d2:	0c9b      	lsrs	r3, r3, #18
 80029d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68ba      	ldr	r2, [r7, #8]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	4a6a      	ldr	r2, [pc, #424]	@ (8002ba4 <HAL_I2C_Init+0x274>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d802      	bhi.n	8002a04 <HAL_I2C_Init+0xd4>
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	3301      	adds	r3, #1
 8002a02:	e009      	b.n	8002a18 <HAL_I2C_Init+0xe8>
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a0a:	fb02 f303 	mul.w	r3, r2, r3
 8002a0e:	4a69      	ldr	r2, [pc, #420]	@ (8002bb4 <HAL_I2C_Init+0x284>)
 8002a10:	fba2 2303 	umull	r2, r3, r2, r3
 8002a14:	099b      	lsrs	r3, r3, #6
 8002a16:	3301      	adds	r3, #1
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	6812      	ldr	r2, [r2, #0]
 8002a1c:	430b      	orrs	r3, r1
 8002a1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002a2a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	495c      	ldr	r1, [pc, #368]	@ (8002ba4 <HAL_I2C_Init+0x274>)
 8002a34:	428b      	cmp	r3, r1
 8002a36:	d819      	bhi.n	8002a6c <HAL_I2C_Init+0x13c>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	1e59      	subs	r1, r3, #1
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a46:	1c59      	adds	r1, r3, #1
 8002a48:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002a4c:	400b      	ands	r3, r1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00a      	beq.n	8002a68 <HAL_I2C_Init+0x138>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	1e59      	subs	r1, r3, #1
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a60:	3301      	adds	r3, #1
 8002a62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a66:	e051      	b.n	8002b0c <HAL_I2C_Init+0x1dc>
 8002a68:	2304      	movs	r3, #4
 8002a6a:	e04f      	b.n	8002b0c <HAL_I2C_Init+0x1dc>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d111      	bne.n	8002a98 <HAL_I2C_Init+0x168>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	1e58      	subs	r0, r3, #1
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6859      	ldr	r1, [r3, #4]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	440b      	add	r3, r1
 8002a82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a86:	3301      	adds	r3, #1
 8002a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	bf0c      	ite	eq
 8002a90:	2301      	moveq	r3, #1
 8002a92:	2300      	movne	r3, #0
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	e012      	b.n	8002abe <HAL_I2C_Init+0x18e>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	1e58      	subs	r0, r3, #1
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6859      	ldr	r1, [r3, #4]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	0099      	lsls	r1, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aae:	3301      	adds	r3, #1
 8002ab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	bf0c      	ite	eq
 8002ab8:	2301      	moveq	r3, #1
 8002aba:	2300      	movne	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <HAL_I2C_Init+0x196>
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e022      	b.n	8002b0c <HAL_I2C_Init+0x1dc>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10e      	bne.n	8002aec <HAL_I2C_Init+0x1bc>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	1e58      	subs	r0, r3, #1
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6859      	ldr	r1, [r3, #4]
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	440b      	add	r3, r1
 8002adc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002aea:	e00f      	b.n	8002b0c <HAL_I2C_Init+0x1dc>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	1e58      	subs	r0, r3, #1
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6859      	ldr	r1, [r3, #4]
 8002af4:	460b      	mov	r3, r1
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	0099      	lsls	r1, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b02:	3301      	adds	r3, #1
 8002b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b08:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	6809      	ldr	r1, [r1, #0]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69da      	ldr	r2, [r3, #28]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002b3a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6911      	ldr	r1, [r2, #16]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	68d2      	ldr	r2, [r2, #12]
 8002b46:	4311      	orrs	r1, r2
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6812      	ldr	r2, [r2, #0]
 8002b4c:	430b      	orrs	r3, r1
 8002b4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695a      	ldr	r2, [r3, #20]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 0201 	orr.w	r2, r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2220      	movs	r2, #32
 8002b86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	000186a0 	.word	0x000186a0
 8002ba8:	001e847f 	.word	0x001e847f
 8002bac:	003d08ff 	.word	0x003d08ff
 8002bb0:	431bde83 	.word	0x431bde83
 8002bb4:	10624dd3 	.word	0x10624dd3

08002bb8 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bca:	2b80      	cmp	r3, #128	@ 0x80
 8002bcc:	d103      	bne.n	8002bd6 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	611a      	str	r2, [r3, #16]
  }
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr

08002be0 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b087      	sub	sp, #28
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	603b      	str	r3, [r7, #0]
 8002bec:	4613      	mov	r3, r2
 8002bee:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002bfc:	2b28      	cmp	r3, #40	@ 0x28
 8002bfe:	d15b      	bne.n	8002cb8 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d002      	beq.n	8002c0c <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 8002c06:	88fb      	ldrh	r3, [r7, #6]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d101      	bne.n	8002c10 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e054      	b.n	8002cba <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d101      	bne.n	8002c1e <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	e04d      	b.n	8002cba <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d007      	beq.n	8002c44 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0201 	orr.w	r2, r2, #1
 8002c42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	222a      	movs	r2, #42	@ 0x2a
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2220      	movs	r2, #32
 8002c60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	68ba      	ldr	r2, [r7, #8]
 8002c6e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	88fa      	ldrh	r2, [r7, #6]
 8002c74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c86:	2300      	movs	r3, #0
 8002c88:	617b      	str	r3, [r7, #20]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	617b      	str	r3, [r7, #20]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	617b      	str	r3, [r7, #20]
 8002c9a:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8002cb2:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	e000      	b.n	8002cba <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8002cb8:	2302      	movs	r3, #2
  }
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	371c      	adds	r7, #28
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b20      	cmp	r3, #32
 8002cd6:	d124      	bne.n	8002d22 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2228      	movs	r2, #40	@ 0x28
 8002cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d007      	beq.n	8002cfe <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f042 0201 	orr.w	r2, r2, #1
 8002cfc:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d0c:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	685a      	ldr	r2, [r3, #4]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002d1c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	e000      	b.n	8002d24 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8002d22:	2302      	movs	r3, #2
  }
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr

08002d2e <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b088      	sub	sp, #32
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d46:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d4e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d56:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
 8002d5a:	2b10      	cmp	r3, #16
 8002d5c:	d003      	beq.n	8002d66 <HAL_I2C_EV_IRQHandler+0x38>
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
 8002d60:	2b40      	cmp	r3, #64	@ 0x40
 8002d62:	f040 80c1 	bne.w	8002ee8 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10d      	bne.n	8002d9c <HAL_I2C_EV_IRQHandler+0x6e>
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002d86:	d003      	beq.n	8002d90 <HAL_I2C_EV_IRQHandler+0x62>
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002d8e:	d101      	bne.n	8002d94 <HAL_I2C_EV_IRQHandler+0x66>
 8002d90:	2301      	movs	r3, #1
 8002d92:	e000      	b.n	8002d96 <HAL_I2C_EV_IRQHandler+0x68>
 8002d94:	2300      	movs	r3, #0
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	f000 8132 	beq.w	8003000 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00c      	beq.n	8002dc0 <HAL_I2C_EV_IRQHandler+0x92>
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	0a5b      	lsrs	r3, r3, #9
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d006      	beq.n	8002dc0 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f001 fc74 	bl	80046a0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 fd71 	bl	80038a0 <I2C_Master_SB>
 8002dbe:	e092      	b.n	8002ee6 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	08db      	lsrs	r3, r3, #3
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d009      	beq.n	8002de0 <HAL_I2C_EV_IRQHandler+0xb2>
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	0a5b      	lsrs	r3, r3, #9
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d003      	beq.n	8002de0 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 fde6 	bl	80039aa <I2C_Master_ADD10>
 8002dde:	e082      	b.n	8002ee6 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	085b      	lsrs	r3, r3, #1
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d009      	beq.n	8002e00 <HAL_I2C_EV_IRQHandler+0xd2>
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	0a5b      	lsrs	r3, r3, #9
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d003      	beq.n	8002e00 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 fdff 	bl	80039fc <I2C_Master_ADDR>
 8002dfe:	e072      	b.n	8002ee6 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	089b      	lsrs	r3, r3, #2
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d03b      	beq.n	8002e84 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e1a:	f000 80f3 	beq.w	8003004 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	09db      	lsrs	r3, r3, #7
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00f      	beq.n	8002e4a <HAL_I2C_EV_IRQHandler+0x11c>
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	0a9b      	lsrs	r3, r3, #10
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d009      	beq.n	8002e4a <HAL_I2C_EV_IRQHandler+0x11c>
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	089b      	lsrs	r3, r3, #2
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d103      	bne.n	8002e4a <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 f9c9 	bl	80031da <I2C_MasterTransmit_TXE>
 8002e48:	e04d      	b.n	8002ee6 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	089b      	lsrs	r3, r3, #2
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 80d6 	beq.w	8003004 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	0a5b      	lsrs	r3, r3, #9
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 80cf 	beq.w	8003004 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002e66:	7bbb      	ldrb	r3, [r7, #14]
 8002e68:	2b21      	cmp	r3, #33	@ 0x21
 8002e6a:	d103      	bne.n	8002e74 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 fa50 	bl	8003312 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e72:	e0c7      	b.n	8003004 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002e74:	7bfb      	ldrb	r3, [r7, #15]
 8002e76:	2b40      	cmp	r3, #64	@ 0x40
 8002e78:	f040 80c4 	bne.w	8003004 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 fabe 	bl	80033fe <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e82:	e0bf      	b.n	8003004 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e92:	f000 80b7 	beq.w	8003004 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	099b      	lsrs	r3, r3, #6
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00f      	beq.n	8002ec2 <HAL_I2C_EV_IRQHandler+0x194>
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	0a9b      	lsrs	r3, r3, #10
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d009      	beq.n	8002ec2 <HAL_I2C_EV_IRQHandler+0x194>
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	089b      	lsrs	r3, r3, #2
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d103      	bne.n	8002ec2 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 fb37 	bl	800352e <I2C_MasterReceive_RXNE>
 8002ec0:	e011      	b.n	8002ee6 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	089b      	lsrs	r3, r3, #2
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 809a 	beq.w	8003004 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	0a5b      	lsrs	r3, r3, #9
 8002ed4:	f003 0301 	and.w	r3, r3, #1
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 8093 	beq.w	8003004 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 fbed 	bl	80036be <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ee4:	e08e      	b.n	8003004 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002ee6:	e08d      	b.n	8003004 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d004      	beq.n	8002efa <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	61fb      	str	r3, [r7, #28]
 8002ef8:	e007      	b.n	8002f0a <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	085b      	lsrs	r3, r3, #1
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d012      	beq.n	8002f3c <HAL_I2C_EV_IRQHandler+0x20e>
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	0a5b      	lsrs	r3, r3, #9
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00c      	beq.n	8002f3c <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002f32:	69b9      	ldr	r1, [r7, #24]
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 ffb8 	bl	8003eaa <I2C_Slave_ADDR>
 8002f3a:	e066      	b.n	800300a <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	091b      	lsrs	r3, r3, #4
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d009      	beq.n	8002f5c <HAL_I2C_EV_IRQHandler+0x22e>
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	0a5b      	lsrs	r3, r3, #9
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 fff3 	bl	8003f40 <I2C_Slave_STOPF>
 8002f5a:	e056      	b.n	800300a <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002f5c:	7bbb      	ldrb	r3, [r7, #14]
 8002f5e:	2b21      	cmp	r3, #33	@ 0x21
 8002f60:	d002      	beq.n	8002f68 <HAL_I2C_EV_IRQHandler+0x23a>
 8002f62:	7bbb      	ldrb	r3, [r7, #14]
 8002f64:	2b29      	cmp	r3, #41	@ 0x29
 8002f66:	d125      	bne.n	8002fb4 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	09db      	lsrs	r3, r3, #7
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00f      	beq.n	8002f94 <HAL_I2C_EV_IRQHandler+0x266>
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	0a9b      	lsrs	r3, r3, #10
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d009      	beq.n	8002f94 <HAL_I2C_EV_IRQHandler+0x266>
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	089b      	lsrs	r3, r3, #2
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d103      	bne.n	8002f94 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 fed0 	bl	8003d32 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f92:	e039      	b.n	8003008 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	089b      	lsrs	r3, r3, #2
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d033      	beq.n	8003008 <HAL_I2C_EV_IRQHandler+0x2da>
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	0a5b      	lsrs	r3, r3, #9
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d02d      	beq.n	8003008 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 fefd 	bl	8003dac <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002fb2:	e029      	b.n	8003008 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	099b      	lsrs	r3, r3, #6
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00f      	beq.n	8002fe0 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	0a9b      	lsrs	r3, r3, #10
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d009      	beq.n	8002fe0 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	089b      	lsrs	r3, r3, #2
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d103      	bne.n	8002fe0 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 ff07 	bl	8003dec <I2C_SlaveReceive_RXNE>
 8002fde:	e014      	b.n	800300a <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	089b      	lsrs	r3, r3, #2
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00e      	beq.n	800300a <HAL_I2C_EV_IRQHandler+0x2dc>
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	0a5b      	lsrs	r3, r3, #9
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d008      	beq.n	800300a <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 ff35 	bl	8003e68 <I2C_SlaveReceive_BTF>
 8002ffe:	e004      	b.n	800300a <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003000:	bf00      	nop
 8003002:	e002      	b.n	800300a <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003004:	bf00      	nop
 8003006:	e000      	b.n	800300a <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003008:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800300a:	3720      	adds	r7, #32
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b08a      	sub	sp, #40	@ 0x28
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003028:	2300      	movs	r3, #0
 800302a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003032:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003034:	6a3b      	ldr	r3, [r7, #32]
 8003036:	0a1b      	lsrs	r3, r3, #8
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b00      	cmp	r3, #0
 800303e:	d016      	beq.n	800306e <HAL_I2C_ER_IRQHandler+0x5e>
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	0a1b      	lsrs	r3, r3, #8
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b00      	cmp	r3, #0
 800304a:	d010      	beq.n	800306e <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800304c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304e:	f043 0301 	orr.w	r3, r3, #1
 8003052:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800305c:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800306c:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800306e:	6a3b      	ldr	r3, [r7, #32]
 8003070:	0a5b      	lsrs	r3, r3, #9
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00e      	beq.n	8003098 <HAL_I2C_ER_IRQHandler+0x88>
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	0a1b      	lsrs	r3, r3, #8
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d008      	beq.n	8003098 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003088:	f043 0302 	orr.w	r3, r3, #2
 800308c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003096:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003098:	6a3b      	ldr	r3, [r7, #32]
 800309a:	0a9b      	lsrs	r3, r3, #10
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d03f      	beq.n	8003124 <HAL_I2C_ER_IRQHandler+0x114>
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	0a1b      	lsrs	r3, r3, #8
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d039      	beq.n	8003124 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80030b0:	7efb      	ldrb	r3, [r7, #27]
 80030b2:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030c2:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c8:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80030ca:	7ebb      	ldrb	r3, [r7, #26]
 80030cc:	2b20      	cmp	r3, #32
 80030ce:	d112      	bne.n	80030f6 <HAL_I2C_ER_IRQHandler+0xe6>
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10f      	bne.n	80030f6 <HAL_I2C_ER_IRQHandler+0xe6>
 80030d6:	7cfb      	ldrb	r3, [r7, #19]
 80030d8:	2b21      	cmp	r3, #33	@ 0x21
 80030da:	d008      	beq.n	80030ee <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80030dc:	7cfb      	ldrb	r3, [r7, #19]
 80030de:	2b29      	cmp	r3, #41	@ 0x29
 80030e0:	d005      	beq.n	80030ee <HAL_I2C_ER_IRQHandler+0xde>
 80030e2:	7cfb      	ldrb	r3, [r7, #19]
 80030e4:	2b28      	cmp	r3, #40	@ 0x28
 80030e6:	d106      	bne.n	80030f6 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2b21      	cmp	r3, #33	@ 0x21
 80030ec:	d103      	bne.n	80030f6 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f001 f856 	bl	80041a0 <I2C_Slave_AF>
 80030f4:	e016      	b.n	8003124 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80030fe:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003102:	f043 0304 	orr.w	r3, r3, #4
 8003106:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003108:	7efb      	ldrb	r3, [r7, #27]
 800310a:	2b10      	cmp	r3, #16
 800310c:	d002      	beq.n	8003114 <HAL_I2C_ER_IRQHandler+0x104>
 800310e:	7efb      	ldrb	r3, [r7, #27]
 8003110:	2b40      	cmp	r3, #64	@ 0x40
 8003112:	d107      	bne.n	8003124 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003122:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003124:	6a3b      	ldr	r3, [r7, #32]
 8003126:	0adb      	lsrs	r3, r3, #11
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00e      	beq.n	800314e <HAL_I2C_ER_IRQHandler+0x13e>
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	0a1b      	lsrs	r3, r3, #8
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b00      	cmp	r3, #0
 800313a:	d008      	beq.n	800314e <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800313c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313e:	f043 0308 	orr.w	r3, r3, #8
 8003142:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800314c:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800314e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003150:	2b00      	cmp	r3, #0
 8003152:	d008      	beq.n	8003166 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f001 f891 	bl	8004288 <I2C_ITError>
  }
}
 8003166:	bf00      	nop
 8003168:	3728      	adds	r7, #40	@ 0x28
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800316e:	b480      	push	{r7}
 8003170:	b083      	sub	sp, #12
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003176:	bf00      	nop
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	bc80      	pop	{r7}
 800317e:	4770      	bx	lr

08003180 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	bc80      	pop	{r7}
 8003190:	4770      	bx	lr

08003192 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	bc80      	pop	{r7}
 80031a2:	4770      	bx	lr

080031a4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bc80      	pop	{r7}
 80031b4:	4770      	bx	lr

080031b6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr

080031c8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bc80      	pop	{r7}
 80031d8:	4770      	bx	lr

080031da <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b084      	sub	sp, #16
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031e8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031f0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d150      	bne.n	80032a2 <I2C_MasterTransmit_TXE+0xc8>
 8003200:	7bfb      	ldrb	r3, [r7, #15]
 8003202:	2b21      	cmp	r3, #33	@ 0x21
 8003204:	d14d      	bne.n	80032a2 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	2b08      	cmp	r3, #8
 800320a:	d01d      	beq.n	8003248 <I2C_MasterTransmit_TXE+0x6e>
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2b20      	cmp	r3, #32
 8003210:	d01a      	beq.n	8003248 <I2C_MasterTransmit_TXE+0x6e>
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003218:	d016      	beq.n	8003248 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003228:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2211      	movs	r2, #17
 800322e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2220      	movs	r2, #32
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7ff ff94 	bl	800316e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003246:	e060      	b.n	800330a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003256:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003266:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2220      	movs	r2, #32
 8003272:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b40      	cmp	r3, #64	@ 0x40
 8003280:	d107      	bne.n	8003292 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7ff ff8a 	bl	80031a4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003290:	e03b      	b.n	800330a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7ff ff67 	bl	800316e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80032a0:	e033      	b.n	800330a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80032a2:	7bfb      	ldrb	r3, [r7, #15]
 80032a4:	2b21      	cmp	r3, #33	@ 0x21
 80032a6:	d005      	beq.n	80032b4 <I2C_MasterTransmit_TXE+0xda>
 80032a8:	7bbb      	ldrb	r3, [r7, #14]
 80032aa:	2b40      	cmp	r3, #64	@ 0x40
 80032ac:	d12d      	bne.n	800330a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80032ae:	7bfb      	ldrb	r3, [r7, #15]
 80032b0:	2b22      	cmp	r3, #34	@ 0x22
 80032b2:	d12a      	bne.n	800330a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d108      	bne.n	80032d0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032cc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80032ce:	e01c      	b.n	800330a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b40      	cmp	r3, #64	@ 0x40
 80032da:	d103      	bne.n	80032e4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 f88e 	bl	80033fe <I2C_MemoryTransmit_TXE_BTF>
}
 80032e2:	e012      	b.n	800330a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e8:	781a      	ldrb	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032fe:	b29b      	uxth	r3, r3
 8003300:	3b01      	subs	r3, #1
 8003302:	b29a      	uxth	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003308:	e7ff      	b.n	800330a <I2C_MasterTransmit_TXE+0x130>
 800330a:	bf00      	nop
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b084      	sub	sp, #16
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800331e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b21      	cmp	r3, #33	@ 0x21
 800332a:	d164      	bne.n	80033f6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003330:	b29b      	uxth	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d012      	beq.n	800335c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333a:	781a      	ldrb	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003346:	1c5a      	adds	r2, r3, #1
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003350:	b29b      	uxth	r3, r3
 8003352:	3b01      	subs	r3, #1
 8003354:	b29a      	uxth	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800335a:	e04c      	b.n	80033f6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2b08      	cmp	r3, #8
 8003360:	d01d      	beq.n	800339e <I2C_MasterTransmit_BTF+0x8c>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2b20      	cmp	r3, #32
 8003366:	d01a      	beq.n	800339e <I2C_MasterTransmit_BTF+0x8c>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800336e:	d016      	beq.n	800339e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800337e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2211      	movs	r2, #17
 8003384:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2220      	movs	r2, #32
 8003392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7ff fee9 	bl	800316e <HAL_I2C_MasterTxCpltCallback>
}
 800339c:	e02b      	b.n	80033f6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80033ac:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033bc:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2220      	movs	r2, #32
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b40      	cmp	r3, #64	@ 0x40
 80033d6:	d107      	bne.n	80033e8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f7ff fedf 	bl	80031a4 <HAL_I2C_MemTxCpltCallback>
}
 80033e6:	e006      	b.n	80033f6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7ff febc 	bl	800316e <HAL_I2C_MasterTxCpltCallback>
}
 80033f6:	bf00      	nop
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b084      	sub	sp, #16
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800340c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003412:	2b00      	cmp	r3, #0
 8003414:	d11d      	bne.n	8003452 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800341a:	2b01      	cmp	r3, #1
 800341c:	d10b      	bne.n	8003436 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003422:	b2da      	uxtb	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800342e:	1c9a      	adds	r2, r3, #2
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003434:	e077      	b.n	8003526 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800343a:	b29b      	uxth	r3, r3
 800343c:	121b      	asrs	r3, r3, #8
 800343e:	b2da      	uxtb	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800344a:	1c5a      	adds	r2, r3, #1
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003450:	e069      	b.n	8003526 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003456:	2b01      	cmp	r3, #1
 8003458:	d10b      	bne.n	8003472 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800345e:	b2da      	uxtb	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800346a:	1c5a      	adds	r2, r3, #1
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003470:	e059      	b.n	8003526 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003476:	2b02      	cmp	r3, #2
 8003478:	d152      	bne.n	8003520 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800347a:	7bfb      	ldrb	r3, [r7, #15]
 800347c:	2b22      	cmp	r3, #34	@ 0x22
 800347e:	d10d      	bne.n	800349c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800348e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003494:	1c5a      	adds	r2, r3, #1
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800349a:	e044      	b.n	8003526 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d015      	beq.n	80034d2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80034a6:	7bfb      	ldrb	r3, [r7, #15]
 80034a8:	2b21      	cmp	r3, #33	@ 0x21
 80034aa:	d112      	bne.n	80034d2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b0:	781a      	ldrb	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034bc:	1c5a      	adds	r2, r3, #1
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80034d0:	e029      	b.n	8003526 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d124      	bne.n	8003526 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
 80034de:	2b21      	cmp	r3, #33	@ 0x21
 80034e0:	d121      	bne.n	8003526 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80034f0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003500:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2220      	movs	r2, #32
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f7ff fe43 	bl	80031a4 <HAL_I2C_MemTxCpltCallback>
}
 800351e:	e002      	b.n	8003526 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f7ff fb49 	bl	8002bb8 <I2C_Flush_DR>
}
 8003526:	bf00      	nop
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b084      	sub	sp, #16
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b22      	cmp	r3, #34	@ 0x22
 8003540:	f040 80b9 	bne.w	80036b6 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003548:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800354e:	b29b      	uxth	r3, r3
 8003550:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	2b03      	cmp	r3, #3
 8003556:	d921      	bls.n	800359c <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	691a      	ldr	r2, [r3, #16]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003562:	b2d2      	uxtb	r2, r2
 8003564:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356a:	1c5a      	adds	r2, r3, #1
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003574:	b29b      	uxth	r3, r3
 8003576:	3b01      	subs	r3, #1
 8003578:	b29a      	uxth	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003582:	b29b      	uxth	r3, r3
 8003584:	2b03      	cmp	r3, #3
 8003586:	f040 8096 	bne.w	80036b6 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003598:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800359a:	e08c      	b.n	80036b6 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d07f      	beq.n	80036a4 <I2C_MasterReceive_RXNE+0x176>
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d002      	beq.n	80035b0 <I2C_MasterReceive_RXNE+0x82>
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d179      	bne.n	80036a4 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f001 f843 	bl	800463c <I2C_WaitOnSTOPRequestThroughIT>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d14c      	bne.n	8003656 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035ca:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80035da:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	691a      	ldr	r2, [r3, #16]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e6:	b2d2      	uxtb	r2, r2
 80035e8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ee:	1c5a      	adds	r2, r3, #1
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	3b01      	subs	r3, #1
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2220      	movs	r2, #32
 8003606:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b40      	cmp	r3, #64	@ 0x40
 8003614:	d10a      	bne.n	800362c <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f7ff fdc6 	bl	80031b6 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800362a:	e044      	b.n	80036b6 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2b08      	cmp	r3, #8
 8003638:	d002      	beq.n	8003640 <I2C_MasterReceive_RXNE+0x112>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2b20      	cmp	r3, #32
 800363e:	d103      	bne.n	8003648 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	631a      	str	r2, [r3, #48]	@ 0x30
 8003646:	e002      	b.n	800364e <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2212      	movs	r2, #18
 800364c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7ff fd96 	bl	8003180 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003654:	e02f      	b.n	80036b6 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003664:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	691a      	ldr	r2, [r3, #16]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003670:	b2d2      	uxtb	r2, r2
 8003672:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003682:	b29b      	uxth	r3, r3
 8003684:	3b01      	subs	r3, #1
 8003686:	b29a      	uxth	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2220      	movs	r2, #32
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7fd fac6 	bl	8000c2e <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80036a2:	e008      	b.n	80036b6 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036b2:	605a      	str	r2, [r3, #4]
}
 80036b4:	e7ff      	b.n	80036b6 <I2C_MasterReceive_RXNE+0x188>
 80036b6:	bf00      	nop
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b084      	sub	sp, #16
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ca:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	d11b      	bne.n	800370e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036e4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	691a      	ldr	r2, [r3, #16]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f0:	b2d2      	uxtb	r2, r2
 80036f2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003702:	b29b      	uxth	r3, r3
 8003704:	3b01      	subs	r3, #1
 8003706:	b29a      	uxth	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800370c:	e0c4      	b.n	8003898 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003712:	b29b      	uxth	r3, r3
 8003714:	2b03      	cmp	r3, #3
 8003716:	d129      	bne.n	800376c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003726:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2b04      	cmp	r3, #4
 800372c:	d00a      	beq.n	8003744 <I2C_MasterReceive_BTF+0x86>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2b02      	cmp	r3, #2
 8003732:	d007      	beq.n	8003744 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003742:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	691a      	ldr	r2, [r3, #16]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374e:	b2d2      	uxtb	r2, r2
 8003750:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003756:	1c5a      	adds	r2, r3, #1
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003760:	b29b      	uxth	r3, r3
 8003762:	3b01      	subs	r3, #1
 8003764:	b29a      	uxth	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800376a:	e095      	b.n	8003898 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003770:	b29b      	uxth	r3, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d17d      	bne.n	8003872 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d002      	beq.n	8003782 <I2C_MasterReceive_BTF+0xc4>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2b10      	cmp	r3, #16
 8003780:	d108      	bne.n	8003794 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003790:	601a      	str	r2, [r3, #0]
 8003792:	e016      	b.n	80037c2 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2b04      	cmp	r3, #4
 8003798:	d002      	beq.n	80037a0 <I2C_MasterReceive_BTF+0xe2>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2b02      	cmp	r3, #2
 800379e:	d108      	bne.n	80037b2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	e007      	b.n	80037c2 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037c0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	691a      	ldr	r2, [r3, #16]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037cc:	b2d2      	uxtb	r2, r2
 80037ce:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037de:	b29b      	uxth	r3, r3
 80037e0:	3b01      	subs	r3, #1
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	691a      	ldr	r2, [r3, #16]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fa:	1c5a      	adds	r2, r3, #1
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003804:	b29b      	uxth	r3, r3
 8003806:	3b01      	subs	r3, #1
 8003808:	b29a      	uxth	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800381c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2220      	movs	r2, #32
 8003822:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b40      	cmp	r3, #64	@ 0x40
 8003830:	d10a      	bne.n	8003848 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f7ff fcb8 	bl	80031b6 <HAL_I2C_MemRxCpltCallback>
}
 8003846:	e027      	b.n	8003898 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2b08      	cmp	r3, #8
 8003854:	d002      	beq.n	800385c <I2C_MasterReceive_BTF+0x19e>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2b20      	cmp	r3, #32
 800385a:	d103      	bne.n	8003864 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	631a      	str	r2, [r3, #48]	@ 0x30
 8003862:	e002      	b.n	800386a <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2212      	movs	r2, #18
 8003868:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7ff fc88 	bl	8003180 <HAL_I2C_MasterRxCpltCallback>
}
 8003870:	e012      	b.n	8003898 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	691a      	ldr	r2, [r3, #16]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387c:	b2d2      	uxtb	r2, r2
 800387e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003884:	1c5a      	adds	r2, r3, #1
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800388e:	b29b      	uxth	r3, r3
 8003890:	3b01      	subs	r3, #1
 8003892:	b29a      	uxth	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003898:	bf00      	nop
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b40      	cmp	r3, #64	@ 0x40
 80038b2:	d117      	bne.n	80038e4 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d109      	bne.n	80038d0 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	461a      	mov	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80038cc:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80038ce:	e067      	b.n	80039a0 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	f043 0301 	orr.w	r3, r3, #1
 80038da:	b2da      	uxtb	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	611a      	str	r2, [r3, #16]
}
 80038e2:	e05d      	b.n	80039a0 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038ec:	d133      	bne.n	8003956 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b21      	cmp	r3, #33	@ 0x21
 80038f8:	d109      	bne.n	800390e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	461a      	mov	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800390a:	611a      	str	r2, [r3, #16]
 800390c:	e008      	b.n	8003920 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003912:	b2db      	uxtb	r3, r3
 8003914:	f043 0301 	orr.w	r3, r3, #1
 8003918:	b2da      	uxtb	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003924:	2b00      	cmp	r3, #0
 8003926:	d004      	beq.n	8003932 <I2C_Master_SB+0x92>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800392c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800392e:	2b00      	cmp	r3, #0
 8003930:	d108      	bne.n	8003944 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003936:	2b00      	cmp	r3, #0
 8003938:	d032      	beq.n	80039a0 <I2C_Master_SB+0x100>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800393e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003940:	2b00      	cmp	r3, #0
 8003942:	d02d      	beq.n	80039a0 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003952:	605a      	str	r2, [r3, #4]
}
 8003954:	e024      	b.n	80039a0 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10e      	bne.n	800397c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003962:	b29b      	uxth	r3, r3
 8003964:	11db      	asrs	r3, r3, #7
 8003966:	b2db      	uxtb	r3, r3
 8003968:	f003 0306 	and.w	r3, r3, #6
 800396c:	b2db      	uxtb	r3, r3
 800396e:	f063 030f 	orn	r3, r3, #15
 8003972:	b2da      	uxtb	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	611a      	str	r2, [r3, #16]
}
 800397a:	e011      	b.n	80039a0 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003980:	2b01      	cmp	r3, #1
 8003982:	d10d      	bne.n	80039a0 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003988:	b29b      	uxth	r3, r3
 800398a:	11db      	asrs	r3, r3, #7
 800398c:	b2db      	uxtb	r3, r3
 800398e:	f003 0306 	and.w	r3, r3, #6
 8003992:	b2db      	uxtb	r3, r3
 8003994:	f063 030e 	orn	r3, r3, #14
 8003998:	b2da      	uxtb	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	611a      	str	r2, [r3, #16]
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bc80      	pop	{r7}
 80039a8:	4770      	bx	lr

080039aa <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b083      	sub	sp, #12
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d004      	beq.n	80039d0 <I2C_Master_ADD10+0x26>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d108      	bne.n	80039e2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00c      	beq.n	80039f2 <I2C_Master_ADD10+0x48>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d007      	beq.n	80039f2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039f0:	605a      	str	r2, [r3, #4]
  }
}
 80039f2:	bf00      	nop
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bc80      	pop	{r7}
 80039fa:	4770      	bx	lr

080039fc <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b091      	sub	sp, #68	@ 0x44
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a0a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a12:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a18:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b22      	cmp	r3, #34	@ 0x22
 8003a24:	f040 8174 	bne.w	8003d10 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d10f      	bne.n	8003a50 <I2C_Master_ADDR+0x54>
 8003a30:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003a34:	2b40      	cmp	r3, #64	@ 0x40
 8003a36:	d10b      	bne.n	8003a50 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a38:	2300      	movs	r3, #0
 8003a3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a4e:	e16b      	b.n	8003d28 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d11d      	bne.n	8003a94 <I2C_Master_ADDR+0x98>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003a60:	d118      	bne.n	8003a94 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a62:	2300      	movs	r3, #0
 8003a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a86:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a8c:	1c5a      	adds	r2, r3, #1
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	651a      	str	r2, [r3, #80]	@ 0x50
 8003a92:	e149      	b.n	8003d28 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d113      	bne.n	8003ac6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	e120      	b.n	8003d08 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	f040 808a 	bne.w	8003be6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ad4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ad8:	d137      	bne.n	8003b4a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ae8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003af4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003af8:	d113      	bne.n	8003b22 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b08:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b20:	e0f2      	b.n	8003d08 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b22:	2300      	movs	r3, #0
 8003b24:	623b      	str	r3, [r7, #32]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	623b      	str	r3, [r7, #32]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	623b      	str	r3, [r7, #32]
 8003b36:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b46:	601a      	str	r2, [r3, #0]
 8003b48:	e0de      	b.n	8003d08 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	d02e      	beq.n	8003bae <I2C_Master_ADDR+0x1b2>
 8003b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b52:	2b20      	cmp	r3, #32
 8003b54:	d02b      	beq.n	8003bae <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b58:	2b12      	cmp	r3, #18
 8003b5a:	d102      	bne.n	8003b62 <I2C_Master_ADDR+0x166>
 8003b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d125      	bne.n	8003bae <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b64:	2b04      	cmp	r3, #4
 8003b66:	d00e      	beq.n	8003b86 <I2C_Master_ADDR+0x18a>
 8003b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d00b      	beq.n	8003b86 <I2C_Master_ADDR+0x18a>
 8003b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b70:	2b10      	cmp	r3, #16
 8003b72:	d008      	beq.n	8003b86 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	e007      	b.n	8003b96 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003b94:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b96:	2300      	movs	r3, #0
 8003b98:	61fb      	str	r3, [r7, #28]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	61fb      	str	r3, [r7, #28]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	61fb      	str	r3, [r7, #28]
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	e0ac      	b.n	8003d08 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bbc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	61bb      	str	r3, [r7, #24]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	61bb      	str	r3, [r7, #24]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	61bb      	str	r3, [r7, #24]
 8003bd2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	e090      	b.n	8003d08 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d158      	bne.n	8003ca2 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bf2:	2b04      	cmp	r3, #4
 8003bf4:	d021      	beq.n	8003c3a <I2C_Master_ADDR+0x23e>
 8003bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d01e      	beq.n	8003c3a <I2C_Master_ADDR+0x23e>
 8003bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bfe:	2b10      	cmp	r3, #16
 8003c00:	d01b      	beq.n	8003c3a <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c10:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c12:	2300      	movs	r3, #0
 8003c14:	617b      	str	r3, [r7, #20]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	617b      	str	r3, [r7, #20]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	617b      	str	r3, [r7, #20]
 8003c26:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	e012      	b.n	8003c60 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c48:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	613b      	str	r3, [r7, #16]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	613b      	str	r3, [r7, #16]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	613b      	str	r3, [r7, #16]
 8003c5e:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c6e:	d14b      	bne.n	8003d08 <I2C_Master_ADDR+0x30c>
 8003c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c72:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003c76:	d00b      	beq.n	8003c90 <I2C_Master_ADDR+0x294>
 8003c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d008      	beq.n	8003c90 <I2C_Master_ADDR+0x294>
 8003c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c80:	2b08      	cmp	r3, #8
 8003c82:	d005      	beq.n	8003c90 <I2C_Master_ADDR+0x294>
 8003c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c86:	2b10      	cmp	r3, #16
 8003c88:	d002      	beq.n	8003c90 <I2C_Master_ADDR+0x294>
 8003c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c8c:	2b20      	cmp	r3, #32
 8003c8e:	d13b      	bne.n	8003d08 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003c9e:	605a      	str	r2, [r3, #4]
 8003ca0:	e032      	b.n	8003d08 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003cb0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cc0:	d117      	bne.n	8003cf2 <I2C_Master_ADDR+0x2f6>
 8003cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cc4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003cc8:	d00b      	beq.n	8003ce2 <I2C_Master_ADDR+0x2e6>
 8003cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d008      	beq.n	8003ce2 <I2C_Master_ADDR+0x2e6>
 8003cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cd2:	2b08      	cmp	r3, #8
 8003cd4:	d005      	beq.n	8003ce2 <I2C_Master_ADDR+0x2e6>
 8003cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cd8:	2b10      	cmp	r3, #16
 8003cda:	d002      	beq.n	8003ce2 <I2C_Master_ADDR+0x2e6>
 8003cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cde:	2b20      	cmp	r3, #32
 8003ce0:	d107      	bne.n	8003cf2 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003cf0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60fb      	str	r3, [r7, #12]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	60fb      	str	r3, [r7, #12]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	60fb      	str	r3, [r7, #12]
 8003d06:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003d0e:	e00b      	b.n	8003d28 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d10:	2300      	movs	r3, #0
 8003d12:	60bb      	str	r3, [r7, #8]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	60bb      	str	r3, [r7, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	60bb      	str	r3, [r7, #8]
 8003d24:	68bb      	ldr	r3, [r7, #8]
}
 8003d26:	e7ff      	b.n	8003d28 <I2C_Master_ADDR+0x32c>
 8003d28:	bf00      	nop
 8003d2a:	3744      	adds	r7, #68	@ 0x44
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bc80      	pop	{r7}
 8003d30:	4770      	bx	lr

08003d32 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b084      	sub	sp, #16
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d40:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d02b      	beq.n	8003da4 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d50:	781a      	ldrb	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d114      	bne.n	8003da4 <I2C_SlaveTransmit_TXE+0x72>
 8003d7a:	7bfb      	ldrb	r3, [r7, #15]
 8003d7c:	2b29      	cmp	r3, #41	@ 0x29
 8003d7e:	d111      	bne.n	8003da4 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d8e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2221      	movs	r2, #33	@ 0x21
 8003d94:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2228      	movs	r2, #40	@ 0x28
 8003d9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7ff f9f7 	bl	8003192 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003da4:	bf00      	nop
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d011      	beq.n	8003de2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc2:	781a      	ldrb	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dce:	1c5a      	adds	r2, r3, #1
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bc80      	pop	{r7}
 8003dea:	4770      	bx	lr

08003dec <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dfa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d02c      	beq.n	8003e60 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	691a      	ldr	r2, [r3, #16]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e10:	b2d2      	uxtb	r2, r2
 8003e12:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d114      	bne.n	8003e60 <I2C_SlaveReceive_RXNE+0x74>
 8003e36:	7bfb      	ldrb	r3, [r7, #15]
 8003e38:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e3a:	d111      	bne.n	8003e60 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e4a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2222      	movs	r2, #34	@ 0x22
 8003e50:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2228      	movs	r2, #40	@ 0x28
 8003e56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7fc fe9a 	bl	8000b94 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003e60:	bf00      	nop
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d012      	beq.n	8003ea0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	691a      	ldr	r2, [r3, #16]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e84:	b2d2      	uxtb	r2, r2
 8003e86:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8c:	1c5a      	adds	r2, r3, #1
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bc80      	pop	{r7}
 8003ea8:	4770      	bx	lr

08003eaa <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b084      	sub	sp, #16
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
 8003eb2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003ec4:	2b28      	cmp	r3, #40	@ 0x28
 8003ec6:	d127      	bne.n	8003f18 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ed6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	089b      	lsrs	r3, r3, #2
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	09db      	lsrs	r3, r3, #7
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d103      	bne.n	8003efc <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	81bb      	strh	r3, [r7, #12]
 8003efa:	e002      	b.n	8003f02 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003f0a:	89ba      	ldrh	r2, [r7, #12]
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
 8003f0e:	4619      	mov	r1, r3
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7fc fe25 	bl	8000b60 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003f16:	e00e      	b.n	8003f36 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f18:	2300      	movs	r3, #0
 8003f1a:	60bb      	str	r3, [r7, #8]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	60bb      	str	r3, [r7, #8]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	60bb      	str	r3, [r7, #8]
 8003f2c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003f36:	bf00      	nop
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
	...

08003f40 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f4e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f5e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003f60:	2300      	movs	r3, #0
 8003f62:	60bb      	str	r3, [r7, #8]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	60bb      	str	r3, [r7, #8]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f042 0201 	orr.w	r2, r2, #1
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f8c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f9c:	d172      	bne.n	8004084 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f9e:	7bfb      	ldrb	r3, [r7, #15]
 8003fa0:	2b22      	cmp	r3, #34	@ 0x22
 8003fa2:	d002      	beq.n	8003faa <I2C_Slave_STOPF+0x6a>
 8003fa4:	7bfb      	ldrb	r3, [r7, #15]
 8003fa6:	2b2a      	cmp	r3, #42	@ 0x2a
 8003fa8:	d135      	bne.n	8004016 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d005      	beq.n	8003fce <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc6:	f043 0204 	orr.w	r2, r3, #4
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fdc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fe faba 	bl	800255c <HAL_DMA_GetState>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d049      	beq.n	8004082 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ff2:	4a69      	ldr	r2, [pc, #420]	@ (8004198 <I2C_Slave_STOPF+0x258>)
 8003ff4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7fd ff6a 	bl	8001ed4 <HAL_DMA_Abort_IT>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d03d      	beq.n	8004082 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800400a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004010:	4610      	mov	r0, r2
 8004012:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004014:	e035      	b.n	8004082 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	b29a      	uxth	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004028:	b29b      	uxth	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d005      	beq.n	800403a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004032:	f043 0204 	orr.w	r2, r3, #4
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004048:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800404e:	4618      	mov	r0, r3
 8004050:	f7fe fa84 	bl	800255c <HAL_DMA_GetState>
 8004054:	4603      	mov	r3, r0
 8004056:	2b01      	cmp	r3, #1
 8004058:	d014      	beq.n	8004084 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800405e:	4a4e      	ldr	r2, [pc, #312]	@ (8004198 <I2C_Slave_STOPF+0x258>)
 8004060:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004066:	4618      	mov	r0, r3
 8004068:	f7fd ff34 	bl	8001ed4 <HAL_DMA_Abort_IT>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d008      	beq.n	8004084 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800407c:	4610      	mov	r0, r2
 800407e:	4798      	blx	r3
 8004080:	e000      	b.n	8004084 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004082:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004088:	b29b      	uxth	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d03e      	beq.n	800410c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	2b04      	cmp	r3, #4
 800409a:	d112      	bne.n	80040c2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	691a      	ldr	r2, [r3, #16]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a6:	b2d2      	uxtb	r2, r2
 80040a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ae:	1c5a      	adds	r2, r3, #1
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	3b01      	subs	r3, #1
 80040bc:	b29a      	uxth	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040cc:	2b40      	cmp	r3, #64	@ 0x40
 80040ce:	d112      	bne.n	80040f6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	691a      	ldr	r2, [r3, #16]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e2:	1c5a      	adds	r2, r3, #1
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	3b01      	subs	r3, #1
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d005      	beq.n	800410c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004104:	f043 0204 	orr.w	r2, r3, #4
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f8b7 	bl	8004288 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800411a:	e039      	b.n	8004190 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800411c:	7bfb      	ldrb	r3, [r7, #15]
 800411e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004120:	d109      	bne.n	8004136 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2228      	movs	r2, #40	@ 0x28
 800412c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f7fc fd2f 	bl	8000b94 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b28      	cmp	r3, #40	@ 0x28
 8004140:	d111      	bne.n	8004166 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a15      	ldr	r2, [pc, #84]	@ (800419c <I2C_Slave_STOPF+0x25c>)
 8004146:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2220      	movs	r2, #32
 8004152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7fc fd5a 	bl	8000c18 <HAL_I2C_ListenCpltCallback>
}
 8004164:	e014      	b.n	8004190 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800416a:	2b22      	cmp	r3, #34	@ 0x22
 800416c:	d002      	beq.n	8004174 <I2C_Slave_STOPF+0x234>
 800416e:	7bfb      	ldrb	r3, [r7, #15]
 8004170:	2b22      	cmp	r3, #34	@ 0x22
 8004172:	d10d      	bne.n	8004190 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2220      	movs	r2, #32
 800417e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7fc fd02 	bl	8000b94 <HAL_I2C_SlaveRxCpltCallback>
}
 8004190:	bf00      	nop
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	080044ed 	.word	0x080044ed
 800419c:	ffff0000 	.word	0xffff0000

080041a0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041ae:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d002      	beq.n	80041c2 <I2C_Slave_AF+0x22>
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	2b20      	cmp	r3, #32
 80041c0:	d129      	bne.n	8004216 <I2C_Slave_AF+0x76>
 80041c2:	7bfb      	ldrb	r3, [r7, #15]
 80041c4:	2b28      	cmp	r3, #40	@ 0x28
 80041c6:	d126      	bne.n	8004216 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a2e      	ldr	r2, [pc, #184]	@ (8004284 <I2C_Slave_AF+0xe4>)
 80041cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80041dc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80041e6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041f6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2220      	movs	r2, #32
 8004202:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7fc fd02 	bl	8000c18 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004214:	e031      	b.n	800427a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004216:	7bfb      	ldrb	r3, [r7, #15]
 8004218:	2b21      	cmp	r3, #33	@ 0x21
 800421a:	d129      	bne.n	8004270 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a19      	ldr	r2, [pc, #100]	@ (8004284 <I2C_Slave_AF+0xe4>)
 8004220:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2221      	movs	r2, #33	@ 0x21
 8004226:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685a      	ldr	r2, [r3, #4]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004246:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004250:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004260:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7fe fca8 	bl	8002bb8 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f7fe ff92 	bl	8003192 <HAL_I2C_SlaveTxCpltCallback>
}
 800426e:	e004      	b.n	800427a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004278:	615a      	str	r2, [r3, #20]
}
 800427a:	bf00      	nop
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	ffff0000 	.word	0xffff0000

08004288 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004296:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800429e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80042a0:	7bbb      	ldrb	r3, [r7, #14]
 80042a2:	2b10      	cmp	r3, #16
 80042a4:	d002      	beq.n	80042ac <I2C_ITError+0x24>
 80042a6:	7bbb      	ldrb	r3, [r7, #14]
 80042a8:	2b40      	cmp	r3, #64	@ 0x40
 80042aa:	d10a      	bne.n	80042c2 <I2C_ITError+0x3a>
 80042ac:	7bfb      	ldrb	r3, [r7, #15]
 80042ae:	2b22      	cmp	r3, #34	@ 0x22
 80042b0:	d107      	bne.n	80042c2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042c0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80042c2:	7bfb      	ldrb	r3, [r7, #15]
 80042c4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80042c8:	2b28      	cmp	r3, #40	@ 0x28
 80042ca:	d107      	bne.n	80042dc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2228      	movs	r2, #40	@ 0x28
 80042d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80042da:	e015      	b.n	8004308 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042ea:	d00a      	beq.n	8004302 <I2C_ITError+0x7a>
 80042ec:	7bfb      	ldrb	r3, [r7, #15]
 80042ee:	2b60      	cmp	r3, #96	@ 0x60
 80042f0:	d007      	beq.n	8004302 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2220      	movs	r2, #32
 80042f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004312:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004316:	d162      	bne.n	80043de <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004326:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800432c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b01      	cmp	r3, #1
 8004334:	d020      	beq.n	8004378 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800433a:	4a6a      	ldr	r2, [pc, #424]	@ (80044e4 <I2C_ITError+0x25c>)
 800433c:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004342:	4618      	mov	r0, r3
 8004344:	f7fd fdc6 	bl	8001ed4 <HAL_DMA_Abort_IT>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 8089 	beq.w	8004462 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 0201 	bic.w	r2, r2, #1
 800435e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2220      	movs	r2, #32
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800436c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004372:	4610      	mov	r0, r2
 8004374:	4798      	blx	r3
 8004376:	e074      	b.n	8004462 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800437c:	4a59      	ldr	r2, [pc, #356]	@ (80044e4 <I2C_ITError+0x25c>)
 800437e:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004384:	4618      	mov	r0, r3
 8004386:	f7fd fda5 	bl	8001ed4 <HAL_DMA_Abort_IT>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d068      	beq.n	8004462 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800439a:	2b40      	cmp	r3, #64	@ 0x40
 800439c:	d10b      	bne.n	80043b6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	691a      	ldr	r2, [r3, #16]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a8:	b2d2      	uxtb	r2, r2
 80043aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b0:	1c5a      	adds	r2, r3, #1
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 0201 	bic.w	r2, r2, #1
 80043c4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2220      	movs	r2, #32
 80043ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80043d8:	4610      	mov	r0, r2
 80043da:	4798      	blx	r3
 80043dc:	e041      	b.n	8004462 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b60      	cmp	r3, #96	@ 0x60
 80043e8:	d125      	bne.n	8004436 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2220      	movs	r2, #32
 80043ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004402:	2b40      	cmp	r3, #64	@ 0x40
 8004404:	d10b      	bne.n	800441e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	691a      	ldr	r2, [r3, #16]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004410:	b2d2      	uxtb	r2, r2
 8004412:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004418:	1c5a      	adds	r2, r3, #1
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 0201 	bic.w	r2, r2, #1
 800442c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7fe feca 	bl	80031c8 <HAL_I2C_AbortCpltCallback>
 8004434:	e015      	b.n	8004462 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004440:	2b40      	cmp	r3, #64	@ 0x40
 8004442:	d10b      	bne.n	800445c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	691a      	ldr	r2, [r3, #16]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444e:	b2d2      	uxtb	r2, r2
 8004450:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f7fc fbe6 	bl	8000c2e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004466:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10e      	bne.n	8004490 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004478:	2b00      	cmp	r3, #0
 800447a:	d109      	bne.n	8004490 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004482:	2b00      	cmp	r3, #0
 8004484:	d104      	bne.n	8004490 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800448c:	2b00      	cmp	r3, #0
 800448e:	d007      	beq.n	80044a0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800449e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044a6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b04      	cmp	r3, #4
 80044b2:	d113      	bne.n	80044dc <I2C_ITError+0x254>
 80044b4:	7bfb      	ldrb	r3, [r7, #15]
 80044b6:	2b28      	cmp	r3, #40	@ 0x28
 80044b8:	d110      	bne.n	80044dc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a0a      	ldr	r2, [pc, #40]	@ (80044e8 <I2C_ITError+0x260>)
 80044be:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2220      	movs	r2, #32
 80044ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7fc fb9e 	bl	8000c18 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80044dc:	bf00      	nop
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	080044ed 	.word	0x080044ed
 80044e8:	ffff0000 	.word	0xffff0000

080044ec <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044f4:	2300      	movs	r3, #0
 80044f6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004504:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004506:	4b4b      	ldr	r3, [pc, #300]	@ (8004634 <I2C_DMAAbort+0x148>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	08db      	lsrs	r3, r3, #3
 800450c:	4a4a      	ldr	r2, [pc, #296]	@ (8004638 <I2C_DMAAbort+0x14c>)
 800450e:	fba2 2303 	umull	r2, r3, r2, r3
 8004512:	0a1a      	lsrs	r2, r3, #8
 8004514:	4613      	mov	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4413      	add	r3, r2
 800451a:	00da      	lsls	r2, r3, #3
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d106      	bne.n	8004534 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452a:	f043 0220 	orr.w	r2, r3, #32
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004532:	e00a      	b.n	800454a <I2C_DMAAbort+0x5e>
    }
    count--;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	3b01      	subs	r3, #1
 8004538:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004544:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004548:	d0ea      	beq.n	8004520 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004556:	2200      	movs	r2, #0
 8004558:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004566:	2200      	movs	r2, #0
 8004568:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004578:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	2200      	movs	r2, #0
 800457e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004584:	2b00      	cmp	r3, #0
 8004586:	d003      	beq.n	8004590 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800458c:	2200      	movs	r2, #0
 800458e:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004594:	2b00      	cmp	r3, #0
 8004596:	d003      	beq.n	80045a0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800459c:	2200      	movs	r2, #0
 800459e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 0201 	bic.w	r2, r2, #1
 80045ae:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b60      	cmp	r3, #96	@ 0x60
 80045ba:	d10e      	bne.n	80045da <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	2220      	movs	r2, #32
 80045c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	2200      	movs	r2, #0
 80045d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80045d2:	6978      	ldr	r0, [r7, #20]
 80045d4:	f7fe fdf8 	bl	80031c8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80045d8:	e027      	b.n	800462a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80045da:	7cfb      	ldrb	r3, [r7, #19]
 80045dc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80045e0:	2b28      	cmp	r3, #40	@ 0x28
 80045e2:	d117      	bne.n	8004614 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f042 0201 	orr.w	r2, r2, #1
 80045f2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004602:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	2200      	movs	r2, #0
 8004608:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	2228      	movs	r2, #40	@ 0x28
 800460e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004612:	e007      	b.n	8004624 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	2220      	movs	r2, #32
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004624:	6978      	ldr	r0, [r7, #20]
 8004626:	f7fc fb02 	bl	8000c2e <HAL_I2C_ErrorCallback>
}
 800462a:	bf00      	nop
 800462c:	3718      	adds	r7, #24
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	2000000c 	.word	0x2000000c
 8004638:	14f8b589 	.word	0x14f8b589

0800463c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004644:	2300      	movs	r3, #0
 8004646:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004648:	4b13      	ldr	r3, [pc, #76]	@ (8004698 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	08db      	lsrs	r3, r3, #3
 800464e:	4a13      	ldr	r2, [pc, #76]	@ (800469c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004650:	fba2 2303 	umull	r2, r3, r2, r3
 8004654:	0a1a      	lsrs	r2, r3, #8
 8004656:	4613      	mov	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	4413      	add	r3, r2
 800465c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	3b01      	subs	r3, #1
 8004662:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d107      	bne.n	800467a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466e:	f043 0220 	orr.w	r2, r3, #32
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e008      	b.n	800468c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004684:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004688:	d0e9      	beq.n	800465e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3714      	adds	r7, #20
 8004690:	46bd      	mov	sp, r7
 8004692:	bc80      	pop	{r7}
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	2000000c 	.word	0x2000000c
 800469c:	14f8b589 	.word	0x14f8b589

080046a0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ac:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80046b0:	d103      	bne.n	80046ba <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80046b8:	e007      	b.n	80046ca <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046be:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80046c2:	d102      	bne.n	80046ca <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2208      	movs	r2, #8
 80046c8:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80046ca:	bf00      	nop
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bc80      	pop	{r7}
 80046d2:	4770      	bx	lr

080046d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e272      	b.n	8004bcc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 8087 	beq.w	8004802 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046f4:	4b92      	ldr	r3, [pc, #584]	@ (8004940 <HAL_RCC_OscConfig+0x26c>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f003 030c 	and.w	r3, r3, #12
 80046fc:	2b04      	cmp	r3, #4
 80046fe:	d00c      	beq.n	800471a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004700:	4b8f      	ldr	r3, [pc, #572]	@ (8004940 <HAL_RCC_OscConfig+0x26c>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f003 030c 	and.w	r3, r3, #12
 8004708:	2b08      	cmp	r3, #8
 800470a:	d112      	bne.n	8004732 <HAL_RCC_OscConfig+0x5e>
 800470c:	4b8c      	ldr	r3, [pc, #560]	@ (8004940 <HAL_RCC_OscConfig+0x26c>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004714:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004718:	d10b      	bne.n	8004732 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800471a:	4b89      	ldr	r3, [pc, #548]	@ (8004940 <HAL_RCC_OscConfig+0x26c>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d06c      	beq.n	8004800 <HAL_RCC_OscConfig+0x12c>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d168      	bne.n	8004800 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e24c      	b.n	8004bcc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800473a:	d106      	bne.n	800474a <HAL_RCC_OscConfig+0x76>
 800473c:	4b80      	ldr	r3, [pc, #512]	@ (8004940 <HAL_RCC_OscConfig+0x26c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a7f      	ldr	r2, [pc, #508]	@ (8004940 <HAL_RCC_OscConfig+0x26c>)
 8004742:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004746:	6013      	str	r3, [r2, #0]
 8004748:	e02e      	b.n	80047a8 <HAL_RCC_OscConfig+0xd4>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10c      	bne.n	800476c <HAL_RCC_OscConfig+0x98>
 8004752:	4b7b      	ldr	r3, [pc, #492]	@ (8004940 <HAL_RCC_OscConfig+0x26c>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a7a      	ldr	r2, [pc, #488]	@ (8004940 <HAL_RCC_OscConfig+0x26c>)
 8004758:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800475c:	6013      	str	r3, [r2, #0]
 800475e:	4b78      	ldr	r3, [pc, #480]	@ (8004940 <HAL_RCC_OscConfig+0x26c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a77      	ldr	r2, [pc, #476]	@ (8004940 <HAL_RCC_OscConfig+0x26c>)
 8004764:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004768:	6013      	str	r3, [r2, #0]
 800476a:	e01d      	b.n	80047a8 <HAL_RCC_OscConfig+0xd4>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004774:	d10c      	bne.n	8004790 <HAL_RCC_OscConfig+0xbc>
 8004776:	4b72      	ldr	r3, [pc, #456]	@ (8004940 <HAL_RCC_OscConfig+0x26c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a71      	ldr	r2, [pc, #452]	@ (8004940 <HAL_RCC_OscConfig+0x26c>)
 800477c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004780:	6013      	str	r3, [r2, #0]
 8004782:	4b6f      	ldr	r3, [pc, #444]	@ (8004940 <HAL_RCC_OscConfig+0x26c>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a6e      	ldr	r2, [pc, #440]	@ (8004940 <HAL_RCC_OscConfig+0x26c>)
 8004788:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	e00b      	b.n	80047a8 <HAL_RCC_OscConfig+0xd4>
 8004790:	4b6b      	ldr	r3, [pc, #428]	@ (8004940 <HAL_RCC_OscConfig+0x26c>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a6a      	ldr	r2, [pc, #424]	@ (8004940 <HAL_RCC_OscConfig+0x26c>)
 8004796:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800479a:	6013      	str	r3, [r2, #0]
 800479c:	4b68      	ldr	r3, [pc, #416]	@ (8004940 <HAL_RCC_OscConfig+0x26c>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a67      	ldr	r2, [pc, #412]	@ (8004940 <HAL_RCC_OscConfig+0x26c>)
 80047a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d013      	beq.n	80047d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b0:	f7fd f9a2 	bl	8001af8 <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047b8:	f7fd f99e 	bl	8001af8 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b64      	cmp	r3, #100	@ 0x64
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e200      	b.n	8004bcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ca:	4b5d      	ldr	r3, [pc, #372]	@ (8004940 <HAL_RCC_OscConfig+0x26c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0f0      	beq.n	80047b8 <HAL_RCC_OscConfig+0xe4>
 80047d6:	e014      	b.n	8004802 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d8:	f7fd f98e 	bl	8001af8 <HAL_GetTick>
 80047dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047de:	e008      	b.n	80047f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047e0:	f7fd f98a 	bl	8001af8 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b64      	cmp	r3, #100	@ 0x64
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e1ec      	b.n	8004bcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047f2:	4b53      	ldr	r3, [pc, #332]	@ (8004940 <HAL_RCC_OscConfig+0x26c>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1f0      	bne.n	80047e0 <HAL_RCC_OscConfig+0x10c>
 80047fe:	e000      	b.n	8004802 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004800:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d063      	beq.n	80048d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800480e:	4b4c      	ldr	r3, [pc, #304]	@ (8004940 <HAL_RCC_OscConfig+0x26c>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f003 030c 	and.w	r3, r3, #12
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00b      	beq.n	8004832 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800481a:	4b49      	ldr	r3, [pc, #292]	@ (8004940 <HAL_RCC_OscConfig+0x26c>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f003 030c 	and.w	r3, r3, #12
 8004822:	2b08      	cmp	r3, #8
 8004824:	d11c      	bne.n	8004860 <HAL_RCC_OscConfig+0x18c>
 8004826:	4b46      	ldr	r3, [pc, #280]	@ (8004940 <HAL_RCC_OscConfig+0x26c>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d116      	bne.n	8004860 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004832:	4b43      	ldr	r3, [pc, #268]	@ (8004940 <HAL_RCC_OscConfig+0x26c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d005      	beq.n	800484a <HAL_RCC_OscConfig+0x176>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d001      	beq.n	800484a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e1c0      	b.n	8004bcc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800484a:	4b3d      	ldr	r3, [pc, #244]	@ (8004940 <HAL_RCC_OscConfig+0x26c>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	4939      	ldr	r1, [pc, #228]	@ (8004940 <HAL_RCC_OscConfig+0x26c>)
 800485a:	4313      	orrs	r3, r2
 800485c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800485e:	e03a      	b.n	80048d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d020      	beq.n	80048aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004868:	4b36      	ldr	r3, [pc, #216]	@ (8004944 <HAL_RCC_OscConfig+0x270>)
 800486a:	2201      	movs	r2, #1
 800486c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486e:	f7fd f943 	bl	8001af8 <HAL_GetTick>
 8004872:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004874:	e008      	b.n	8004888 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004876:	f7fd f93f 	bl	8001af8 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d901      	bls.n	8004888 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e1a1      	b.n	8004bcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004888:	4b2d      	ldr	r3, [pc, #180]	@ (8004940 <HAL_RCC_OscConfig+0x26c>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0f0      	beq.n	8004876 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004894:	4b2a      	ldr	r3, [pc, #168]	@ (8004940 <HAL_RCC_OscConfig+0x26c>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	00db      	lsls	r3, r3, #3
 80048a2:	4927      	ldr	r1, [pc, #156]	@ (8004940 <HAL_RCC_OscConfig+0x26c>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	600b      	str	r3, [r1, #0]
 80048a8:	e015      	b.n	80048d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048aa:	4b26      	ldr	r3, [pc, #152]	@ (8004944 <HAL_RCC_OscConfig+0x270>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b0:	f7fd f922 	bl	8001af8 <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048b6:	e008      	b.n	80048ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048b8:	f7fd f91e 	bl	8001af8 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e180      	b.n	8004bcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ca:	4b1d      	ldr	r3, [pc, #116]	@ (8004940 <HAL_RCC_OscConfig+0x26c>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1f0      	bne.n	80048b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0308 	and.w	r3, r3, #8
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d03a      	beq.n	8004958 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d019      	beq.n	800491e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048ea:	4b17      	ldr	r3, [pc, #92]	@ (8004948 <HAL_RCC_OscConfig+0x274>)
 80048ec:	2201      	movs	r2, #1
 80048ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048f0:	f7fd f902 	bl	8001af8 <HAL_GetTick>
 80048f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048f6:	e008      	b.n	800490a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048f8:	f7fd f8fe 	bl	8001af8 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b02      	cmp	r3, #2
 8004904:	d901      	bls.n	800490a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e160      	b.n	8004bcc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800490a:	4b0d      	ldr	r3, [pc, #52]	@ (8004940 <HAL_RCC_OscConfig+0x26c>)
 800490c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b00      	cmp	r3, #0
 8004914:	d0f0      	beq.n	80048f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004916:	2001      	movs	r0, #1
 8004918:	f000 face 	bl	8004eb8 <RCC_Delay>
 800491c:	e01c      	b.n	8004958 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800491e:	4b0a      	ldr	r3, [pc, #40]	@ (8004948 <HAL_RCC_OscConfig+0x274>)
 8004920:	2200      	movs	r2, #0
 8004922:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004924:	f7fd f8e8 	bl	8001af8 <HAL_GetTick>
 8004928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800492a:	e00f      	b.n	800494c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800492c:	f7fd f8e4 	bl	8001af8 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b02      	cmp	r3, #2
 8004938:	d908      	bls.n	800494c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e146      	b.n	8004bcc <HAL_RCC_OscConfig+0x4f8>
 800493e:	bf00      	nop
 8004940:	40021000 	.word	0x40021000
 8004944:	42420000 	.word	0x42420000
 8004948:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800494c:	4b92      	ldr	r3, [pc, #584]	@ (8004b98 <HAL_RCC_OscConfig+0x4c4>)
 800494e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004950:	f003 0302 	and.w	r3, r3, #2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1e9      	bne.n	800492c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0304 	and.w	r3, r3, #4
 8004960:	2b00      	cmp	r3, #0
 8004962:	f000 80a6 	beq.w	8004ab2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004966:	2300      	movs	r3, #0
 8004968:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800496a:	4b8b      	ldr	r3, [pc, #556]	@ (8004b98 <HAL_RCC_OscConfig+0x4c4>)
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10d      	bne.n	8004992 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004976:	4b88      	ldr	r3, [pc, #544]	@ (8004b98 <HAL_RCC_OscConfig+0x4c4>)
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	4a87      	ldr	r2, [pc, #540]	@ (8004b98 <HAL_RCC_OscConfig+0x4c4>)
 800497c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004980:	61d3      	str	r3, [r2, #28]
 8004982:	4b85      	ldr	r3, [pc, #532]	@ (8004b98 <HAL_RCC_OscConfig+0x4c4>)
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800498a:	60bb      	str	r3, [r7, #8]
 800498c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800498e:	2301      	movs	r3, #1
 8004990:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004992:	4b82      	ldr	r3, [pc, #520]	@ (8004b9c <HAL_RCC_OscConfig+0x4c8>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800499a:	2b00      	cmp	r3, #0
 800499c:	d118      	bne.n	80049d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800499e:	4b7f      	ldr	r3, [pc, #508]	@ (8004b9c <HAL_RCC_OscConfig+0x4c8>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a7e      	ldr	r2, [pc, #504]	@ (8004b9c <HAL_RCC_OscConfig+0x4c8>)
 80049a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049aa:	f7fd f8a5 	bl	8001af8 <HAL_GetTick>
 80049ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049b0:	e008      	b.n	80049c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049b2:	f7fd f8a1 	bl	8001af8 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2b64      	cmp	r3, #100	@ 0x64
 80049be:	d901      	bls.n	80049c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e103      	b.n	8004bcc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049c4:	4b75      	ldr	r3, [pc, #468]	@ (8004b9c <HAL_RCC_OscConfig+0x4c8>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d0f0      	beq.n	80049b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d106      	bne.n	80049e6 <HAL_RCC_OscConfig+0x312>
 80049d8:	4b6f      	ldr	r3, [pc, #444]	@ (8004b98 <HAL_RCC_OscConfig+0x4c4>)
 80049da:	6a1b      	ldr	r3, [r3, #32]
 80049dc:	4a6e      	ldr	r2, [pc, #440]	@ (8004b98 <HAL_RCC_OscConfig+0x4c4>)
 80049de:	f043 0301 	orr.w	r3, r3, #1
 80049e2:	6213      	str	r3, [r2, #32]
 80049e4:	e02d      	b.n	8004a42 <HAL_RCC_OscConfig+0x36e>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10c      	bne.n	8004a08 <HAL_RCC_OscConfig+0x334>
 80049ee:	4b6a      	ldr	r3, [pc, #424]	@ (8004b98 <HAL_RCC_OscConfig+0x4c4>)
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	4a69      	ldr	r2, [pc, #420]	@ (8004b98 <HAL_RCC_OscConfig+0x4c4>)
 80049f4:	f023 0301 	bic.w	r3, r3, #1
 80049f8:	6213      	str	r3, [r2, #32]
 80049fa:	4b67      	ldr	r3, [pc, #412]	@ (8004b98 <HAL_RCC_OscConfig+0x4c4>)
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	4a66      	ldr	r2, [pc, #408]	@ (8004b98 <HAL_RCC_OscConfig+0x4c4>)
 8004a00:	f023 0304 	bic.w	r3, r3, #4
 8004a04:	6213      	str	r3, [r2, #32]
 8004a06:	e01c      	b.n	8004a42 <HAL_RCC_OscConfig+0x36e>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	2b05      	cmp	r3, #5
 8004a0e:	d10c      	bne.n	8004a2a <HAL_RCC_OscConfig+0x356>
 8004a10:	4b61      	ldr	r3, [pc, #388]	@ (8004b98 <HAL_RCC_OscConfig+0x4c4>)
 8004a12:	6a1b      	ldr	r3, [r3, #32]
 8004a14:	4a60      	ldr	r2, [pc, #384]	@ (8004b98 <HAL_RCC_OscConfig+0x4c4>)
 8004a16:	f043 0304 	orr.w	r3, r3, #4
 8004a1a:	6213      	str	r3, [r2, #32]
 8004a1c:	4b5e      	ldr	r3, [pc, #376]	@ (8004b98 <HAL_RCC_OscConfig+0x4c4>)
 8004a1e:	6a1b      	ldr	r3, [r3, #32]
 8004a20:	4a5d      	ldr	r2, [pc, #372]	@ (8004b98 <HAL_RCC_OscConfig+0x4c4>)
 8004a22:	f043 0301 	orr.w	r3, r3, #1
 8004a26:	6213      	str	r3, [r2, #32]
 8004a28:	e00b      	b.n	8004a42 <HAL_RCC_OscConfig+0x36e>
 8004a2a:	4b5b      	ldr	r3, [pc, #364]	@ (8004b98 <HAL_RCC_OscConfig+0x4c4>)
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	4a5a      	ldr	r2, [pc, #360]	@ (8004b98 <HAL_RCC_OscConfig+0x4c4>)
 8004a30:	f023 0301 	bic.w	r3, r3, #1
 8004a34:	6213      	str	r3, [r2, #32]
 8004a36:	4b58      	ldr	r3, [pc, #352]	@ (8004b98 <HAL_RCC_OscConfig+0x4c4>)
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	4a57      	ldr	r2, [pc, #348]	@ (8004b98 <HAL_RCC_OscConfig+0x4c4>)
 8004a3c:	f023 0304 	bic.w	r3, r3, #4
 8004a40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d015      	beq.n	8004a76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a4a:	f7fd f855 	bl	8001af8 <HAL_GetTick>
 8004a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a50:	e00a      	b.n	8004a68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a52:	f7fd f851 	bl	8001af8 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d901      	bls.n	8004a68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e0b1      	b.n	8004bcc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a68:	4b4b      	ldr	r3, [pc, #300]	@ (8004b98 <HAL_RCC_OscConfig+0x4c4>)
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	f003 0302 	and.w	r3, r3, #2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d0ee      	beq.n	8004a52 <HAL_RCC_OscConfig+0x37e>
 8004a74:	e014      	b.n	8004aa0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a76:	f7fd f83f 	bl	8001af8 <HAL_GetTick>
 8004a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a7c:	e00a      	b.n	8004a94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a7e:	f7fd f83b 	bl	8001af8 <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d901      	bls.n	8004a94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e09b      	b.n	8004bcc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a94:	4b40      	ldr	r3, [pc, #256]	@ (8004b98 <HAL_RCC_OscConfig+0x4c4>)
 8004a96:	6a1b      	ldr	r3, [r3, #32]
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1ee      	bne.n	8004a7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004aa0:	7dfb      	ldrb	r3, [r7, #23]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d105      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aa6:	4b3c      	ldr	r3, [pc, #240]	@ (8004b98 <HAL_RCC_OscConfig+0x4c4>)
 8004aa8:	69db      	ldr	r3, [r3, #28]
 8004aaa:	4a3b      	ldr	r2, [pc, #236]	@ (8004b98 <HAL_RCC_OscConfig+0x4c4>)
 8004aac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ab0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	69db      	ldr	r3, [r3, #28]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f000 8087 	beq.w	8004bca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004abc:	4b36      	ldr	r3, [pc, #216]	@ (8004b98 <HAL_RCC_OscConfig+0x4c4>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f003 030c 	and.w	r3, r3, #12
 8004ac4:	2b08      	cmp	r3, #8
 8004ac6:	d061      	beq.n	8004b8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	69db      	ldr	r3, [r3, #28]
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d146      	bne.n	8004b5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ad0:	4b33      	ldr	r3, [pc, #204]	@ (8004ba0 <HAL_RCC_OscConfig+0x4cc>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad6:	f7fd f80f 	bl	8001af8 <HAL_GetTick>
 8004ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004adc:	e008      	b.n	8004af0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ade:	f7fd f80b 	bl	8001af8 <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e06d      	b.n	8004bcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004af0:	4b29      	ldr	r3, [pc, #164]	@ (8004b98 <HAL_RCC_OscConfig+0x4c4>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1f0      	bne.n	8004ade <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a1b      	ldr	r3, [r3, #32]
 8004b00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b04:	d108      	bne.n	8004b18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b06:	4b24      	ldr	r3, [pc, #144]	@ (8004b98 <HAL_RCC_OscConfig+0x4c4>)
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	4921      	ldr	r1, [pc, #132]	@ (8004b98 <HAL_RCC_OscConfig+0x4c4>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b18:	4b1f      	ldr	r3, [pc, #124]	@ (8004b98 <HAL_RCC_OscConfig+0x4c4>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a19      	ldr	r1, [r3, #32]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b28:	430b      	orrs	r3, r1
 8004b2a:	491b      	ldr	r1, [pc, #108]	@ (8004b98 <HAL_RCC_OscConfig+0x4c4>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b30:	4b1b      	ldr	r3, [pc, #108]	@ (8004ba0 <HAL_RCC_OscConfig+0x4cc>)
 8004b32:	2201      	movs	r2, #1
 8004b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b36:	f7fc ffdf 	bl	8001af8 <HAL_GetTick>
 8004b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b3c:	e008      	b.n	8004b50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b3e:	f7fc ffdb 	bl	8001af8 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d901      	bls.n	8004b50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e03d      	b.n	8004bcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b50:	4b11      	ldr	r3, [pc, #68]	@ (8004b98 <HAL_RCC_OscConfig+0x4c4>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d0f0      	beq.n	8004b3e <HAL_RCC_OscConfig+0x46a>
 8004b5c:	e035      	b.n	8004bca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b5e:	4b10      	ldr	r3, [pc, #64]	@ (8004ba0 <HAL_RCC_OscConfig+0x4cc>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b64:	f7fc ffc8 	bl	8001af8 <HAL_GetTick>
 8004b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b6a:	e008      	b.n	8004b7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b6c:	f7fc ffc4 	bl	8001af8 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e026      	b.n	8004bcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b7e:	4b06      	ldr	r3, [pc, #24]	@ (8004b98 <HAL_RCC_OscConfig+0x4c4>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1f0      	bne.n	8004b6c <HAL_RCC_OscConfig+0x498>
 8004b8a:	e01e      	b.n	8004bca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d107      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e019      	b.n	8004bcc <HAL_RCC_OscConfig+0x4f8>
 8004b98:	40021000 	.word	0x40021000
 8004b9c:	40007000 	.word	0x40007000
 8004ba0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8004bd4 <HAL_RCC_OscConfig+0x500>)
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d106      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d001      	beq.n	8004bca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e000      	b.n	8004bcc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3718      	adds	r7, #24
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	40021000 	.word	0x40021000

08004bd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d101      	bne.n	8004bec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e0d0      	b.n	8004d8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bec:	4b6a      	ldr	r3, [pc, #424]	@ (8004d98 <HAL_RCC_ClockConfig+0x1c0>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0307 	and.w	r3, r3, #7
 8004bf4:	683a      	ldr	r2, [r7, #0]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d910      	bls.n	8004c1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bfa:	4b67      	ldr	r3, [pc, #412]	@ (8004d98 <HAL_RCC_ClockConfig+0x1c0>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f023 0207 	bic.w	r2, r3, #7
 8004c02:	4965      	ldr	r1, [pc, #404]	@ (8004d98 <HAL_RCC_ClockConfig+0x1c0>)
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c0a:	4b63      	ldr	r3, [pc, #396]	@ (8004d98 <HAL_RCC_ClockConfig+0x1c0>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0307 	and.w	r3, r3, #7
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d001      	beq.n	8004c1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e0b8      	b.n	8004d8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d020      	beq.n	8004c6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0304 	and.w	r3, r3, #4
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d005      	beq.n	8004c40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c34:	4b59      	ldr	r3, [pc, #356]	@ (8004d9c <HAL_RCC_ClockConfig+0x1c4>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	4a58      	ldr	r2, [pc, #352]	@ (8004d9c <HAL_RCC_ClockConfig+0x1c4>)
 8004c3a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004c3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0308 	and.w	r3, r3, #8
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d005      	beq.n	8004c58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c4c:	4b53      	ldr	r3, [pc, #332]	@ (8004d9c <HAL_RCC_ClockConfig+0x1c4>)
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	4a52      	ldr	r2, [pc, #328]	@ (8004d9c <HAL_RCC_ClockConfig+0x1c4>)
 8004c52:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004c56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c58:	4b50      	ldr	r3, [pc, #320]	@ (8004d9c <HAL_RCC_ClockConfig+0x1c4>)
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	494d      	ldr	r1, [pc, #308]	@ (8004d9c <HAL_RCC_ClockConfig+0x1c4>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d040      	beq.n	8004cf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d107      	bne.n	8004c8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c7e:	4b47      	ldr	r3, [pc, #284]	@ (8004d9c <HAL_RCC_ClockConfig+0x1c4>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d115      	bne.n	8004cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e07f      	b.n	8004d8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d107      	bne.n	8004ca6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c96:	4b41      	ldr	r3, [pc, #260]	@ (8004d9c <HAL_RCC_ClockConfig+0x1c4>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d109      	bne.n	8004cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e073      	b.n	8004d8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ca6:	4b3d      	ldr	r3, [pc, #244]	@ (8004d9c <HAL_RCC_ClockConfig+0x1c4>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e06b      	b.n	8004d8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cb6:	4b39      	ldr	r3, [pc, #228]	@ (8004d9c <HAL_RCC_ClockConfig+0x1c4>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f023 0203 	bic.w	r2, r3, #3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	4936      	ldr	r1, [pc, #216]	@ (8004d9c <HAL_RCC_ClockConfig+0x1c4>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cc8:	f7fc ff16 	bl	8001af8 <HAL_GetTick>
 8004ccc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cce:	e00a      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cd0:	f7fc ff12 	bl	8001af8 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e053      	b.n	8004d8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ce6:	4b2d      	ldr	r3, [pc, #180]	@ (8004d9c <HAL_RCC_ClockConfig+0x1c4>)
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f003 020c 	and.w	r2, r3, #12
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d1eb      	bne.n	8004cd0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cf8:	4b27      	ldr	r3, [pc, #156]	@ (8004d98 <HAL_RCC_ClockConfig+0x1c0>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0307 	and.w	r3, r3, #7
 8004d00:	683a      	ldr	r2, [r7, #0]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d210      	bcs.n	8004d28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d06:	4b24      	ldr	r3, [pc, #144]	@ (8004d98 <HAL_RCC_ClockConfig+0x1c0>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f023 0207 	bic.w	r2, r3, #7
 8004d0e:	4922      	ldr	r1, [pc, #136]	@ (8004d98 <HAL_RCC_ClockConfig+0x1c0>)
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d16:	4b20      	ldr	r3, [pc, #128]	@ (8004d98 <HAL_RCC_ClockConfig+0x1c0>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0307 	and.w	r3, r3, #7
 8004d1e:	683a      	ldr	r2, [r7, #0]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d001      	beq.n	8004d28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e032      	b.n	8004d8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0304 	and.w	r3, r3, #4
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d008      	beq.n	8004d46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d34:	4b19      	ldr	r3, [pc, #100]	@ (8004d9c <HAL_RCC_ClockConfig+0x1c4>)
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	4916      	ldr	r1, [pc, #88]	@ (8004d9c <HAL_RCC_ClockConfig+0x1c4>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0308 	and.w	r3, r3, #8
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d009      	beq.n	8004d66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d52:	4b12      	ldr	r3, [pc, #72]	@ (8004d9c <HAL_RCC_ClockConfig+0x1c4>)
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	00db      	lsls	r3, r3, #3
 8004d60:	490e      	ldr	r1, [pc, #56]	@ (8004d9c <HAL_RCC_ClockConfig+0x1c4>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d66:	f000 f821 	bl	8004dac <HAL_RCC_GetSysClockFreq>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d9c <HAL_RCC_ClockConfig+0x1c4>)
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	091b      	lsrs	r3, r3, #4
 8004d72:	f003 030f 	and.w	r3, r3, #15
 8004d76:	490a      	ldr	r1, [pc, #40]	@ (8004da0 <HAL_RCC_ClockConfig+0x1c8>)
 8004d78:	5ccb      	ldrb	r3, [r1, r3]
 8004d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d7e:	4a09      	ldr	r2, [pc, #36]	@ (8004da4 <HAL_RCC_ClockConfig+0x1cc>)
 8004d80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004d82:	4b09      	ldr	r3, [pc, #36]	@ (8004da8 <HAL_RCC_ClockConfig+0x1d0>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7fc fe74 	bl	8001a74 <HAL_InitTick>

  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	40022000 	.word	0x40022000
 8004d9c:	40021000 	.word	0x40021000
 8004da0:	08007e78 	.word	0x08007e78
 8004da4:	2000000c 	.word	0x2000000c
 8004da8:	20000010 	.word	0x20000010

08004dac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b087      	sub	sp, #28
 8004db0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004db2:	2300      	movs	r3, #0
 8004db4:	60fb      	str	r3, [r7, #12]
 8004db6:	2300      	movs	r3, #0
 8004db8:	60bb      	str	r3, [r7, #8]
 8004dba:	2300      	movs	r3, #0
 8004dbc:	617b      	str	r3, [r7, #20]
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004dc6:	4b1e      	ldr	r3, [pc, #120]	@ (8004e40 <HAL_RCC_GetSysClockFreq+0x94>)
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f003 030c 	and.w	r3, r3, #12
 8004dd2:	2b04      	cmp	r3, #4
 8004dd4:	d002      	beq.n	8004ddc <HAL_RCC_GetSysClockFreq+0x30>
 8004dd6:	2b08      	cmp	r3, #8
 8004dd8:	d003      	beq.n	8004de2 <HAL_RCC_GetSysClockFreq+0x36>
 8004dda:	e027      	b.n	8004e2c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ddc:	4b19      	ldr	r3, [pc, #100]	@ (8004e44 <HAL_RCC_GetSysClockFreq+0x98>)
 8004dde:	613b      	str	r3, [r7, #16]
      break;
 8004de0:	e027      	b.n	8004e32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	0c9b      	lsrs	r3, r3, #18
 8004de6:	f003 030f 	and.w	r3, r3, #15
 8004dea:	4a17      	ldr	r2, [pc, #92]	@ (8004e48 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004dec:	5cd3      	ldrb	r3, [r2, r3]
 8004dee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d010      	beq.n	8004e1c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004dfa:	4b11      	ldr	r3, [pc, #68]	@ (8004e40 <HAL_RCC_GetSysClockFreq+0x94>)
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	0c5b      	lsrs	r3, r3, #17
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	4a11      	ldr	r2, [pc, #68]	@ (8004e4c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004e06:	5cd3      	ldrb	r3, [r2, r3]
 8004e08:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8004e44 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e0e:	fb03 f202 	mul.w	r2, r3, r2
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e18:	617b      	str	r3, [r7, #20]
 8004e1a:	e004      	b.n	8004e26 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a0c      	ldr	r2, [pc, #48]	@ (8004e50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004e20:	fb02 f303 	mul.w	r3, r2, r3
 8004e24:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	613b      	str	r3, [r7, #16]
      break;
 8004e2a:	e002      	b.n	8004e32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e2c:	4b05      	ldr	r3, [pc, #20]	@ (8004e44 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e2e:	613b      	str	r3, [r7, #16]
      break;
 8004e30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e32:	693b      	ldr	r3, [r7, #16]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	371c      	adds	r7, #28
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bc80      	pop	{r7}
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	40021000 	.word	0x40021000
 8004e44:	007a1200 	.word	0x007a1200
 8004e48:	08007e90 	.word	0x08007e90
 8004e4c:	08007ea0 	.word	0x08007ea0
 8004e50:	003d0900 	.word	0x003d0900

08004e54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e54:	b480      	push	{r7}
 8004e56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e58:	4b02      	ldr	r3, [pc, #8]	@ (8004e64 <HAL_RCC_GetHCLKFreq+0x10>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bc80      	pop	{r7}
 8004e62:	4770      	bx	lr
 8004e64:	2000000c 	.word	0x2000000c

08004e68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e6c:	f7ff fff2 	bl	8004e54 <HAL_RCC_GetHCLKFreq>
 8004e70:	4602      	mov	r2, r0
 8004e72:	4b05      	ldr	r3, [pc, #20]	@ (8004e88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	0a1b      	lsrs	r3, r3, #8
 8004e78:	f003 0307 	and.w	r3, r3, #7
 8004e7c:	4903      	ldr	r1, [pc, #12]	@ (8004e8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e7e:	5ccb      	ldrb	r3, [r1, r3]
 8004e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	40021000 	.word	0x40021000
 8004e8c:	08007e88 	.word	0x08007e88

08004e90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e94:	f7ff ffde 	bl	8004e54 <HAL_RCC_GetHCLKFreq>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	4b05      	ldr	r3, [pc, #20]	@ (8004eb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	0adb      	lsrs	r3, r3, #11
 8004ea0:	f003 0307 	and.w	r3, r3, #7
 8004ea4:	4903      	ldr	r1, [pc, #12]	@ (8004eb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ea6:	5ccb      	ldrb	r3, [r1, r3]
 8004ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	40021000 	.word	0x40021000
 8004eb4:	08007e88 	.word	0x08007e88

08004eb8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8004eec <RCC_Delay+0x34>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a0a      	ldr	r2, [pc, #40]	@ (8004ef0 <RCC_Delay+0x38>)
 8004ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eca:	0a5b      	lsrs	r3, r3, #9
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	fb02 f303 	mul.w	r3, r2, r3
 8004ed2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004ed4:	bf00      	nop
  }
  while (Delay --);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	1e5a      	subs	r2, r3, #1
 8004eda:	60fa      	str	r2, [r7, #12]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1f9      	bne.n	8004ed4 <RCC_Delay+0x1c>
}
 8004ee0:	bf00      	nop
 8004ee2:	bf00      	nop
 8004ee4:	3714      	adds	r7, #20
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bc80      	pop	{r7}
 8004eea:	4770      	bx	lr
 8004eec:	2000000c 	.word	0x2000000c
 8004ef0:	10624dd3 	.word	0x10624dd3

08004ef4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e041      	b.n	8004f8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d106      	bne.n	8004f20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7fc fbc8 	bl	80016b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2202      	movs	r2, #2
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	3304      	adds	r3, #4
 8004f30:	4619      	mov	r1, r3
 8004f32:	4610      	mov	r0, r2
 8004f34:	f000 fc3e 	bl	80057b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
	...

08004f94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d001      	beq.n	8004fac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e044      	b.n	8005036 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2202      	movs	r2, #2
 8004fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68da      	ldr	r2, [r3, #12]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f042 0201 	orr.w	r2, r2, #1
 8004fc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a1d      	ldr	r2, [pc, #116]	@ (8005040 <HAL_TIM_Base_Start_IT+0xac>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d018      	beq.n	8005000 <HAL_TIM_Base_Start_IT+0x6c>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a1c      	ldr	r2, [pc, #112]	@ (8005044 <HAL_TIM_Base_Start_IT+0xb0>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d013      	beq.n	8005000 <HAL_TIM_Base_Start_IT+0x6c>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fe0:	d00e      	beq.n	8005000 <HAL_TIM_Base_Start_IT+0x6c>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a18      	ldr	r2, [pc, #96]	@ (8005048 <HAL_TIM_Base_Start_IT+0xb4>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d009      	beq.n	8005000 <HAL_TIM_Base_Start_IT+0x6c>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a16      	ldr	r2, [pc, #88]	@ (800504c <HAL_TIM_Base_Start_IT+0xb8>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d004      	beq.n	8005000 <HAL_TIM_Base_Start_IT+0x6c>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a15      	ldr	r2, [pc, #84]	@ (8005050 <HAL_TIM_Base_Start_IT+0xbc>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d111      	bne.n	8005024 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f003 0307 	and.w	r3, r3, #7
 800500a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2b06      	cmp	r3, #6
 8005010:	d010      	beq.n	8005034 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f042 0201 	orr.w	r2, r2, #1
 8005020:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005022:	e007      	b.n	8005034 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f042 0201 	orr.w	r2, r2, #1
 8005032:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3714      	adds	r7, #20
 800503a:	46bd      	mov	sp, r7
 800503c:	bc80      	pop	{r7}
 800503e:	4770      	bx	lr
 8005040:	40012c00 	.word	0x40012c00
 8005044:	40013400 	.word	0x40013400
 8005048:	40000400 	.word	0x40000400
 800504c:	40000800 	.word	0x40000800
 8005050:	40000c00 	.word	0x40000c00

08005054 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e041      	b.n	80050ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d106      	bne.n	8005080 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 f839 	bl	80050f2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2202      	movs	r2, #2
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	3304      	adds	r3, #4
 8005090:	4619      	mov	r1, r3
 8005092:	4610      	mov	r0, r2
 8005094:	f000 fb8e 	bl	80057b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b083      	sub	sp, #12
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80050fa:	bf00      	nop
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	bc80      	pop	{r7}
 8005102:	4770      	bx	lr

08005104 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d109      	bne.n	8005128 <HAL_TIM_PWM_Start+0x24>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b01      	cmp	r3, #1
 800511e:	bf14      	ite	ne
 8005120:	2301      	movne	r3, #1
 8005122:	2300      	moveq	r3, #0
 8005124:	b2db      	uxtb	r3, r3
 8005126:	e022      	b.n	800516e <HAL_TIM_PWM_Start+0x6a>
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	2b04      	cmp	r3, #4
 800512c:	d109      	bne.n	8005142 <HAL_TIM_PWM_Start+0x3e>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b01      	cmp	r3, #1
 8005138:	bf14      	ite	ne
 800513a:	2301      	movne	r3, #1
 800513c:	2300      	moveq	r3, #0
 800513e:	b2db      	uxtb	r3, r3
 8005140:	e015      	b.n	800516e <HAL_TIM_PWM_Start+0x6a>
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	2b08      	cmp	r3, #8
 8005146:	d109      	bne.n	800515c <HAL_TIM_PWM_Start+0x58>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b01      	cmp	r3, #1
 8005152:	bf14      	ite	ne
 8005154:	2301      	movne	r3, #1
 8005156:	2300      	moveq	r3, #0
 8005158:	b2db      	uxtb	r3, r3
 800515a:	e008      	b.n	800516e <HAL_TIM_PWM_Start+0x6a>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2b01      	cmp	r3, #1
 8005166:	bf14      	ite	ne
 8005168:	2301      	movne	r3, #1
 800516a:	2300      	moveq	r3, #0
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e072      	b.n	800525c <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d104      	bne.n	8005186 <HAL_TIM_PWM_Start+0x82>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2202      	movs	r2, #2
 8005180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005184:	e013      	b.n	80051ae <HAL_TIM_PWM_Start+0xaa>
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	2b04      	cmp	r3, #4
 800518a:	d104      	bne.n	8005196 <HAL_TIM_PWM_Start+0x92>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2202      	movs	r2, #2
 8005190:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005194:	e00b      	b.n	80051ae <HAL_TIM_PWM_Start+0xaa>
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2b08      	cmp	r3, #8
 800519a:	d104      	bne.n	80051a6 <HAL_TIM_PWM_Start+0xa2>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2202      	movs	r2, #2
 80051a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051a4:	e003      	b.n	80051ae <HAL_TIM_PWM_Start+0xaa>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2202      	movs	r2, #2
 80051aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2201      	movs	r2, #1
 80051b4:	6839      	ldr	r1, [r7, #0]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 fdc4 	bl	8005d44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a28      	ldr	r2, [pc, #160]	@ (8005264 <HAL_TIM_PWM_Start+0x160>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d004      	beq.n	80051d0 <HAL_TIM_PWM_Start+0xcc>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a27      	ldr	r2, [pc, #156]	@ (8005268 <HAL_TIM_PWM_Start+0x164>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d101      	bne.n	80051d4 <HAL_TIM_PWM_Start+0xd0>
 80051d0:	2301      	movs	r3, #1
 80051d2:	e000      	b.n	80051d6 <HAL_TIM_PWM_Start+0xd2>
 80051d4:	2300      	movs	r3, #0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d007      	beq.n	80051ea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80051e8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a1d      	ldr	r2, [pc, #116]	@ (8005264 <HAL_TIM_PWM_Start+0x160>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d018      	beq.n	8005226 <HAL_TIM_PWM_Start+0x122>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a1b      	ldr	r2, [pc, #108]	@ (8005268 <HAL_TIM_PWM_Start+0x164>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d013      	beq.n	8005226 <HAL_TIM_PWM_Start+0x122>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005206:	d00e      	beq.n	8005226 <HAL_TIM_PWM_Start+0x122>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a17      	ldr	r2, [pc, #92]	@ (800526c <HAL_TIM_PWM_Start+0x168>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d009      	beq.n	8005226 <HAL_TIM_PWM_Start+0x122>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a16      	ldr	r2, [pc, #88]	@ (8005270 <HAL_TIM_PWM_Start+0x16c>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d004      	beq.n	8005226 <HAL_TIM_PWM_Start+0x122>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a14      	ldr	r2, [pc, #80]	@ (8005274 <HAL_TIM_PWM_Start+0x170>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d111      	bne.n	800524a <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f003 0307 	and.w	r3, r3, #7
 8005230:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2b06      	cmp	r3, #6
 8005236:	d010      	beq.n	800525a <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f042 0201 	orr.w	r2, r2, #1
 8005246:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005248:	e007      	b.n	800525a <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f042 0201 	orr.w	r2, r2, #1
 8005258:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	40012c00 	.word	0x40012c00
 8005268:	40013400 	.word	0x40013400
 800526c:	40000400 	.word	0x40000400
 8005270:	40000800 	.word	0x40000800
 8005274:	40000c00 	.word	0x40000c00

08005278 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b00      	cmp	r3, #0
 8005298:	d020      	beq.n	80052dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f003 0302 	and.w	r3, r3, #2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d01b      	beq.n	80052dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f06f 0202 	mvn.w	r2, #2
 80052ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	f003 0303 	and.w	r3, r3, #3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d003      	beq.n	80052ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 fa5a 	bl	800577c <HAL_TIM_IC_CaptureCallback>
 80052c8:	e005      	b.n	80052d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 fa4d 	bl	800576a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 fa5c 	bl	800578e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	f003 0304 	and.w	r3, r3, #4
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d020      	beq.n	8005328 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d01b      	beq.n	8005328 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f06f 0204 	mvn.w	r2, #4
 80052f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2202      	movs	r2, #2
 80052fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800530a:	2b00      	cmp	r3, #0
 800530c:	d003      	beq.n	8005316 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 fa34 	bl	800577c <HAL_TIM_IC_CaptureCallback>
 8005314:	e005      	b.n	8005322 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 fa27 	bl	800576a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 fa36 	bl	800578e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	f003 0308 	and.w	r3, r3, #8
 800532e:	2b00      	cmp	r3, #0
 8005330:	d020      	beq.n	8005374 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f003 0308 	and.w	r3, r3, #8
 8005338:	2b00      	cmp	r3, #0
 800533a:	d01b      	beq.n	8005374 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f06f 0208 	mvn.w	r2, #8
 8005344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2204      	movs	r2, #4
 800534a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	f003 0303 	and.w	r3, r3, #3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d003      	beq.n	8005362 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 fa0e 	bl	800577c <HAL_TIM_IC_CaptureCallback>
 8005360:	e005      	b.n	800536e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 fa01 	bl	800576a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 fa10 	bl	800578e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	f003 0310 	and.w	r3, r3, #16
 800537a:	2b00      	cmp	r3, #0
 800537c:	d020      	beq.n	80053c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f003 0310 	and.w	r3, r3, #16
 8005384:	2b00      	cmp	r3, #0
 8005386:	d01b      	beq.n	80053c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f06f 0210 	mvn.w	r2, #16
 8005390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2208      	movs	r2, #8
 8005396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d003      	beq.n	80053ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f9e8 	bl	800577c <HAL_TIM_IC_CaptureCallback>
 80053ac:	e005      	b.n	80053ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f9db 	bl	800576a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f9ea 	bl	800578e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00c      	beq.n	80053e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d007      	beq.n	80053e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f06f 0201 	mvn.w	r2, #1
 80053dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f7fb fb1a 	bl	8000a18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00c      	beq.n	8005408 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d007      	beq.n	8005408 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 fe34 	bl	8006070 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00c      	beq.n	800542c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005418:	2b00      	cmp	r3, #0
 800541a:	d007      	beq.n	800542c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f9ba 	bl	80057a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	f003 0320 	and.w	r3, r3, #32
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00c      	beq.n	8005450 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f003 0320 	and.w	r3, r3, #32
 800543c:	2b00      	cmp	r3, #0
 800543e:	d007      	beq.n	8005450 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f06f 0220 	mvn.w	r2, #32
 8005448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 fe07 	bl	800605e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005450:	bf00      	nop
 8005452:	3710      	adds	r7, #16
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b086      	sub	sp, #24
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005464:	2300      	movs	r3, #0
 8005466:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800546e:	2b01      	cmp	r3, #1
 8005470:	d101      	bne.n	8005476 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005472:	2302      	movs	r3, #2
 8005474:	e0ae      	b.n	80055d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2b0c      	cmp	r3, #12
 8005482:	f200 809f 	bhi.w	80055c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005486:	a201      	add	r2, pc, #4	@ (adr r2, 800548c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800548c:	080054c1 	.word	0x080054c1
 8005490:	080055c5 	.word	0x080055c5
 8005494:	080055c5 	.word	0x080055c5
 8005498:	080055c5 	.word	0x080055c5
 800549c:	08005501 	.word	0x08005501
 80054a0:	080055c5 	.word	0x080055c5
 80054a4:	080055c5 	.word	0x080055c5
 80054a8:	080055c5 	.word	0x080055c5
 80054ac:	08005543 	.word	0x08005543
 80054b0:	080055c5 	.word	0x080055c5
 80054b4:	080055c5 	.word	0x080055c5
 80054b8:	080055c5 	.word	0x080055c5
 80054bc:	08005583 	.word	0x08005583
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68b9      	ldr	r1, [r7, #8]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 f9fa 	bl	80058c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	699a      	ldr	r2, [r3, #24]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f042 0208 	orr.w	r2, r2, #8
 80054da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	699a      	ldr	r2, [r3, #24]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f022 0204 	bic.w	r2, r2, #4
 80054ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6999      	ldr	r1, [r3, #24]
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	691a      	ldr	r2, [r3, #16]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	619a      	str	r2, [r3, #24]
      break;
 80054fe:	e064      	b.n	80055ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68b9      	ldr	r1, [r7, #8]
 8005506:	4618      	mov	r0, r3
 8005508:	f000 fa4a 	bl	80059a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	699a      	ldr	r2, [r3, #24]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800551a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	699a      	ldr	r2, [r3, #24]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800552a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6999      	ldr	r1, [r3, #24]
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	021a      	lsls	r2, r3, #8
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	430a      	orrs	r2, r1
 800553e:	619a      	str	r2, [r3, #24]
      break;
 8005540:	e043      	b.n	80055ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68b9      	ldr	r1, [r7, #8]
 8005548:	4618      	mov	r0, r3
 800554a:	f000 fa9d 	bl	8005a88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	69da      	ldr	r2, [r3, #28]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f042 0208 	orr.w	r2, r2, #8
 800555c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	69da      	ldr	r2, [r3, #28]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 0204 	bic.w	r2, r2, #4
 800556c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	69d9      	ldr	r1, [r3, #28]
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	691a      	ldr	r2, [r3, #16]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	430a      	orrs	r2, r1
 800557e:	61da      	str	r2, [r3, #28]
      break;
 8005580:	e023      	b.n	80055ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68b9      	ldr	r1, [r7, #8]
 8005588:	4618      	mov	r0, r3
 800558a:	f000 faf1 	bl	8005b70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	69da      	ldr	r2, [r3, #28]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800559c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	69da      	ldr	r2, [r3, #28]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	69d9      	ldr	r1, [r3, #28]
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	021a      	lsls	r2, r3, #8
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	61da      	str	r2, [r3, #28]
      break;
 80055c2:	e002      	b.n	80055ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	75fb      	strb	r3, [r7, #23]
      break;
 80055c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80055d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3718      	adds	r7, #24
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055e6:	2300      	movs	r3, #0
 80055e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d101      	bne.n	80055f8 <HAL_TIM_ConfigClockSource+0x1c>
 80055f4:	2302      	movs	r3, #2
 80055f6:	e0b4      	b.n	8005762 <HAL_TIM_ConfigClockSource+0x186>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2202      	movs	r2, #2
 8005604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005616:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800561e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68ba      	ldr	r2, [r7, #8]
 8005626:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005630:	d03e      	beq.n	80056b0 <HAL_TIM_ConfigClockSource+0xd4>
 8005632:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005636:	f200 8087 	bhi.w	8005748 <HAL_TIM_ConfigClockSource+0x16c>
 800563a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800563e:	f000 8086 	beq.w	800574e <HAL_TIM_ConfigClockSource+0x172>
 8005642:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005646:	d87f      	bhi.n	8005748 <HAL_TIM_ConfigClockSource+0x16c>
 8005648:	2b70      	cmp	r3, #112	@ 0x70
 800564a:	d01a      	beq.n	8005682 <HAL_TIM_ConfigClockSource+0xa6>
 800564c:	2b70      	cmp	r3, #112	@ 0x70
 800564e:	d87b      	bhi.n	8005748 <HAL_TIM_ConfigClockSource+0x16c>
 8005650:	2b60      	cmp	r3, #96	@ 0x60
 8005652:	d050      	beq.n	80056f6 <HAL_TIM_ConfigClockSource+0x11a>
 8005654:	2b60      	cmp	r3, #96	@ 0x60
 8005656:	d877      	bhi.n	8005748 <HAL_TIM_ConfigClockSource+0x16c>
 8005658:	2b50      	cmp	r3, #80	@ 0x50
 800565a:	d03c      	beq.n	80056d6 <HAL_TIM_ConfigClockSource+0xfa>
 800565c:	2b50      	cmp	r3, #80	@ 0x50
 800565e:	d873      	bhi.n	8005748 <HAL_TIM_ConfigClockSource+0x16c>
 8005660:	2b40      	cmp	r3, #64	@ 0x40
 8005662:	d058      	beq.n	8005716 <HAL_TIM_ConfigClockSource+0x13a>
 8005664:	2b40      	cmp	r3, #64	@ 0x40
 8005666:	d86f      	bhi.n	8005748 <HAL_TIM_ConfigClockSource+0x16c>
 8005668:	2b30      	cmp	r3, #48	@ 0x30
 800566a:	d064      	beq.n	8005736 <HAL_TIM_ConfigClockSource+0x15a>
 800566c:	2b30      	cmp	r3, #48	@ 0x30
 800566e:	d86b      	bhi.n	8005748 <HAL_TIM_ConfigClockSource+0x16c>
 8005670:	2b20      	cmp	r3, #32
 8005672:	d060      	beq.n	8005736 <HAL_TIM_ConfigClockSource+0x15a>
 8005674:	2b20      	cmp	r3, #32
 8005676:	d867      	bhi.n	8005748 <HAL_TIM_ConfigClockSource+0x16c>
 8005678:	2b00      	cmp	r3, #0
 800567a:	d05c      	beq.n	8005736 <HAL_TIM_ConfigClockSource+0x15a>
 800567c:	2b10      	cmp	r3, #16
 800567e:	d05a      	beq.n	8005736 <HAL_TIM_ConfigClockSource+0x15a>
 8005680:	e062      	b.n	8005748 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005692:	f000 fb38 	bl	8005d06 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80056a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68ba      	ldr	r2, [r7, #8]
 80056ac:	609a      	str	r2, [r3, #8]
      break;
 80056ae:	e04f      	b.n	8005750 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056c0:	f000 fb21 	bl	8005d06 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	689a      	ldr	r2, [r3, #8]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056d2:	609a      	str	r2, [r3, #8]
      break;
 80056d4:	e03c      	b.n	8005750 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056e2:	461a      	mov	r2, r3
 80056e4:	f000 fa98 	bl	8005c18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2150      	movs	r1, #80	@ 0x50
 80056ee:	4618      	mov	r0, r3
 80056f0:	f000 faef 	bl	8005cd2 <TIM_ITRx_SetConfig>
      break;
 80056f4:	e02c      	b.n	8005750 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005702:	461a      	mov	r2, r3
 8005704:	f000 fab6 	bl	8005c74 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2160      	movs	r1, #96	@ 0x60
 800570e:	4618      	mov	r0, r3
 8005710:	f000 fadf 	bl	8005cd2 <TIM_ITRx_SetConfig>
      break;
 8005714:	e01c      	b.n	8005750 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005722:	461a      	mov	r2, r3
 8005724:	f000 fa78 	bl	8005c18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2140      	movs	r1, #64	@ 0x40
 800572e:	4618      	mov	r0, r3
 8005730:	f000 facf 	bl	8005cd2 <TIM_ITRx_SetConfig>
      break;
 8005734:	e00c      	b.n	8005750 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4619      	mov	r1, r3
 8005740:	4610      	mov	r0, r2
 8005742:	f000 fac6 	bl	8005cd2 <TIM_ITRx_SetConfig>
      break;
 8005746:	e003      	b.n	8005750 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	73fb      	strb	r3, [r7, #15]
      break;
 800574c:	e000      	b.n	8005750 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800574e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005760:	7bfb      	ldrb	r3, [r7, #15]
}
 8005762:	4618      	mov	r0, r3
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800576a:	b480      	push	{r7}
 800576c:	b083      	sub	sp, #12
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005772:	bf00      	nop
 8005774:	370c      	adds	r7, #12
 8005776:	46bd      	mov	sp, r7
 8005778:	bc80      	pop	{r7}
 800577a:	4770      	bx	lr

0800577c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	bc80      	pop	{r7}
 800578c:	4770      	bx	lr

0800578e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800578e:	b480      	push	{r7}
 8005790:	b083      	sub	sp, #12
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005796:	bf00      	nop
 8005798:	370c      	adds	r7, #12
 800579a:	46bd      	mov	sp, r7
 800579c:	bc80      	pop	{r7}
 800579e:	4770      	bx	lr

080057a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bc80      	pop	{r7}
 80057b0:	4770      	bx	lr
	...

080057b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a39      	ldr	r2, [pc, #228]	@ (80058ac <TIM_Base_SetConfig+0xf8>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d013      	beq.n	80057f4 <TIM_Base_SetConfig+0x40>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a38      	ldr	r2, [pc, #224]	@ (80058b0 <TIM_Base_SetConfig+0xfc>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d00f      	beq.n	80057f4 <TIM_Base_SetConfig+0x40>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057da:	d00b      	beq.n	80057f4 <TIM_Base_SetConfig+0x40>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a35      	ldr	r2, [pc, #212]	@ (80058b4 <TIM_Base_SetConfig+0x100>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d007      	beq.n	80057f4 <TIM_Base_SetConfig+0x40>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a34      	ldr	r2, [pc, #208]	@ (80058b8 <TIM_Base_SetConfig+0x104>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d003      	beq.n	80057f4 <TIM_Base_SetConfig+0x40>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a33      	ldr	r2, [pc, #204]	@ (80058bc <TIM_Base_SetConfig+0x108>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d108      	bne.n	8005806 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	4313      	orrs	r3, r2
 8005804:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a28      	ldr	r2, [pc, #160]	@ (80058ac <TIM_Base_SetConfig+0xf8>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d013      	beq.n	8005836 <TIM_Base_SetConfig+0x82>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a27      	ldr	r2, [pc, #156]	@ (80058b0 <TIM_Base_SetConfig+0xfc>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d00f      	beq.n	8005836 <TIM_Base_SetConfig+0x82>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800581c:	d00b      	beq.n	8005836 <TIM_Base_SetConfig+0x82>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a24      	ldr	r2, [pc, #144]	@ (80058b4 <TIM_Base_SetConfig+0x100>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d007      	beq.n	8005836 <TIM_Base_SetConfig+0x82>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a23      	ldr	r2, [pc, #140]	@ (80058b8 <TIM_Base_SetConfig+0x104>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d003      	beq.n	8005836 <TIM_Base_SetConfig+0x82>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a22      	ldr	r2, [pc, #136]	@ (80058bc <TIM_Base_SetConfig+0x108>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d108      	bne.n	8005848 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800583c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	4313      	orrs	r3, r2
 8005846:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	4313      	orrs	r3, r2
 8005854:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	689a      	ldr	r2, [r3, #8]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a0f      	ldr	r2, [pc, #60]	@ (80058ac <TIM_Base_SetConfig+0xf8>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d003      	beq.n	800587c <TIM_Base_SetConfig+0xc8>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a0e      	ldr	r2, [pc, #56]	@ (80058b0 <TIM_Base_SetConfig+0xfc>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d103      	bne.n	8005884 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	691a      	ldr	r2, [r3, #16]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	2b00      	cmp	r3, #0
 8005894:	d005      	beq.n	80058a2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	f023 0201 	bic.w	r2, r3, #1
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	611a      	str	r2, [r3, #16]
  }
}
 80058a2:	bf00      	nop
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bc80      	pop	{r7}
 80058aa:	4770      	bx	lr
 80058ac:	40012c00 	.word	0x40012c00
 80058b0:	40013400 	.word	0x40013400
 80058b4:	40000400 	.word	0x40000400
 80058b8:	40000800 	.word	0x40000800
 80058bc:	40000c00 	.word	0x40000c00

080058c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b087      	sub	sp, #28
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a1b      	ldr	r3, [r3, #32]
 80058ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a1b      	ldr	r3, [r3, #32]
 80058d4:	f023 0201 	bic.w	r2, r3, #1
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f023 0303 	bic.w	r3, r3, #3
 80058f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	4313      	orrs	r3, r2
 8005900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	f023 0302 	bic.w	r3, r3, #2
 8005908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	4313      	orrs	r3, r2
 8005912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a20      	ldr	r2, [pc, #128]	@ (8005998 <TIM_OC1_SetConfig+0xd8>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d003      	beq.n	8005924 <TIM_OC1_SetConfig+0x64>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a1f      	ldr	r2, [pc, #124]	@ (800599c <TIM_OC1_SetConfig+0xdc>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d10c      	bne.n	800593e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f023 0308 	bic.w	r3, r3, #8
 800592a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	4313      	orrs	r3, r2
 8005934:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	f023 0304 	bic.w	r3, r3, #4
 800593c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a15      	ldr	r2, [pc, #84]	@ (8005998 <TIM_OC1_SetConfig+0xd8>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d003      	beq.n	800594e <TIM_OC1_SetConfig+0x8e>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a14      	ldr	r2, [pc, #80]	@ (800599c <TIM_OC1_SetConfig+0xdc>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d111      	bne.n	8005972 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005954:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800595c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	4313      	orrs	r3, r2
 8005966:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	4313      	orrs	r3, r2
 8005970:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	685a      	ldr	r2, [r3, #4]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	621a      	str	r2, [r3, #32]
}
 800598c:	bf00      	nop
 800598e:	371c      	adds	r7, #28
 8005990:	46bd      	mov	sp, r7
 8005992:	bc80      	pop	{r7}
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	40012c00 	.word	0x40012c00
 800599c:	40013400 	.word	0x40013400

080059a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b087      	sub	sp, #28
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a1b      	ldr	r3, [r3, #32]
 80059b4:	f023 0210 	bic.w	r2, r3, #16
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	021b      	lsls	r3, r3, #8
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	f023 0320 	bic.w	r3, r3, #32
 80059ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	011b      	lsls	r3, r3, #4
 80059f2:	697a      	ldr	r2, [r7, #20]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a21      	ldr	r2, [pc, #132]	@ (8005a80 <TIM_OC2_SetConfig+0xe0>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d003      	beq.n	8005a08 <TIM_OC2_SetConfig+0x68>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a20      	ldr	r2, [pc, #128]	@ (8005a84 <TIM_OC2_SetConfig+0xe4>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d10d      	bne.n	8005a24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	011b      	lsls	r3, r3, #4
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a16      	ldr	r2, [pc, #88]	@ (8005a80 <TIM_OC2_SetConfig+0xe0>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d003      	beq.n	8005a34 <TIM_OC2_SetConfig+0x94>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a15      	ldr	r2, [pc, #84]	@ (8005a84 <TIM_OC2_SetConfig+0xe4>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d113      	bne.n	8005a5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	695b      	ldr	r3, [r3, #20]
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	693a      	ldr	r2, [r7, #16]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	693a      	ldr	r2, [r7, #16]
 8005a60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	685a      	ldr	r2, [r3, #4]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	621a      	str	r2, [r3, #32]
}
 8005a76:	bf00      	nop
 8005a78:	371c      	adds	r7, #28
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bc80      	pop	{r7}
 8005a7e:	4770      	bx	lr
 8005a80:	40012c00 	.word	0x40012c00
 8005a84:	40013400 	.word	0x40013400

08005a88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b087      	sub	sp, #28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a1b      	ldr	r3, [r3, #32]
 8005a9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	69db      	ldr	r3, [r3, #28]
 8005aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f023 0303 	bic.w	r3, r3, #3
 8005abe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ad0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	021b      	lsls	r3, r3, #8
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a21      	ldr	r2, [pc, #132]	@ (8005b68 <TIM_OC3_SetConfig+0xe0>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d003      	beq.n	8005aee <TIM_OC3_SetConfig+0x66>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a20      	ldr	r2, [pc, #128]	@ (8005b6c <TIM_OC3_SetConfig+0xe4>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d10d      	bne.n	8005b0a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005af4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	021b      	lsls	r3, r3, #8
 8005afc:	697a      	ldr	r2, [r7, #20]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a16      	ldr	r2, [pc, #88]	@ (8005b68 <TIM_OC3_SetConfig+0xe0>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d003      	beq.n	8005b1a <TIM_OC3_SetConfig+0x92>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a15      	ldr	r2, [pc, #84]	@ (8005b6c <TIM_OC3_SetConfig+0xe4>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d113      	bne.n	8005b42 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	011b      	lsls	r3, r3, #4
 8005b30:	693a      	ldr	r2, [r7, #16]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	011b      	lsls	r3, r3, #4
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	693a      	ldr	r2, [r7, #16]
 8005b46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	685a      	ldr	r2, [r3, #4]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	697a      	ldr	r2, [r7, #20]
 8005b5a:	621a      	str	r2, [r3, #32]
}
 8005b5c:	bf00      	nop
 8005b5e:	371c      	adds	r7, #28
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bc80      	pop	{r7}
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	40012c00 	.word	0x40012c00
 8005b6c:	40013400 	.word	0x40013400

08005b70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b087      	sub	sp, #28
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a1b      	ldr	r3, [r3, #32]
 8005b84:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	021b      	lsls	r3, r3, #8
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005bba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	031b      	lsls	r3, r3, #12
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a11      	ldr	r2, [pc, #68]	@ (8005c10 <TIM_OC4_SetConfig+0xa0>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d003      	beq.n	8005bd8 <TIM_OC4_SetConfig+0x68>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a10      	ldr	r2, [pc, #64]	@ (8005c14 <TIM_OC4_SetConfig+0xa4>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d109      	bne.n	8005bec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005bde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	695b      	ldr	r3, [r3, #20]
 8005be4:	019b      	lsls	r3, r3, #6
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	685a      	ldr	r2, [r3, #4]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	693a      	ldr	r2, [r7, #16]
 8005c04:	621a      	str	r2, [r3, #32]
}
 8005c06:	bf00      	nop
 8005c08:	371c      	adds	r7, #28
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bc80      	pop	{r7}
 8005c0e:	4770      	bx	lr
 8005c10:	40012c00 	.word	0x40012c00
 8005c14:	40013400 	.word	0x40013400

08005c18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b087      	sub	sp, #28
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6a1b      	ldr	r3, [r3, #32]
 8005c28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	f023 0201 	bic.w	r2, r3, #1
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	011b      	lsls	r3, r3, #4
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f023 030a 	bic.w	r3, r3, #10
 8005c54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	621a      	str	r2, [r3, #32]
}
 8005c6a:	bf00      	nop
 8005c6c:	371c      	adds	r7, #28
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bc80      	pop	{r7}
 8005c72:	4770      	bx	lr

08005c74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b087      	sub	sp, #28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6a1b      	ldr	r3, [r3, #32]
 8005c84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	f023 0210 	bic.w	r2, r3, #16
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	031b      	lsls	r3, r3, #12
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005cb0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	011b      	lsls	r3, r3, #4
 8005cb6:	697a      	ldr	r2, [r7, #20]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	621a      	str	r2, [r3, #32]
}
 8005cc8:	bf00      	nop
 8005cca:	371c      	adds	r7, #28
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bc80      	pop	{r7}
 8005cd0:	4770      	bx	lr

08005cd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b085      	sub	sp, #20
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
 8005cda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ce8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cea:	683a      	ldr	r2, [r7, #0]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	f043 0307 	orr.w	r3, r3, #7
 8005cf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	609a      	str	r2, [r3, #8]
}
 8005cfc:	bf00      	nop
 8005cfe:	3714      	adds	r7, #20
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bc80      	pop	{r7}
 8005d04:	4770      	bx	lr

08005d06 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d06:	b480      	push	{r7}
 8005d08:	b087      	sub	sp, #28
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	60f8      	str	r0, [r7, #12]
 8005d0e:	60b9      	str	r1, [r7, #8]
 8005d10:	607a      	str	r2, [r7, #4]
 8005d12:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d20:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	021a      	lsls	r2, r3, #8
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	431a      	orrs	r2, r3
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	609a      	str	r2, [r3, #8]
}
 8005d3a:	bf00      	nop
 8005d3c:	371c      	adds	r7, #28
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bc80      	pop	{r7}
 8005d42:	4770      	bx	lr

08005d44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b087      	sub	sp, #28
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	f003 031f 	and.w	r3, r3, #31
 8005d56:	2201      	movs	r2, #1
 8005d58:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6a1a      	ldr	r2, [r3, #32]
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	43db      	mvns	r3, r3
 8005d66:	401a      	ands	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6a1a      	ldr	r2, [r3, #32]
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	f003 031f 	and.w	r3, r3, #31
 8005d76:	6879      	ldr	r1, [r7, #4]
 8005d78:	fa01 f303 	lsl.w	r3, r1, r3
 8005d7c:	431a      	orrs	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	621a      	str	r2, [r3, #32]
}
 8005d82:	bf00      	nop
 8005d84:	371c      	adds	r7, #28
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bc80      	pop	{r7}
 8005d8a:	4770      	bx	lr

08005d8c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d109      	bne.n	8005db0 <HAL_TIMEx_PWMN_Start+0x24>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	bf14      	ite	ne
 8005da8:	2301      	movne	r3, #1
 8005daa:	2300      	moveq	r3, #0
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	e022      	b.n	8005df6 <HAL_TIMEx_PWMN_Start+0x6a>
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	2b04      	cmp	r3, #4
 8005db4:	d109      	bne.n	8005dca <HAL_TIMEx_PWMN_Start+0x3e>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	bf14      	ite	ne
 8005dc2:	2301      	movne	r3, #1
 8005dc4:	2300      	moveq	r3, #0
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	e015      	b.n	8005df6 <HAL_TIMEx_PWMN_Start+0x6a>
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	2b08      	cmp	r3, #8
 8005dce:	d109      	bne.n	8005de4 <HAL_TIMEx_PWMN_Start+0x58>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	bf14      	ite	ne
 8005ddc:	2301      	movne	r3, #1
 8005dde:	2300      	moveq	r3, #0
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	e008      	b.n	8005df6 <HAL_TIMEx_PWMN_Start+0x6a>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	bf14      	ite	ne
 8005df0:	2301      	movne	r3, #1
 8005df2:	2300      	moveq	r3, #0
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d001      	beq.n	8005dfe <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e063      	b.n	8005ec6 <HAL_TIMEx_PWMN_Start+0x13a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d104      	bne.n	8005e0e <HAL_TIMEx_PWMN_Start+0x82>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2202      	movs	r2, #2
 8005e08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e0c:	e013      	b.n	8005e36 <HAL_TIMEx_PWMN_Start+0xaa>
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b04      	cmp	r3, #4
 8005e12:	d104      	bne.n	8005e1e <HAL_TIMEx_PWMN_Start+0x92>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2202      	movs	r2, #2
 8005e18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e1c:	e00b      	b.n	8005e36 <HAL_TIMEx_PWMN_Start+0xaa>
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	2b08      	cmp	r3, #8
 8005e22:	d104      	bne.n	8005e2e <HAL_TIMEx_PWMN_Start+0xa2>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2202      	movs	r2, #2
 8005e28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e2c:	e003      	b.n	8005e36 <HAL_TIMEx_PWMN_Start+0xaa>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2202      	movs	r2, #2
 8005e32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2204      	movs	r2, #4
 8005e3c:	6839      	ldr	r1, [r7, #0]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f000 f91f 	bl	8006082 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e52:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a1d      	ldr	r2, [pc, #116]	@ (8005ed0 <HAL_TIMEx_PWMN_Start+0x144>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d018      	beq.n	8005e90 <HAL_TIMEx_PWMN_Start+0x104>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a1c      	ldr	r2, [pc, #112]	@ (8005ed4 <HAL_TIMEx_PWMN_Start+0x148>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d013      	beq.n	8005e90 <HAL_TIMEx_PWMN_Start+0x104>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e70:	d00e      	beq.n	8005e90 <HAL_TIMEx_PWMN_Start+0x104>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a18      	ldr	r2, [pc, #96]	@ (8005ed8 <HAL_TIMEx_PWMN_Start+0x14c>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d009      	beq.n	8005e90 <HAL_TIMEx_PWMN_Start+0x104>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a16      	ldr	r2, [pc, #88]	@ (8005edc <HAL_TIMEx_PWMN_Start+0x150>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d004      	beq.n	8005e90 <HAL_TIMEx_PWMN_Start+0x104>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a15      	ldr	r2, [pc, #84]	@ (8005ee0 <HAL_TIMEx_PWMN_Start+0x154>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d111      	bne.n	8005eb4 <HAL_TIMEx_PWMN_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f003 0307 	and.w	r3, r3, #7
 8005e9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2b06      	cmp	r3, #6
 8005ea0:	d010      	beq.n	8005ec4 <HAL_TIMEx_PWMN_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f042 0201 	orr.w	r2, r2, #1
 8005eb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eb2:	e007      	b.n	8005ec4 <HAL_TIMEx_PWMN_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f042 0201 	orr.w	r2, r2, #1
 8005ec2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	40012c00 	.word	0x40012c00
 8005ed4:	40013400 	.word	0x40013400
 8005ed8:	40000400 	.word	0x40000400
 8005edc:	40000800 	.word	0x40000800
 8005ee0:	40000c00 	.word	0x40000c00

08005ee4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d101      	bne.n	8005efc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ef8:	2302      	movs	r3, #2
 8005efa:	e050      	b.n	8005f9e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2202      	movs	r2, #2
 8005f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a1b      	ldr	r2, [pc, #108]	@ (8005fa8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d018      	beq.n	8005f72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a19      	ldr	r2, [pc, #100]	@ (8005fac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d013      	beq.n	8005f72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f52:	d00e      	beq.n	8005f72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a15      	ldr	r2, [pc, #84]	@ (8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d009      	beq.n	8005f72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a14      	ldr	r2, [pc, #80]	@ (8005fb4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d004      	beq.n	8005f72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a12      	ldr	r2, [pc, #72]	@ (8005fb8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d10c      	bne.n	8005f8c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3714      	adds	r7, #20
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bc80      	pop	{r7}
 8005fa6:	4770      	bx	lr
 8005fa8:	40012c00 	.word	0x40012c00
 8005fac:	40013400 	.word	0x40013400
 8005fb0:	40000400 	.word	0x40000400
 8005fb4:	40000800 	.word	0x40000800
 8005fb8:	40000c00 	.word	0x40000c00

08005fbc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d101      	bne.n	8005fd8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	e03d      	b.n	8006054 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	4313      	orrs	r3, r2
 8006008:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4313      	orrs	r3, r2
 8006016:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	4313      	orrs	r3, r2
 8006024:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	695b      	ldr	r3, [r3, #20]
 8006030:	4313      	orrs	r3, r2
 8006032:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	69db      	ldr	r3, [r3, #28]
 800603e:	4313      	orrs	r3, r2
 8006040:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3714      	adds	r7, #20
 8006058:	46bd      	mov	sp, r7
 800605a:	bc80      	pop	{r7}
 800605c:	4770      	bx	lr

0800605e <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800605e:	b480      	push	{r7}
 8006060:	b083      	sub	sp, #12
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006066:	bf00      	nop
 8006068:	370c      	adds	r7, #12
 800606a:	46bd      	mov	sp, r7
 800606c:	bc80      	pop	{r7}
 800606e:	4770      	bx	lr

08006070 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	bc80      	pop	{r7}
 8006080:	4770      	bx	lr

08006082 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006082:	b480      	push	{r7}
 8006084:	b087      	sub	sp, #28
 8006086:	af00      	add	r7, sp, #0
 8006088:	60f8      	str	r0, [r7, #12]
 800608a:	60b9      	str	r1, [r7, #8]
 800608c:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	f003 030f 	and.w	r3, r3, #15
 8006094:	2204      	movs	r2, #4
 8006096:	fa02 f303 	lsl.w	r3, r2, r3
 800609a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6a1a      	ldr	r2, [r3, #32]
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	43db      	mvns	r3, r3
 80060a4:	401a      	ands	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6a1a      	ldr	r2, [r3, #32]
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	f003 030f 	and.w	r3, r3, #15
 80060b4:	6879      	ldr	r1, [r7, #4]
 80060b6:	fa01 f303 	lsl.w	r3, r1, r3
 80060ba:	431a      	orrs	r2, r3
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	621a      	str	r2, [r3, #32]
}
 80060c0:	bf00      	nop
 80060c2:	371c      	adds	r7, #28
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bc80      	pop	{r7}
 80060c8:	4770      	bx	lr

080060ca <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060ca:	b580      	push	{r7, lr}
 80060cc:	b082      	sub	sp, #8
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d101      	bne.n	80060dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	e042      	b.n	8006162 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d106      	bne.n	80060f6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f7fb fbd9 	bl	80018a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2224      	movs	r2, #36	@ 0x24
 80060fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68da      	ldr	r2, [r3, #12]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800610c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fdb8 	bl	8006c84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	691a      	ldr	r2, [r3, #16]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006122:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	695a      	ldr	r2, [r3, #20]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006132:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68da      	ldr	r2, [r3, #12]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006142:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2220      	movs	r2, #32
 800614e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2220      	movs	r2, #32
 8006156:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3708      	adds	r7, #8
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800616a:	b580      	push	{r7, lr}
 800616c:	b08a      	sub	sp, #40	@ 0x28
 800616e:	af02      	add	r7, sp, #8
 8006170:	60f8      	str	r0, [r7, #12]
 8006172:	60b9      	str	r1, [r7, #8]
 8006174:	603b      	str	r3, [r7, #0]
 8006176:	4613      	mov	r3, r2
 8006178:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800617a:	2300      	movs	r3, #0
 800617c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006184:	b2db      	uxtb	r3, r3
 8006186:	2b20      	cmp	r3, #32
 8006188:	d175      	bne.n	8006276 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d002      	beq.n	8006196 <HAL_UART_Transmit+0x2c>
 8006190:	88fb      	ldrh	r3, [r7, #6]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d101      	bne.n	800619a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e06e      	b.n	8006278 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2221      	movs	r2, #33	@ 0x21
 80061a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061a8:	f7fb fca6 	bl	8001af8 <HAL_GetTick>
 80061ac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	88fa      	ldrh	r2, [r7, #6]
 80061b2:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	88fa      	ldrh	r2, [r7, #6]
 80061b8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061c2:	d108      	bne.n	80061d6 <HAL_UART_Transmit+0x6c>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d104      	bne.n	80061d6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80061cc:	2300      	movs	r3, #0
 80061ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	61bb      	str	r3, [r7, #24]
 80061d4:	e003      	b.n	80061de <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061da:	2300      	movs	r3, #0
 80061dc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80061de:	e02e      	b.n	800623e <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	2200      	movs	r2, #0
 80061e8:	2180      	movs	r1, #128	@ 0x80
 80061ea:	68f8      	ldr	r0, [r7, #12]
 80061ec:	f000 fb1d 	bl	800682a <UART_WaitOnFlagUntilTimeout>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d005      	beq.n	8006202 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2220      	movs	r2, #32
 80061fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80061fe:	2303      	movs	r3, #3
 8006200:	e03a      	b.n	8006278 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d10b      	bne.n	8006220 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	881b      	ldrh	r3, [r3, #0]
 800620c:	461a      	mov	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006216:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	3302      	adds	r3, #2
 800621c:	61bb      	str	r3, [r7, #24]
 800621e:	e007      	b.n	8006230 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	781a      	ldrb	r2, [r3, #0]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	3301      	adds	r3, #1
 800622e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006234:	b29b      	uxth	r3, r3
 8006236:	3b01      	subs	r3, #1
 8006238:	b29a      	uxth	r2, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006242:	b29b      	uxth	r3, r3
 8006244:	2b00      	cmp	r3, #0
 8006246:	d1cb      	bne.n	80061e0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	9300      	str	r3, [sp, #0]
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	2200      	movs	r2, #0
 8006250:	2140      	movs	r1, #64	@ 0x40
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f000 fae9 	bl	800682a <UART_WaitOnFlagUntilTimeout>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d005      	beq.n	800626a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2220      	movs	r2, #32
 8006262:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006266:	2303      	movs	r3, #3
 8006268:	e006      	b.n	8006278 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2220      	movs	r2, #32
 800626e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006272:	2300      	movs	r3, #0
 8006274:	e000      	b.n	8006278 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006276:	2302      	movs	r3, #2
  }
}
 8006278:	4618      	mov	r0, r3
 800627a:	3720      	adds	r7, #32
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	4613      	mov	r3, r2
 800628c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006294:	b2db      	uxtb	r3, r3
 8006296:	2b20      	cmp	r3, #32
 8006298:	d112      	bne.n	80062c0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d002      	beq.n	80062a6 <HAL_UART_Receive_IT+0x26>
 80062a0:	88fb      	ldrh	r3, [r7, #6]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d101      	bne.n	80062aa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e00b      	b.n	80062c2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2200      	movs	r2, #0
 80062ae:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80062b0:	88fb      	ldrh	r3, [r7, #6]
 80062b2:	461a      	mov	r2, r3
 80062b4:	68b9      	ldr	r1, [r7, #8]
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f000 fb10 	bl	80068dc <UART_Start_Receive_IT>
 80062bc:	4603      	mov	r3, r0
 80062be:	e000      	b.n	80062c2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80062c0:	2302      	movs	r3, #2
  }
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
	...

080062cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b0ba      	sub	sp, #232	@ 0xe8
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80062f2:	2300      	movs	r3, #0
 80062f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80062f8:	2300      	movs	r3, #0
 80062fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80062fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006302:	f003 030f 	and.w	r3, r3, #15
 8006306:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800630a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800630e:	2b00      	cmp	r3, #0
 8006310:	d10f      	bne.n	8006332 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006316:	f003 0320 	and.w	r3, r3, #32
 800631a:	2b00      	cmp	r3, #0
 800631c:	d009      	beq.n	8006332 <HAL_UART_IRQHandler+0x66>
 800631e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006322:	f003 0320 	and.w	r3, r3, #32
 8006326:	2b00      	cmp	r3, #0
 8006328:	d003      	beq.n	8006332 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 fbec 	bl	8006b08 <UART_Receive_IT>
      return;
 8006330:	e25b      	b.n	80067ea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006332:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006336:	2b00      	cmp	r3, #0
 8006338:	f000 80de 	beq.w	80064f8 <HAL_UART_IRQHandler+0x22c>
 800633c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006340:	f003 0301 	and.w	r3, r3, #1
 8006344:	2b00      	cmp	r3, #0
 8006346:	d106      	bne.n	8006356 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800634c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006350:	2b00      	cmp	r3, #0
 8006352:	f000 80d1 	beq.w	80064f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00b      	beq.n	800637a <HAL_UART_IRQHandler+0xae>
 8006362:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006366:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800636a:	2b00      	cmp	r3, #0
 800636c:	d005      	beq.n	800637a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006372:	f043 0201 	orr.w	r2, r3, #1
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800637a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800637e:	f003 0304 	and.w	r3, r3, #4
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00b      	beq.n	800639e <HAL_UART_IRQHandler+0xd2>
 8006386:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800638a:	f003 0301 	and.w	r3, r3, #1
 800638e:	2b00      	cmp	r3, #0
 8006390:	d005      	beq.n	800639e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006396:	f043 0202 	orr.w	r2, r3, #2
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800639e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063a2:	f003 0302 	and.w	r3, r3, #2
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00b      	beq.n	80063c2 <HAL_UART_IRQHandler+0xf6>
 80063aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063ae:	f003 0301 	and.w	r3, r3, #1
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d005      	beq.n	80063c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ba:	f043 0204 	orr.w	r2, r3, #4
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80063c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063c6:	f003 0308 	and.w	r3, r3, #8
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d011      	beq.n	80063f2 <HAL_UART_IRQHandler+0x126>
 80063ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063d2:	f003 0320 	and.w	r3, r3, #32
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d105      	bne.n	80063e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80063da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063de:	f003 0301 	and.w	r3, r3, #1
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d005      	beq.n	80063f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ea:	f043 0208 	orr.w	r2, r3, #8
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	f000 81f2 	beq.w	80067e0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80063fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006400:	f003 0320 	and.w	r3, r3, #32
 8006404:	2b00      	cmp	r3, #0
 8006406:	d008      	beq.n	800641a <HAL_UART_IRQHandler+0x14e>
 8006408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800640c:	f003 0320 	and.w	r3, r3, #32
 8006410:	2b00      	cmp	r3, #0
 8006412:	d002      	beq.n	800641a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 fb77 	bl	8006b08 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	695b      	ldr	r3, [r3, #20]
 8006420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006424:	2b00      	cmp	r3, #0
 8006426:	bf14      	ite	ne
 8006428:	2301      	movne	r3, #1
 800642a:	2300      	moveq	r3, #0
 800642c:	b2db      	uxtb	r3, r3
 800642e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006436:	f003 0308 	and.w	r3, r3, #8
 800643a:	2b00      	cmp	r3, #0
 800643c:	d103      	bne.n	8006446 <HAL_UART_IRQHandler+0x17a>
 800643e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006442:	2b00      	cmp	r3, #0
 8006444:	d04f      	beq.n	80064e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 fa81 	bl	800694e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006456:	2b00      	cmp	r3, #0
 8006458:	d041      	beq.n	80064de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	3314      	adds	r3, #20
 8006460:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006464:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006468:	e853 3f00 	ldrex	r3, [r3]
 800646c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006470:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006474:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006478:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	3314      	adds	r3, #20
 8006482:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006486:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800648a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006492:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006496:	e841 2300 	strex	r3, r2, [r1]
 800649a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800649e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1d9      	bne.n	800645a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d013      	beq.n	80064d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064b2:	4a7e      	ldr	r2, [pc, #504]	@ (80066ac <HAL_UART_IRQHandler+0x3e0>)
 80064b4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7fb fd0a 	bl	8001ed4 <HAL_DMA_Abort_IT>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d016      	beq.n	80064f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80064d0:	4610      	mov	r0, r2
 80064d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064d4:	e00e      	b.n	80064f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 f993 	bl	8006802 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064dc:	e00a      	b.n	80064f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f98f 	bl	8006802 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064e4:	e006      	b.n	80064f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f98b 	bl	8006802 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80064f2:	e175      	b.n	80067e0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064f4:	bf00      	nop
    return;
 80064f6:	e173      	b.n	80067e0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	f040 814f 	bne.w	80067a0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006506:	f003 0310 	and.w	r3, r3, #16
 800650a:	2b00      	cmp	r3, #0
 800650c:	f000 8148 	beq.w	80067a0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006514:	f003 0310 	and.w	r3, r3, #16
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 8141 	beq.w	80067a0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800651e:	2300      	movs	r3, #0
 8006520:	60bb      	str	r3, [r7, #8]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	60bb      	str	r3, [r7, #8]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	60bb      	str	r3, [r7, #8]
 8006532:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	695b      	ldr	r3, [r3, #20]
 800653a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800653e:	2b00      	cmp	r3, #0
 8006540:	f000 80b6 	beq.w	80066b0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006550:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006554:	2b00      	cmp	r3, #0
 8006556:	f000 8145 	beq.w	80067e4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800655e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006562:	429a      	cmp	r2, r3
 8006564:	f080 813e 	bcs.w	80067e4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800656e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	2b20      	cmp	r3, #32
 8006578:	f000 8088 	beq.w	800668c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	330c      	adds	r3, #12
 8006582:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006586:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800658a:	e853 3f00 	ldrex	r3, [r3]
 800658e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006592:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006596:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800659a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	330c      	adds	r3, #12
 80065a4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80065a8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80065ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80065b4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80065b8:	e841 2300 	strex	r3, r2, [r1]
 80065bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80065c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d1d9      	bne.n	800657c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	3314      	adds	r3, #20
 80065ce:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80065d2:	e853 3f00 	ldrex	r3, [r3]
 80065d6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80065d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80065da:	f023 0301 	bic.w	r3, r3, #1
 80065de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	3314      	adds	r3, #20
 80065e8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80065ec:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80065f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80065f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80065f8:	e841 2300 	strex	r3, r2, [r1]
 80065fc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80065fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1e1      	bne.n	80065c8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	3314      	adds	r3, #20
 800660a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800660e:	e853 3f00 	ldrex	r3, [r3]
 8006612:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006614:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006616:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800661a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	3314      	adds	r3, #20
 8006624:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006628:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800662a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800662e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006630:	e841 2300 	strex	r3, r2, [r1]
 8006634:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006636:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1e3      	bne.n	8006604 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2220      	movs	r2, #32
 8006640:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	330c      	adds	r3, #12
 8006650:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006652:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006654:	e853 3f00 	ldrex	r3, [r3]
 8006658:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800665a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800665c:	f023 0310 	bic.w	r3, r3, #16
 8006660:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	330c      	adds	r3, #12
 800666a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800666e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006670:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006672:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006674:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006676:	e841 2300 	strex	r3, r2, [r1]
 800667a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800667c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1e3      	bne.n	800664a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006686:	4618      	mov	r0, r3
 8006688:	f7fb fbe8 	bl	8001e5c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2202      	movs	r2, #2
 8006690:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800669a:	b29b      	uxth	r3, r3
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	b29b      	uxth	r3, r3
 80066a0:	4619      	mov	r1, r3
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f8b6 	bl	8006814 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80066a8:	e09c      	b.n	80067e4 <HAL_UART_IRQHandler+0x518>
 80066aa:	bf00      	nop
 80066ac:	08006a13 	.word	0x08006a13
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	f000 808e 	beq.w	80067e8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80066cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f000 8089 	beq.w	80067e8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	330c      	adds	r3, #12
 80066dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066e0:	e853 3f00 	ldrex	r3, [r3]
 80066e4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80066e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	330c      	adds	r3, #12
 80066f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80066fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80066fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006700:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006702:	e841 2300 	strex	r3, r2, [r1]
 8006706:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006708:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800670a:	2b00      	cmp	r3, #0
 800670c:	d1e3      	bne.n	80066d6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	3314      	adds	r3, #20
 8006714:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006718:	e853 3f00 	ldrex	r3, [r3]
 800671c:	623b      	str	r3, [r7, #32]
   return(result);
 800671e:	6a3b      	ldr	r3, [r7, #32]
 8006720:	f023 0301 	bic.w	r3, r3, #1
 8006724:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	3314      	adds	r3, #20
 800672e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006732:	633a      	str	r2, [r7, #48]	@ 0x30
 8006734:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006736:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006738:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800673a:	e841 2300 	strex	r3, r2, [r1]
 800673e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1e3      	bne.n	800670e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2220      	movs	r2, #32
 800674a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	330c      	adds	r3, #12
 800675a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	e853 3f00 	ldrex	r3, [r3]
 8006762:	60fb      	str	r3, [r7, #12]
   return(result);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f023 0310 	bic.w	r3, r3, #16
 800676a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	330c      	adds	r3, #12
 8006774:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006778:	61fa      	str	r2, [r7, #28]
 800677a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677c:	69b9      	ldr	r1, [r7, #24]
 800677e:	69fa      	ldr	r2, [r7, #28]
 8006780:	e841 2300 	strex	r3, r2, [r1]
 8006784:	617b      	str	r3, [r7, #20]
   return(result);
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d1e3      	bne.n	8006754 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2202      	movs	r2, #2
 8006790:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006792:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006796:	4619      	mov	r1, r3
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 f83b 	bl	8006814 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800679e:	e023      	b.n	80067e8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80067a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d009      	beq.n	80067c0 <HAL_UART_IRQHandler+0x4f4>
 80067ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d003      	beq.n	80067c0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 f93e 	bl	8006a3a <UART_Transmit_IT>
    return;
 80067be:	e014      	b.n	80067ea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80067c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00e      	beq.n	80067ea <HAL_UART_IRQHandler+0x51e>
 80067cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d008      	beq.n	80067ea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 f97d 	bl	8006ad8 <UART_EndTransmit_IT>
    return;
 80067de:	e004      	b.n	80067ea <HAL_UART_IRQHandler+0x51e>
    return;
 80067e0:	bf00      	nop
 80067e2:	e002      	b.n	80067ea <HAL_UART_IRQHandler+0x51e>
      return;
 80067e4:	bf00      	nop
 80067e6:	e000      	b.n	80067ea <HAL_UART_IRQHandler+0x51e>
      return;
 80067e8:	bf00      	nop
  }
}
 80067ea:	37e8      	adds	r7, #232	@ 0xe8
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80067f8:	bf00      	nop
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bc80      	pop	{r7}
 8006800:	4770      	bx	lr

08006802 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006802:	b480      	push	{r7}
 8006804:	b083      	sub	sp, #12
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800680a:	bf00      	nop
 800680c:	370c      	adds	r7, #12
 800680e:	46bd      	mov	sp, r7
 8006810:	bc80      	pop	{r7}
 8006812:	4770      	bx	lr

08006814 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	460b      	mov	r3, r1
 800681e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	bc80      	pop	{r7}
 8006828:	4770      	bx	lr

0800682a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800682a:	b580      	push	{r7, lr}
 800682c:	b086      	sub	sp, #24
 800682e:	af00      	add	r7, sp, #0
 8006830:	60f8      	str	r0, [r7, #12]
 8006832:	60b9      	str	r1, [r7, #8]
 8006834:	603b      	str	r3, [r7, #0]
 8006836:	4613      	mov	r3, r2
 8006838:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800683a:	e03b      	b.n	80068b4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800683c:	6a3b      	ldr	r3, [r7, #32]
 800683e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006842:	d037      	beq.n	80068b4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006844:	f7fb f958 	bl	8001af8 <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	6a3a      	ldr	r2, [r7, #32]
 8006850:	429a      	cmp	r2, r3
 8006852:	d302      	bcc.n	800685a <UART_WaitOnFlagUntilTimeout+0x30>
 8006854:	6a3b      	ldr	r3, [r7, #32]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d101      	bne.n	800685e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e03a      	b.n	80068d4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	f003 0304 	and.w	r3, r3, #4
 8006868:	2b00      	cmp	r3, #0
 800686a:	d023      	beq.n	80068b4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	2b80      	cmp	r3, #128	@ 0x80
 8006870:	d020      	beq.n	80068b4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	2b40      	cmp	r3, #64	@ 0x40
 8006876:	d01d      	beq.n	80068b4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 0308 	and.w	r3, r3, #8
 8006882:	2b08      	cmp	r3, #8
 8006884:	d116      	bne.n	80068b4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006886:	2300      	movs	r3, #0
 8006888:	617b      	str	r3, [r7, #20]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	617b      	str	r3, [r7, #20]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	617b      	str	r3, [r7, #20]
 800689a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800689c:	68f8      	ldr	r0, [r7, #12]
 800689e:	f000 f856 	bl	800694e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2208      	movs	r2, #8
 80068a6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e00f      	b.n	80068d4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	4013      	ands	r3, r2
 80068be:	68ba      	ldr	r2, [r7, #8]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	bf0c      	ite	eq
 80068c4:	2301      	moveq	r3, #1
 80068c6:	2300      	movne	r3, #0
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	461a      	mov	r2, r3
 80068cc:	79fb      	ldrb	r3, [r7, #7]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d0b4      	beq.n	800683c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068d2:	2300      	movs	r3, #0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3718      	adds	r7, #24
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	4613      	mov	r3, r2
 80068e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	68ba      	ldr	r2, [r7, #8]
 80068ee:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	88fa      	ldrh	r2, [r7, #6]
 80068f4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	88fa      	ldrh	r2, [r7, #6]
 80068fa:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2222      	movs	r2, #34	@ 0x22
 8006906:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d007      	beq.n	8006922 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68da      	ldr	r2, [r3, #12]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006920:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	695a      	ldr	r2, [r3, #20]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f042 0201 	orr.w	r2, r2, #1
 8006930:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68da      	ldr	r2, [r3, #12]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f042 0220 	orr.w	r2, r2, #32
 8006940:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3714      	adds	r7, #20
 8006948:	46bd      	mov	sp, r7
 800694a:	bc80      	pop	{r7}
 800694c:	4770      	bx	lr

0800694e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800694e:	b480      	push	{r7}
 8006950:	b095      	sub	sp, #84	@ 0x54
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	330c      	adds	r3, #12
 800695c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006960:	e853 3f00 	ldrex	r3, [r3]
 8006964:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006968:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800696c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	330c      	adds	r3, #12
 8006974:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006976:	643a      	str	r2, [r7, #64]	@ 0x40
 8006978:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800697c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800697e:	e841 2300 	strex	r3, r2, [r1]
 8006982:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1e5      	bne.n	8006956 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	3314      	adds	r3, #20
 8006990:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006992:	6a3b      	ldr	r3, [r7, #32]
 8006994:	e853 3f00 	ldrex	r3, [r3]
 8006998:	61fb      	str	r3, [r7, #28]
   return(result);
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	f023 0301 	bic.w	r3, r3, #1
 80069a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	3314      	adds	r3, #20
 80069a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069b2:	e841 2300 	strex	r3, r2, [r1]
 80069b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1e5      	bne.n	800698a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d119      	bne.n	80069fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	330c      	adds	r3, #12
 80069cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	e853 3f00 	ldrex	r3, [r3]
 80069d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	f023 0310 	bic.w	r3, r3, #16
 80069dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	330c      	adds	r3, #12
 80069e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069e6:	61ba      	str	r2, [r7, #24]
 80069e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ea:	6979      	ldr	r1, [r7, #20]
 80069ec:	69ba      	ldr	r2, [r7, #24]
 80069ee:	e841 2300 	strex	r3, r2, [r1]
 80069f2:	613b      	str	r3, [r7, #16]
   return(result);
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1e5      	bne.n	80069c6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2220      	movs	r2, #32
 80069fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006a08:	bf00      	nop
 8006a0a:	3754      	adds	r7, #84	@ 0x54
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bc80      	pop	{r7}
 8006a10:	4770      	bx	lr

08006a12 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a12:	b580      	push	{r7, lr}
 8006a14:	b084      	sub	sp, #16
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2200      	movs	r2, #0
 8006a24:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f7ff fee8 	bl	8006802 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a32:	bf00      	nop
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}

08006a3a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	b085      	sub	sp, #20
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	2b21      	cmp	r3, #33	@ 0x21
 8006a4c:	d13e      	bne.n	8006acc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a56:	d114      	bne.n	8006a82 <UART_Transmit_IT+0x48>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d110      	bne.n	8006a82 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a1b      	ldr	r3, [r3, #32]
 8006a64:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	881b      	ldrh	r3, [r3, #0]
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a74:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	1c9a      	adds	r2, r3, #2
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	621a      	str	r2, [r3, #32]
 8006a80:	e008      	b.n	8006a94 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	1c59      	adds	r1, r3, #1
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	6211      	str	r1, [r2, #32]
 8006a8c:	781a      	ldrb	r2, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10f      	bne.n	8006ac8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68da      	ldr	r2, [r3, #12]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006ab6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68da      	ldr	r2, [r3, #12]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ac6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	e000      	b.n	8006ace <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006acc:	2302      	movs	r3, #2
  }
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3714      	adds	r7, #20
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bc80      	pop	{r7}
 8006ad6:	4770      	bx	lr

08006ad8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68da      	ldr	r2, [r3, #12]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006aee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2220      	movs	r2, #32
 8006af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f7ff fe79 	bl	80067f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3708      	adds	r7, #8
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b08c      	sub	sp, #48	@ 0x30
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	2b22      	cmp	r3, #34	@ 0x22
 8006b1a:	f040 80ae 	bne.w	8006c7a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b26:	d117      	bne.n	8006b58 <UART_Receive_IT+0x50>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d113      	bne.n	8006b58 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006b30:	2300      	movs	r3, #0
 8006b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b38:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b4a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b50:	1c9a      	adds	r2, r3, #2
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	629a      	str	r2, [r3, #40]	@ 0x28
 8006b56:	e026      	b.n	8006ba6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b6a:	d007      	beq.n	8006b7c <UART_Receive_IT+0x74>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d10a      	bne.n	8006b8a <UART_Receive_IT+0x82>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d106      	bne.n	8006b8a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	b2da      	uxtb	r2, r3
 8006b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b86:	701a      	strb	r2, [r3, #0]
 8006b88:	e008      	b.n	8006b9c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b96:	b2da      	uxtb	r2, r3
 8006b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b9a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ba0:	1c5a      	adds	r2, r3, #1
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	3b01      	subs	r3, #1
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d15d      	bne.n	8006c76 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68da      	ldr	r2, [r3, #12]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f022 0220 	bic.w	r2, r2, #32
 8006bc8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68da      	ldr	r2, [r3, #12]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006bd8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	695a      	ldr	r2, [r3, #20]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f022 0201 	bic.w	r2, r2, #1
 8006be8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2220      	movs	r2, #32
 8006bee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d135      	bne.n	8006c6c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	330c      	adds	r3, #12
 8006c0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	e853 3f00 	ldrex	r3, [r3]
 8006c14:	613b      	str	r3, [r7, #16]
   return(result);
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	f023 0310 	bic.w	r3, r3, #16
 8006c1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	330c      	adds	r3, #12
 8006c24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c26:	623a      	str	r2, [r7, #32]
 8006c28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2a:	69f9      	ldr	r1, [r7, #28]
 8006c2c:	6a3a      	ldr	r2, [r7, #32]
 8006c2e:	e841 2300 	strex	r3, r2, [r1]
 8006c32:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d1e5      	bne.n	8006c06 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 0310 	and.w	r3, r3, #16
 8006c44:	2b10      	cmp	r3, #16
 8006c46:	d10a      	bne.n	8006c5e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c48:	2300      	movs	r3, #0
 8006c4a:	60fb      	str	r3, [r7, #12]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	60fb      	str	r3, [r7, #12]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	60fb      	str	r3, [r7, #12]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006c62:	4619      	mov	r1, r3
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f7ff fdd5 	bl	8006814 <HAL_UARTEx_RxEventCallback>
 8006c6a:	e002      	b.n	8006c72 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f7f9 ff05 	bl	8000a7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006c72:	2300      	movs	r3, #0
 8006c74:	e002      	b.n	8006c7c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006c76:	2300      	movs	r3, #0
 8006c78:	e000      	b.n	8006c7c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006c7a:	2302      	movs	r3, #2
  }
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3730      	adds	r7, #48	@ 0x30
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	68da      	ldr	r2, [r3, #12]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	430a      	orrs	r2, r1
 8006ca0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	689a      	ldr	r2, [r3, #8]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	431a      	orrs	r2, r3
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	695b      	ldr	r3, [r3, #20]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006cbe:	f023 030c 	bic.w	r3, r3, #12
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	6812      	ldr	r2, [r2, #0]
 8006cc6:	68b9      	ldr	r1, [r7, #8]
 8006cc8:	430b      	orrs	r3, r1
 8006cca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	695b      	ldr	r3, [r3, #20]
 8006cd2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	699a      	ldr	r2, [r3, #24]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	430a      	orrs	r2, r1
 8006ce0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a2c      	ldr	r2, [pc, #176]	@ (8006d98 <UART_SetConfig+0x114>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d103      	bne.n	8006cf4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006cec:	f7fe f8d0 	bl	8004e90 <HAL_RCC_GetPCLK2Freq>
 8006cf0:	60f8      	str	r0, [r7, #12]
 8006cf2:	e002      	b.n	8006cfa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006cf4:	f7fe f8b8 	bl	8004e68 <HAL_RCC_GetPCLK1Freq>
 8006cf8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	4413      	add	r3, r2
 8006d02:	009a      	lsls	r2, r3, #2
 8006d04:	441a      	add	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d10:	4a22      	ldr	r2, [pc, #136]	@ (8006d9c <UART_SetConfig+0x118>)
 8006d12:	fba2 2303 	umull	r2, r3, r2, r3
 8006d16:	095b      	lsrs	r3, r3, #5
 8006d18:	0119      	lsls	r1, r3, #4
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	4413      	add	r3, r2
 8006d22:	009a      	lsls	r2, r3, #2
 8006d24:	441a      	add	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d30:	4b1a      	ldr	r3, [pc, #104]	@ (8006d9c <UART_SetConfig+0x118>)
 8006d32:	fba3 0302 	umull	r0, r3, r3, r2
 8006d36:	095b      	lsrs	r3, r3, #5
 8006d38:	2064      	movs	r0, #100	@ 0x64
 8006d3a:	fb00 f303 	mul.w	r3, r0, r3
 8006d3e:	1ad3      	subs	r3, r2, r3
 8006d40:	011b      	lsls	r3, r3, #4
 8006d42:	3332      	adds	r3, #50	@ 0x32
 8006d44:	4a15      	ldr	r2, [pc, #84]	@ (8006d9c <UART_SetConfig+0x118>)
 8006d46:	fba2 2303 	umull	r2, r3, r2, r3
 8006d4a:	095b      	lsrs	r3, r3, #5
 8006d4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006d50:	4419      	add	r1, r3
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	4613      	mov	r3, r2
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	4413      	add	r3, r2
 8006d5a:	009a      	lsls	r2, r3, #2
 8006d5c:	441a      	add	r2, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d68:	4b0c      	ldr	r3, [pc, #48]	@ (8006d9c <UART_SetConfig+0x118>)
 8006d6a:	fba3 0302 	umull	r0, r3, r3, r2
 8006d6e:	095b      	lsrs	r3, r3, #5
 8006d70:	2064      	movs	r0, #100	@ 0x64
 8006d72:	fb00 f303 	mul.w	r3, r0, r3
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	011b      	lsls	r3, r3, #4
 8006d7a:	3332      	adds	r3, #50	@ 0x32
 8006d7c:	4a07      	ldr	r2, [pc, #28]	@ (8006d9c <UART_SetConfig+0x118>)
 8006d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d82:	095b      	lsrs	r3, r3, #5
 8006d84:	f003 020f 	and.w	r2, r3, #15
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	440a      	add	r2, r1
 8006d8e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006d90:	bf00      	nop
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	40013800 	.word	0x40013800
 8006d9c:	51eb851f 	.word	0x51eb851f

08006da0 <std>:
 8006da0:	2300      	movs	r3, #0
 8006da2:	b510      	push	{r4, lr}
 8006da4:	4604      	mov	r4, r0
 8006da6:	e9c0 3300 	strd	r3, r3, [r0]
 8006daa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006dae:	6083      	str	r3, [r0, #8]
 8006db0:	8181      	strh	r1, [r0, #12]
 8006db2:	6643      	str	r3, [r0, #100]	@ 0x64
 8006db4:	81c2      	strh	r2, [r0, #14]
 8006db6:	6183      	str	r3, [r0, #24]
 8006db8:	4619      	mov	r1, r3
 8006dba:	2208      	movs	r2, #8
 8006dbc:	305c      	adds	r0, #92	@ 0x5c
 8006dbe:	f000 fa01 	bl	80071c4 <memset>
 8006dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8006df8 <std+0x58>)
 8006dc4:	6224      	str	r4, [r4, #32]
 8006dc6:	6263      	str	r3, [r4, #36]	@ 0x24
 8006dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8006dfc <std+0x5c>)
 8006dca:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8006e00 <std+0x60>)
 8006dce:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8006e04 <std+0x64>)
 8006dd2:	6323      	str	r3, [r4, #48]	@ 0x30
 8006dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8006e08 <std+0x68>)
 8006dd6:	429c      	cmp	r4, r3
 8006dd8:	d006      	beq.n	8006de8 <std+0x48>
 8006dda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006dde:	4294      	cmp	r4, r2
 8006de0:	d002      	beq.n	8006de8 <std+0x48>
 8006de2:	33d0      	adds	r3, #208	@ 0xd0
 8006de4:	429c      	cmp	r4, r3
 8006de6:	d105      	bne.n	8006df4 <std+0x54>
 8006de8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006df0:	f000 ba60 	b.w	80072b4 <__retarget_lock_init_recursive>
 8006df4:	bd10      	pop	{r4, pc}
 8006df6:	bf00      	nop
 8006df8:	08007015 	.word	0x08007015
 8006dfc:	08007037 	.word	0x08007037
 8006e00:	0800706f 	.word	0x0800706f
 8006e04:	08007093 	.word	0x08007093
 8006e08:	200005f4 	.word	0x200005f4

08006e0c <stdio_exit_handler>:
 8006e0c:	4a02      	ldr	r2, [pc, #8]	@ (8006e18 <stdio_exit_handler+0xc>)
 8006e0e:	4903      	ldr	r1, [pc, #12]	@ (8006e1c <stdio_exit_handler+0x10>)
 8006e10:	4803      	ldr	r0, [pc, #12]	@ (8006e20 <stdio_exit_handler+0x14>)
 8006e12:	f000 b869 	b.w	8006ee8 <_fwalk_sglue>
 8006e16:	bf00      	nop
 8006e18:	20000018 	.word	0x20000018
 8006e1c:	08007b49 	.word	0x08007b49
 8006e20:	20000028 	.word	0x20000028

08006e24 <cleanup_stdio>:
 8006e24:	6841      	ldr	r1, [r0, #4]
 8006e26:	4b0c      	ldr	r3, [pc, #48]	@ (8006e58 <cleanup_stdio+0x34>)
 8006e28:	b510      	push	{r4, lr}
 8006e2a:	4299      	cmp	r1, r3
 8006e2c:	4604      	mov	r4, r0
 8006e2e:	d001      	beq.n	8006e34 <cleanup_stdio+0x10>
 8006e30:	f000 fe8a 	bl	8007b48 <_fflush_r>
 8006e34:	68a1      	ldr	r1, [r4, #8]
 8006e36:	4b09      	ldr	r3, [pc, #36]	@ (8006e5c <cleanup_stdio+0x38>)
 8006e38:	4299      	cmp	r1, r3
 8006e3a:	d002      	beq.n	8006e42 <cleanup_stdio+0x1e>
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	f000 fe83 	bl	8007b48 <_fflush_r>
 8006e42:	68e1      	ldr	r1, [r4, #12]
 8006e44:	4b06      	ldr	r3, [pc, #24]	@ (8006e60 <cleanup_stdio+0x3c>)
 8006e46:	4299      	cmp	r1, r3
 8006e48:	d004      	beq.n	8006e54 <cleanup_stdio+0x30>
 8006e4a:	4620      	mov	r0, r4
 8006e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e50:	f000 be7a 	b.w	8007b48 <_fflush_r>
 8006e54:	bd10      	pop	{r4, pc}
 8006e56:	bf00      	nop
 8006e58:	200005f4 	.word	0x200005f4
 8006e5c:	2000065c 	.word	0x2000065c
 8006e60:	200006c4 	.word	0x200006c4

08006e64 <global_stdio_init.part.0>:
 8006e64:	b510      	push	{r4, lr}
 8006e66:	4b0b      	ldr	r3, [pc, #44]	@ (8006e94 <global_stdio_init.part.0+0x30>)
 8006e68:	4c0b      	ldr	r4, [pc, #44]	@ (8006e98 <global_stdio_init.part.0+0x34>)
 8006e6a:	4a0c      	ldr	r2, [pc, #48]	@ (8006e9c <global_stdio_init.part.0+0x38>)
 8006e6c:	4620      	mov	r0, r4
 8006e6e:	601a      	str	r2, [r3, #0]
 8006e70:	2104      	movs	r1, #4
 8006e72:	2200      	movs	r2, #0
 8006e74:	f7ff ff94 	bl	8006da0 <std>
 8006e78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	2109      	movs	r1, #9
 8006e80:	f7ff ff8e 	bl	8006da0 <std>
 8006e84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006e88:	2202      	movs	r2, #2
 8006e8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e8e:	2112      	movs	r1, #18
 8006e90:	f7ff bf86 	b.w	8006da0 <std>
 8006e94:	2000072c 	.word	0x2000072c
 8006e98:	200005f4 	.word	0x200005f4
 8006e9c:	08006e0d 	.word	0x08006e0d

08006ea0 <__sfp_lock_acquire>:
 8006ea0:	4801      	ldr	r0, [pc, #4]	@ (8006ea8 <__sfp_lock_acquire+0x8>)
 8006ea2:	f000 ba08 	b.w	80072b6 <__retarget_lock_acquire_recursive>
 8006ea6:	bf00      	nop
 8006ea8:	20000735 	.word	0x20000735

08006eac <__sfp_lock_release>:
 8006eac:	4801      	ldr	r0, [pc, #4]	@ (8006eb4 <__sfp_lock_release+0x8>)
 8006eae:	f000 ba03 	b.w	80072b8 <__retarget_lock_release_recursive>
 8006eb2:	bf00      	nop
 8006eb4:	20000735 	.word	0x20000735

08006eb8 <__sinit>:
 8006eb8:	b510      	push	{r4, lr}
 8006eba:	4604      	mov	r4, r0
 8006ebc:	f7ff fff0 	bl	8006ea0 <__sfp_lock_acquire>
 8006ec0:	6a23      	ldr	r3, [r4, #32]
 8006ec2:	b11b      	cbz	r3, 8006ecc <__sinit+0x14>
 8006ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ec8:	f7ff bff0 	b.w	8006eac <__sfp_lock_release>
 8006ecc:	4b04      	ldr	r3, [pc, #16]	@ (8006ee0 <__sinit+0x28>)
 8006ece:	6223      	str	r3, [r4, #32]
 8006ed0:	4b04      	ldr	r3, [pc, #16]	@ (8006ee4 <__sinit+0x2c>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d1f5      	bne.n	8006ec4 <__sinit+0xc>
 8006ed8:	f7ff ffc4 	bl	8006e64 <global_stdio_init.part.0>
 8006edc:	e7f2      	b.n	8006ec4 <__sinit+0xc>
 8006ede:	bf00      	nop
 8006ee0:	08006e25 	.word	0x08006e25
 8006ee4:	2000072c 	.word	0x2000072c

08006ee8 <_fwalk_sglue>:
 8006ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006eec:	4607      	mov	r7, r0
 8006eee:	4688      	mov	r8, r1
 8006ef0:	4614      	mov	r4, r2
 8006ef2:	2600      	movs	r6, #0
 8006ef4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ef8:	f1b9 0901 	subs.w	r9, r9, #1
 8006efc:	d505      	bpl.n	8006f0a <_fwalk_sglue+0x22>
 8006efe:	6824      	ldr	r4, [r4, #0]
 8006f00:	2c00      	cmp	r4, #0
 8006f02:	d1f7      	bne.n	8006ef4 <_fwalk_sglue+0xc>
 8006f04:	4630      	mov	r0, r6
 8006f06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f0a:	89ab      	ldrh	r3, [r5, #12]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d907      	bls.n	8006f20 <_fwalk_sglue+0x38>
 8006f10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f14:	3301      	adds	r3, #1
 8006f16:	d003      	beq.n	8006f20 <_fwalk_sglue+0x38>
 8006f18:	4629      	mov	r1, r5
 8006f1a:	4638      	mov	r0, r7
 8006f1c:	47c0      	blx	r8
 8006f1e:	4306      	orrs	r6, r0
 8006f20:	3568      	adds	r5, #104	@ 0x68
 8006f22:	e7e9      	b.n	8006ef8 <_fwalk_sglue+0x10>

08006f24 <iprintf>:
 8006f24:	b40f      	push	{r0, r1, r2, r3}
 8006f26:	b507      	push	{r0, r1, r2, lr}
 8006f28:	4906      	ldr	r1, [pc, #24]	@ (8006f44 <iprintf+0x20>)
 8006f2a:	ab04      	add	r3, sp, #16
 8006f2c:	6808      	ldr	r0, [r1, #0]
 8006f2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f32:	6881      	ldr	r1, [r0, #8]
 8006f34:	9301      	str	r3, [sp, #4]
 8006f36:	f000 fadf 	bl	80074f8 <_vfiprintf_r>
 8006f3a:	b003      	add	sp, #12
 8006f3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f40:	b004      	add	sp, #16
 8006f42:	4770      	bx	lr
 8006f44:	20000024 	.word	0x20000024

08006f48 <putchar>:
 8006f48:	4b02      	ldr	r3, [pc, #8]	@ (8006f54 <putchar+0xc>)
 8006f4a:	4601      	mov	r1, r0
 8006f4c:	6818      	ldr	r0, [r3, #0]
 8006f4e:	6882      	ldr	r2, [r0, #8]
 8006f50:	f000 be83 	b.w	8007c5a <_putc_r>
 8006f54:	20000024 	.word	0x20000024

08006f58 <_puts_r>:
 8006f58:	6a03      	ldr	r3, [r0, #32]
 8006f5a:	b570      	push	{r4, r5, r6, lr}
 8006f5c:	4605      	mov	r5, r0
 8006f5e:	460e      	mov	r6, r1
 8006f60:	6884      	ldr	r4, [r0, #8]
 8006f62:	b90b      	cbnz	r3, 8006f68 <_puts_r+0x10>
 8006f64:	f7ff ffa8 	bl	8006eb8 <__sinit>
 8006f68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f6a:	07db      	lsls	r3, r3, #31
 8006f6c:	d405      	bmi.n	8006f7a <_puts_r+0x22>
 8006f6e:	89a3      	ldrh	r3, [r4, #12]
 8006f70:	0598      	lsls	r0, r3, #22
 8006f72:	d402      	bmi.n	8006f7a <_puts_r+0x22>
 8006f74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f76:	f000 f99e 	bl	80072b6 <__retarget_lock_acquire_recursive>
 8006f7a:	89a3      	ldrh	r3, [r4, #12]
 8006f7c:	0719      	lsls	r1, r3, #28
 8006f7e:	d502      	bpl.n	8006f86 <_puts_r+0x2e>
 8006f80:	6923      	ldr	r3, [r4, #16]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d135      	bne.n	8006ff2 <_puts_r+0x9a>
 8006f86:	4621      	mov	r1, r4
 8006f88:	4628      	mov	r0, r5
 8006f8a:	f000 f8c5 	bl	8007118 <__swsetup_r>
 8006f8e:	b380      	cbz	r0, 8006ff2 <_puts_r+0x9a>
 8006f90:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8006f94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f96:	07da      	lsls	r2, r3, #31
 8006f98:	d405      	bmi.n	8006fa6 <_puts_r+0x4e>
 8006f9a:	89a3      	ldrh	r3, [r4, #12]
 8006f9c:	059b      	lsls	r3, r3, #22
 8006f9e:	d402      	bmi.n	8006fa6 <_puts_r+0x4e>
 8006fa0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006fa2:	f000 f989 	bl	80072b8 <__retarget_lock_release_recursive>
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	bd70      	pop	{r4, r5, r6, pc}
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	da04      	bge.n	8006fb8 <_puts_r+0x60>
 8006fae:	69a2      	ldr	r2, [r4, #24]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	dc17      	bgt.n	8006fe4 <_puts_r+0x8c>
 8006fb4:	290a      	cmp	r1, #10
 8006fb6:	d015      	beq.n	8006fe4 <_puts_r+0x8c>
 8006fb8:	6823      	ldr	r3, [r4, #0]
 8006fba:	1c5a      	adds	r2, r3, #1
 8006fbc:	6022      	str	r2, [r4, #0]
 8006fbe:	7019      	strb	r1, [r3, #0]
 8006fc0:	68a3      	ldr	r3, [r4, #8]
 8006fc2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	60a3      	str	r3, [r4, #8]
 8006fca:	2900      	cmp	r1, #0
 8006fcc:	d1ed      	bne.n	8006faa <_puts_r+0x52>
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	da11      	bge.n	8006ff6 <_puts_r+0x9e>
 8006fd2:	4622      	mov	r2, r4
 8006fd4:	210a      	movs	r1, #10
 8006fd6:	4628      	mov	r0, r5
 8006fd8:	f000 f85f 	bl	800709a <__swbuf_r>
 8006fdc:	3001      	adds	r0, #1
 8006fde:	d0d7      	beq.n	8006f90 <_puts_r+0x38>
 8006fe0:	250a      	movs	r5, #10
 8006fe2:	e7d7      	b.n	8006f94 <_puts_r+0x3c>
 8006fe4:	4622      	mov	r2, r4
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	f000 f857 	bl	800709a <__swbuf_r>
 8006fec:	3001      	adds	r0, #1
 8006fee:	d1e7      	bne.n	8006fc0 <_puts_r+0x68>
 8006ff0:	e7ce      	b.n	8006f90 <_puts_r+0x38>
 8006ff2:	3e01      	subs	r6, #1
 8006ff4:	e7e4      	b.n	8006fc0 <_puts_r+0x68>
 8006ff6:	6823      	ldr	r3, [r4, #0]
 8006ff8:	1c5a      	adds	r2, r3, #1
 8006ffa:	6022      	str	r2, [r4, #0]
 8006ffc:	220a      	movs	r2, #10
 8006ffe:	701a      	strb	r2, [r3, #0]
 8007000:	e7ee      	b.n	8006fe0 <_puts_r+0x88>
	...

08007004 <puts>:
 8007004:	4b02      	ldr	r3, [pc, #8]	@ (8007010 <puts+0xc>)
 8007006:	4601      	mov	r1, r0
 8007008:	6818      	ldr	r0, [r3, #0]
 800700a:	f7ff bfa5 	b.w	8006f58 <_puts_r>
 800700e:	bf00      	nop
 8007010:	20000024 	.word	0x20000024

08007014 <__sread>:
 8007014:	b510      	push	{r4, lr}
 8007016:	460c      	mov	r4, r1
 8007018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800701c:	f000 f8fc 	bl	8007218 <_read_r>
 8007020:	2800      	cmp	r0, #0
 8007022:	bfab      	itete	ge
 8007024:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007026:	89a3      	ldrhlt	r3, [r4, #12]
 8007028:	181b      	addge	r3, r3, r0
 800702a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800702e:	bfac      	ite	ge
 8007030:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007032:	81a3      	strhlt	r3, [r4, #12]
 8007034:	bd10      	pop	{r4, pc}

08007036 <__swrite>:
 8007036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800703a:	461f      	mov	r7, r3
 800703c:	898b      	ldrh	r3, [r1, #12]
 800703e:	4605      	mov	r5, r0
 8007040:	05db      	lsls	r3, r3, #23
 8007042:	460c      	mov	r4, r1
 8007044:	4616      	mov	r6, r2
 8007046:	d505      	bpl.n	8007054 <__swrite+0x1e>
 8007048:	2302      	movs	r3, #2
 800704a:	2200      	movs	r2, #0
 800704c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007050:	f000 f8d0 	bl	80071f4 <_lseek_r>
 8007054:	89a3      	ldrh	r3, [r4, #12]
 8007056:	4632      	mov	r2, r6
 8007058:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800705c:	81a3      	strh	r3, [r4, #12]
 800705e:	4628      	mov	r0, r5
 8007060:	463b      	mov	r3, r7
 8007062:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800706a:	f000 b8e7 	b.w	800723c <_write_r>

0800706e <__sseek>:
 800706e:	b510      	push	{r4, lr}
 8007070:	460c      	mov	r4, r1
 8007072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007076:	f000 f8bd 	bl	80071f4 <_lseek_r>
 800707a:	1c43      	adds	r3, r0, #1
 800707c:	89a3      	ldrh	r3, [r4, #12]
 800707e:	bf15      	itete	ne
 8007080:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007082:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007086:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800708a:	81a3      	strheq	r3, [r4, #12]
 800708c:	bf18      	it	ne
 800708e:	81a3      	strhne	r3, [r4, #12]
 8007090:	bd10      	pop	{r4, pc}

08007092 <__sclose>:
 8007092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007096:	f000 b89d 	b.w	80071d4 <_close_r>

0800709a <__swbuf_r>:
 800709a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800709c:	460e      	mov	r6, r1
 800709e:	4614      	mov	r4, r2
 80070a0:	4605      	mov	r5, r0
 80070a2:	b118      	cbz	r0, 80070ac <__swbuf_r+0x12>
 80070a4:	6a03      	ldr	r3, [r0, #32]
 80070a6:	b90b      	cbnz	r3, 80070ac <__swbuf_r+0x12>
 80070a8:	f7ff ff06 	bl	8006eb8 <__sinit>
 80070ac:	69a3      	ldr	r3, [r4, #24]
 80070ae:	60a3      	str	r3, [r4, #8]
 80070b0:	89a3      	ldrh	r3, [r4, #12]
 80070b2:	071a      	lsls	r2, r3, #28
 80070b4:	d501      	bpl.n	80070ba <__swbuf_r+0x20>
 80070b6:	6923      	ldr	r3, [r4, #16]
 80070b8:	b943      	cbnz	r3, 80070cc <__swbuf_r+0x32>
 80070ba:	4621      	mov	r1, r4
 80070bc:	4628      	mov	r0, r5
 80070be:	f000 f82b 	bl	8007118 <__swsetup_r>
 80070c2:	b118      	cbz	r0, 80070cc <__swbuf_r+0x32>
 80070c4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80070c8:	4638      	mov	r0, r7
 80070ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070cc:	6823      	ldr	r3, [r4, #0]
 80070ce:	6922      	ldr	r2, [r4, #16]
 80070d0:	b2f6      	uxtb	r6, r6
 80070d2:	1a98      	subs	r0, r3, r2
 80070d4:	6963      	ldr	r3, [r4, #20]
 80070d6:	4637      	mov	r7, r6
 80070d8:	4283      	cmp	r3, r0
 80070da:	dc05      	bgt.n	80070e8 <__swbuf_r+0x4e>
 80070dc:	4621      	mov	r1, r4
 80070de:	4628      	mov	r0, r5
 80070e0:	f000 fd32 	bl	8007b48 <_fflush_r>
 80070e4:	2800      	cmp	r0, #0
 80070e6:	d1ed      	bne.n	80070c4 <__swbuf_r+0x2a>
 80070e8:	68a3      	ldr	r3, [r4, #8]
 80070ea:	3b01      	subs	r3, #1
 80070ec:	60a3      	str	r3, [r4, #8]
 80070ee:	6823      	ldr	r3, [r4, #0]
 80070f0:	1c5a      	adds	r2, r3, #1
 80070f2:	6022      	str	r2, [r4, #0]
 80070f4:	701e      	strb	r6, [r3, #0]
 80070f6:	6962      	ldr	r2, [r4, #20]
 80070f8:	1c43      	adds	r3, r0, #1
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d004      	beq.n	8007108 <__swbuf_r+0x6e>
 80070fe:	89a3      	ldrh	r3, [r4, #12]
 8007100:	07db      	lsls	r3, r3, #31
 8007102:	d5e1      	bpl.n	80070c8 <__swbuf_r+0x2e>
 8007104:	2e0a      	cmp	r6, #10
 8007106:	d1df      	bne.n	80070c8 <__swbuf_r+0x2e>
 8007108:	4621      	mov	r1, r4
 800710a:	4628      	mov	r0, r5
 800710c:	f000 fd1c 	bl	8007b48 <_fflush_r>
 8007110:	2800      	cmp	r0, #0
 8007112:	d0d9      	beq.n	80070c8 <__swbuf_r+0x2e>
 8007114:	e7d6      	b.n	80070c4 <__swbuf_r+0x2a>
	...

08007118 <__swsetup_r>:
 8007118:	b538      	push	{r3, r4, r5, lr}
 800711a:	4b29      	ldr	r3, [pc, #164]	@ (80071c0 <__swsetup_r+0xa8>)
 800711c:	4605      	mov	r5, r0
 800711e:	6818      	ldr	r0, [r3, #0]
 8007120:	460c      	mov	r4, r1
 8007122:	b118      	cbz	r0, 800712c <__swsetup_r+0x14>
 8007124:	6a03      	ldr	r3, [r0, #32]
 8007126:	b90b      	cbnz	r3, 800712c <__swsetup_r+0x14>
 8007128:	f7ff fec6 	bl	8006eb8 <__sinit>
 800712c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007130:	0719      	lsls	r1, r3, #28
 8007132:	d422      	bmi.n	800717a <__swsetup_r+0x62>
 8007134:	06da      	lsls	r2, r3, #27
 8007136:	d407      	bmi.n	8007148 <__swsetup_r+0x30>
 8007138:	2209      	movs	r2, #9
 800713a:	602a      	str	r2, [r5, #0]
 800713c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007140:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007144:	81a3      	strh	r3, [r4, #12]
 8007146:	e033      	b.n	80071b0 <__swsetup_r+0x98>
 8007148:	0758      	lsls	r0, r3, #29
 800714a:	d512      	bpl.n	8007172 <__swsetup_r+0x5a>
 800714c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800714e:	b141      	cbz	r1, 8007162 <__swsetup_r+0x4a>
 8007150:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007154:	4299      	cmp	r1, r3
 8007156:	d002      	beq.n	800715e <__swsetup_r+0x46>
 8007158:	4628      	mov	r0, r5
 800715a:	f000 f8af 	bl	80072bc <_free_r>
 800715e:	2300      	movs	r3, #0
 8007160:	6363      	str	r3, [r4, #52]	@ 0x34
 8007162:	89a3      	ldrh	r3, [r4, #12]
 8007164:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007168:	81a3      	strh	r3, [r4, #12]
 800716a:	2300      	movs	r3, #0
 800716c:	6063      	str	r3, [r4, #4]
 800716e:	6923      	ldr	r3, [r4, #16]
 8007170:	6023      	str	r3, [r4, #0]
 8007172:	89a3      	ldrh	r3, [r4, #12]
 8007174:	f043 0308 	orr.w	r3, r3, #8
 8007178:	81a3      	strh	r3, [r4, #12]
 800717a:	6923      	ldr	r3, [r4, #16]
 800717c:	b94b      	cbnz	r3, 8007192 <__swsetup_r+0x7a>
 800717e:	89a3      	ldrh	r3, [r4, #12]
 8007180:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007184:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007188:	d003      	beq.n	8007192 <__swsetup_r+0x7a>
 800718a:	4621      	mov	r1, r4
 800718c:	4628      	mov	r0, r5
 800718e:	f000 fd28 	bl	8007be2 <__smakebuf_r>
 8007192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007196:	f013 0201 	ands.w	r2, r3, #1
 800719a:	d00a      	beq.n	80071b2 <__swsetup_r+0x9a>
 800719c:	2200      	movs	r2, #0
 800719e:	60a2      	str	r2, [r4, #8]
 80071a0:	6962      	ldr	r2, [r4, #20]
 80071a2:	4252      	negs	r2, r2
 80071a4:	61a2      	str	r2, [r4, #24]
 80071a6:	6922      	ldr	r2, [r4, #16]
 80071a8:	b942      	cbnz	r2, 80071bc <__swsetup_r+0xa4>
 80071aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80071ae:	d1c5      	bne.n	800713c <__swsetup_r+0x24>
 80071b0:	bd38      	pop	{r3, r4, r5, pc}
 80071b2:	0799      	lsls	r1, r3, #30
 80071b4:	bf58      	it	pl
 80071b6:	6962      	ldrpl	r2, [r4, #20]
 80071b8:	60a2      	str	r2, [r4, #8]
 80071ba:	e7f4      	b.n	80071a6 <__swsetup_r+0x8e>
 80071bc:	2000      	movs	r0, #0
 80071be:	e7f7      	b.n	80071b0 <__swsetup_r+0x98>
 80071c0:	20000024 	.word	0x20000024

080071c4 <memset>:
 80071c4:	4603      	mov	r3, r0
 80071c6:	4402      	add	r2, r0
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d100      	bne.n	80071ce <memset+0xa>
 80071cc:	4770      	bx	lr
 80071ce:	f803 1b01 	strb.w	r1, [r3], #1
 80071d2:	e7f9      	b.n	80071c8 <memset+0x4>

080071d4 <_close_r>:
 80071d4:	b538      	push	{r3, r4, r5, lr}
 80071d6:	2300      	movs	r3, #0
 80071d8:	4d05      	ldr	r5, [pc, #20]	@ (80071f0 <_close_r+0x1c>)
 80071da:	4604      	mov	r4, r0
 80071dc:	4608      	mov	r0, r1
 80071de:	602b      	str	r3, [r5, #0]
 80071e0:	f7fa f839 	bl	8001256 <_close>
 80071e4:	1c43      	adds	r3, r0, #1
 80071e6:	d102      	bne.n	80071ee <_close_r+0x1a>
 80071e8:	682b      	ldr	r3, [r5, #0]
 80071ea:	b103      	cbz	r3, 80071ee <_close_r+0x1a>
 80071ec:	6023      	str	r3, [r4, #0]
 80071ee:	bd38      	pop	{r3, r4, r5, pc}
 80071f0:	20000730 	.word	0x20000730

080071f4 <_lseek_r>:
 80071f4:	b538      	push	{r3, r4, r5, lr}
 80071f6:	4604      	mov	r4, r0
 80071f8:	4608      	mov	r0, r1
 80071fa:	4611      	mov	r1, r2
 80071fc:	2200      	movs	r2, #0
 80071fe:	4d05      	ldr	r5, [pc, #20]	@ (8007214 <_lseek_r+0x20>)
 8007200:	602a      	str	r2, [r5, #0]
 8007202:	461a      	mov	r2, r3
 8007204:	f7fa f84b 	bl	800129e <_lseek>
 8007208:	1c43      	adds	r3, r0, #1
 800720a:	d102      	bne.n	8007212 <_lseek_r+0x1e>
 800720c:	682b      	ldr	r3, [r5, #0]
 800720e:	b103      	cbz	r3, 8007212 <_lseek_r+0x1e>
 8007210:	6023      	str	r3, [r4, #0]
 8007212:	bd38      	pop	{r3, r4, r5, pc}
 8007214:	20000730 	.word	0x20000730

08007218 <_read_r>:
 8007218:	b538      	push	{r3, r4, r5, lr}
 800721a:	4604      	mov	r4, r0
 800721c:	4608      	mov	r0, r1
 800721e:	4611      	mov	r1, r2
 8007220:	2200      	movs	r2, #0
 8007222:	4d05      	ldr	r5, [pc, #20]	@ (8007238 <_read_r+0x20>)
 8007224:	602a      	str	r2, [r5, #0]
 8007226:	461a      	mov	r2, r3
 8007228:	f7f9 ffdc 	bl	80011e4 <_read>
 800722c:	1c43      	adds	r3, r0, #1
 800722e:	d102      	bne.n	8007236 <_read_r+0x1e>
 8007230:	682b      	ldr	r3, [r5, #0]
 8007232:	b103      	cbz	r3, 8007236 <_read_r+0x1e>
 8007234:	6023      	str	r3, [r4, #0]
 8007236:	bd38      	pop	{r3, r4, r5, pc}
 8007238:	20000730 	.word	0x20000730

0800723c <_write_r>:
 800723c:	b538      	push	{r3, r4, r5, lr}
 800723e:	4604      	mov	r4, r0
 8007240:	4608      	mov	r0, r1
 8007242:	4611      	mov	r1, r2
 8007244:	2200      	movs	r2, #0
 8007246:	4d05      	ldr	r5, [pc, #20]	@ (800725c <_write_r+0x20>)
 8007248:	602a      	str	r2, [r5, #0]
 800724a:	461a      	mov	r2, r3
 800724c:	f7f9 ffe7 	bl	800121e <_write>
 8007250:	1c43      	adds	r3, r0, #1
 8007252:	d102      	bne.n	800725a <_write_r+0x1e>
 8007254:	682b      	ldr	r3, [r5, #0]
 8007256:	b103      	cbz	r3, 800725a <_write_r+0x1e>
 8007258:	6023      	str	r3, [r4, #0]
 800725a:	bd38      	pop	{r3, r4, r5, pc}
 800725c:	20000730 	.word	0x20000730

08007260 <__errno>:
 8007260:	4b01      	ldr	r3, [pc, #4]	@ (8007268 <__errno+0x8>)
 8007262:	6818      	ldr	r0, [r3, #0]
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	20000024 	.word	0x20000024

0800726c <__libc_init_array>:
 800726c:	b570      	push	{r4, r5, r6, lr}
 800726e:	2600      	movs	r6, #0
 8007270:	4d0c      	ldr	r5, [pc, #48]	@ (80072a4 <__libc_init_array+0x38>)
 8007272:	4c0d      	ldr	r4, [pc, #52]	@ (80072a8 <__libc_init_array+0x3c>)
 8007274:	1b64      	subs	r4, r4, r5
 8007276:	10a4      	asrs	r4, r4, #2
 8007278:	42a6      	cmp	r6, r4
 800727a:	d109      	bne.n	8007290 <__libc_init_array+0x24>
 800727c:	f000 fd62 	bl	8007d44 <_init>
 8007280:	2600      	movs	r6, #0
 8007282:	4d0a      	ldr	r5, [pc, #40]	@ (80072ac <__libc_init_array+0x40>)
 8007284:	4c0a      	ldr	r4, [pc, #40]	@ (80072b0 <__libc_init_array+0x44>)
 8007286:	1b64      	subs	r4, r4, r5
 8007288:	10a4      	asrs	r4, r4, #2
 800728a:	42a6      	cmp	r6, r4
 800728c:	d105      	bne.n	800729a <__libc_init_array+0x2e>
 800728e:	bd70      	pop	{r4, r5, r6, pc}
 8007290:	f855 3b04 	ldr.w	r3, [r5], #4
 8007294:	4798      	blx	r3
 8007296:	3601      	adds	r6, #1
 8007298:	e7ee      	b.n	8007278 <__libc_init_array+0xc>
 800729a:	f855 3b04 	ldr.w	r3, [r5], #4
 800729e:	4798      	blx	r3
 80072a0:	3601      	adds	r6, #1
 80072a2:	e7f2      	b.n	800728a <__libc_init_array+0x1e>
 80072a4:	08007ed8 	.word	0x08007ed8
 80072a8:	08007ed8 	.word	0x08007ed8
 80072ac:	08007ed8 	.word	0x08007ed8
 80072b0:	08007edc 	.word	0x08007edc

080072b4 <__retarget_lock_init_recursive>:
 80072b4:	4770      	bx	lr

080072b6 <__retarget_lock_acquire_recursive>:
 80072b6:	4770      	bx	lr

080072b8 <__retarget_lock_release_recursive>:
 80072b8:	4770      	bx	lr
	...

080072bc <_free_r>:
 80072bc:	b538      	push	{r3, r4, r5, lr}
 80072be:	4605      	mov	r5, r0
 80072c0:	2900      	cmp	r1, #0
 80072c2:	d040      	beq.n	8007346 <_free_r+0x8a>
 80072c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072c8:	1f0c      	subs	r4, r1, #4
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	bfb8      	it	lt
 80072ce:	18e4      	addlt	r4, r4, r3
 80072d0:	f000 f8de 	bl	8007490 <__malloc_lock>
 80072d4:	4a1c      	ldr	r2, [pc, #112]	@ (8007348 <_free_r+0x8c>)
 80072d6:	6813      	ldr	r3, [r2, #0]
 80072d8:	b933      	cbnz	r3, 80072e8 <_free_r+0x2c>
 80072da:	6063      	str	r3, [r4, #4]
 80072dc:	6014      	str	r4, [r2, #0]
 80072de:	4628      	mov	r0, r5
 80072e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072e4:	f000 b8da 	b.w	800749c <__malloc_unlock>
 80072e8:	42a3      	cmp	r3, r4
 80072ea:	d908      	bls.n	80072fe <_free_r+0x42>
 80072ec:	6820      	ldr	r0, [r4, #0]
 80072ee:	1821      	adds	r1, r4, r0
 80072f0:	428b      	cmp	r3, r1
 80072f2:	bf01      	itttt	eq
 80072f4:	6819      	ldreq	r1, [r3, #0]
 80072f6:	685b      	ldreq	r3, [r3, #4]
 80072f8:	1809      	addeq	r1, r1, r0
 80072fa:	6021      	streq	r1, [r4, #0]
 80072fc:	e7ed      	b.n	80072da <_free_r+0x1e>
 80072fe:	461a      	mov	r2, r3
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	b10b      	cbz	r3, 8007308 <_free_r+0x4c>
 8007304:	42a3      	cmp	r3, r4
 8007306:	d9fa      	bls.n	80072fe <_free_r+0x42>
 8007308:	6811      	ldr	r1, [r2, #0]
 800730a:	1850      	adds	r0, r2, r1
 800730c:	42a0      	cmp	r0, r4
 800730e:	d10b      	bne.n	8007328 <_free_r+0x6c>
 8007310:	6820      	ldr	r0, [r4, #0]
 8007312:	4401      	add	r1, r0
 8007314:	1850      	adds	r0, r2, r1
 8007316:	4283      	cmp	r3, r0
 8007318:	6011      	str	r1, [r2, #0]
 800731a:	d1e0      	bne.n	80072de <_free_r+0x22>
 800731c:	6818      	ldr	r0, [r3, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	4408      	add	r0, r1
 8007322:	6010      	str	r0, [r2, #0]
 8007324:	6053      	str	r3, [r2, #4]
 8007326:	e7da      	b.n	80072de <_free_r+0x22>
 8007328:	d902      	bls.n	8007330 <_free_r+0x74>
 800732a:	230c      	movs	r3, #12
 800732c:	602b      	str	r3, [r5, #0]
 800732e:	e7d6      	b.n	80072de <_free_r+0x22>
 8007330:	6820      	ldr	r0, [r4, #0]
 8007332:	1821      	adds	r1, r4, r0
 8007334:	428b      	cmp	r3, r1
 8007336:	bf01      	itttt	eq
 8007338:	6819      	ldreq	r1, [r3, #0]
 800733a:	685b      	ldreq	r3, [r3, #4]
 800733c:	1809      	addeq	r1, r1, r0
 800733e:	6021      	streq	r1, [r4, #0]
 8007340:	6063      	str	r3, [r4, #4]
 8007342:	6054      	str	r4, [r2, #4]
 8007344:	e7cb      	b.n	80072de <_free_r+0x22>
 8007346:	bd38      	pop	{r3, r4, r5, pc}
 8007348:	2000073c 	.word	0x2000073c

0800734c <sbrk_aligned>:
 800734c:	b570      	push	{r4, r5, r6, lr}
 800734e:	4e0f      	ldr	r6, [pc, #60]	@ (800738c <sbrk_aligned+0x40>)
 8007350:	460c      	mov	r4, r1
 8007352:	6831      	ldr	r1, [r6, #0]
 8007354:	4605      	mov	r5, r0
 8007356:	b911      	cbnz	r1, 800735e <sbrk_aligned+0x12>
 8007358:	f000 fcd6 	bl	8007d08 <_sbrk_r>
 800735c:	6030      	str	r0, [r6, #0]
 800735e:	4621      	mov	r1, r4
 8007360:	4628      	mov	r0, r5
 8007362:	f000 fcd1 	bl	8007d08 <_sbrk_r>
 8007366:	1c43      	adds	r3, r0, #1
 8007368:	d103      	bne.n	8007372 <sbrk_aligned+0x26>
 800736a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800736e:	4620      	mov	r0, r4
 8007370:	bd70      	pop	{r4, r5, r6, pc}
 8007372:	1cc4      	adds	r4, r0, #3
 8007374:	f024 0403 	bic.w	r4, r4, #3
 8007378:	42a0      	cmp	r0, r4
 800737a:	d0f8      	beq.n	800736e <sbrk_aligned+0x22>
 800737c:	1a21      	subs	r1, r4, r0
 800737e:	4628      	mov	r0, r5
 8007380:	f000 fcc2 	bl	8007d08 <_sbrk_r>
 8007384:	3001      	adds	r0, #1
 8007386:	d1f2      	bne.n	800736e <sbrk_aligned+0x22>
 8007388:	e7ef      	b.n	800736a <sbrk_aligned+0x1e>
 800738a:	bf00      	nop
 800738c:	20000738 	.word	0x20000738

08007390 <_malloc_r>:
 8007390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007394:	1ccd      	adds	r5, r1, #3
 8007396:	f025 0503 	bic.w	r5, r5, #3
 800739a:	3508      	adds	r5, #8
 800739c:	2d0c      	cmp	r5, #12
 800739e:	bf38      	it	cc
 80073a0:	250c      	movcc	r5, #12
 80073a2:	2d00      	cmp	r5, #0
 80073a4:	4606      	mov	r6, r0
 80073a6:	db01      	blt.n	80073ac <_malloc_r+0x1c>
 80073a8:	42a9      	cmp	r1, r5
 80073aa:	d904      	bls.n	80073b6 <_malloc_r+0x26>
 80073ac:	230c      	movs	r3, #12
 80073ae:	6033      	str	r3, [r6, #0]
 80073b0:	2000      	movs	r0, #0
 80073b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800748c <_malloc_r+0xfc>
 80073ba:	f000 f869 	bl	8007490 <__malloc_lock>
 80073be:	f8d8 3000 	ldr.w	r3, [r8]
 80073c2:	461c      	mov	r4, r3
 80073c4:	bb44      	cbnz	r4, 8007418 <_malloc_r+0x88>
 80073c6:	4629      	mov	r1, r5
 80073c8:	4630      	mov	r0, r6
 80073ca:	f7ff ffbf 	bl	800734c <sbrk_aligned>
 80073ce:	1c43      	adds	r3, r0, #1
 80073d0:	4604      	mov	r4, r0
 80073d2:	d158      	bne.n	8007486 <_malloc_r+0xf6>
 80073d4:	f8d8 4000 	ldr.w	r4, [r8]
 80073d8:	4627      	mov	r7, r4
 80073da:	2f00      	cmp	r7, #0
 80073dc:	d143      	bne.n	8007466 <_malloc_r+0xd6>
 80073de:	2c00      	cmp	r4, #0
 80073e0:	d04b      	beq.n	800747a <_malloc_r+0xea>
 80073e2:	6823      	ldr	r3, [r4, #0]
 80073e4:	4639      	mov	r1, r7
 80073e6:	4630      	mov	r0, r6
 80073e8:	eb04 0903 	add.w	r9, r4, r3
 80073ec:	f000 fc8c 	bl	8007d08 <_sbrk_r>
 80073f0:	4581      	cmp	r9, r0
 80073f2:	d142      	bne.n	800747a <_malloc_r+0xea>
 80073f4:	6821      	ldr	r1, [r4, #0]
 80073f6:	4630      	mov	r0, r6
 80073f8:	1a6d      	subs	r5, r5, r1
 80073fa:	4629      	mov	r1, r5
 80073fc:	f7ff ffa6 	bl	800734c <sbrk_aligned>
 8007400:	3001      	adds	r0, #1
 8007402:	d03a      	beq.n	800747a <_malloc_r+0xea>
 8007404:	6823      	ldr	r3, [r4, #0]
 8007406:	442b      	add	r3, r5
 8007408:	6023      	str	r3, [r4, #0]
 800740a:	f8d8 3000 	ldr.w	r3, [r8]
 800740e:	685a      	ldr	r2, [r3, #4]
 8007410:	bb62      	cbnz	r2, 800746c <_malloc_r+0xdc>
 8007412:	f8c8 7000 	str.w	r7, [r8]
 8007416:	e00f      	b.n	8007438 <_malloc_r+0xa8>
 8007418:	6822      	ldr	r2, [r4, #0]
 800741a:	1b52      	subs	r2, r2, r5
 800741c:	d420      	bmi.n	8007460 <_malloc_r+0xd0>
 800741e:	2a0b      	cmp	r2, #11
 8007420:	d917      	bls.n	8007452 <_malloc_r+0xc2>
 8007422:	1961      	adds	r1, r4, r5
 8007424:	42a3      	cmp	r3, r4
 8007426:	6025      	str	r5, [r4, #0]
 8007428:	bf18      	it	ne
 800742a:	6059      	strne	r1, [r3, #4]
 800742c:	6863      	ldr	r3, [r4, #4]
 800742e:	bf08      	it	eq
 8007430:	f8c8 1000 	streq.w	r1, [r8]
 8007434:	5162      	str	r2, [r4, r5]
 8007436:	604b      	str	r3, [r1, #4]
 8007438:	4630      	mov	r0, r6
 800743a:	f000 f82f 	bl	800749c <__malloc_unlock>
 800743e:	f104 000b 	add.w	r0, r4, #11
 8007442:	1d23      	adds	r3, r4, #4
 8007444:	f020 0007 	bic.w	r0, r0, #7
 8007448:	1ac2      	subs	r2, r0, r3
 800744a:	bf1c      	itt	ne
 800744c:	1a1b      	subne	r3, r3, r0
 800744e:	50a3      	strne	r3, [r4, r2]
 8007450:	e7af      	b.n	80073b2 <_malloc_r+0x22>
 8007452:	6862      	ldr	r2, [r4, #4]
 8007454:	42a3      	cmp	r3, r4
 8007456:	bf0c      	ite	eq
 8007458:	f8c8 2000 	streq.w	r2, [r8]
 800745c:	605a      	strne	r2, [r3, #4]
 800745e:	e7eb      	b.n	8007438 <_malloc_r+0xa8>
 8007460:	4623      	mov	r3, r4
 8007462:	6864      	ldr	r4, [r4, #4]
 8007464:	e7ae      	b.n	80073c4 <_malloc_r+0x34>
 8007466:	463c      	mov	r4, r7
 8007468:	687f      	ldr	r7, [r7, #4]
 800746a:	e7b6      	b.n	80073da <_malloc_r+0x4a>
 800746c:	461a      	mov	r2, r3
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	42a3      	cmp	r3, r4
 8007472:	d1fb      	bne.n	800746c <_malloc_r+0xdc>
 8007474:	2300      	movs	r3, #0
 8007476:	6053      	str	r3, [r2, #4]
 8007478:	e7de      	b.n	8007438 <_malloc_r+0xa8>
 800747a:	230c      	movs	r3, #12
 800747c:	4630      	mov	r0, r6
 800747e:	6033      	str	r3, [r6, #0]
 8007480:	f000 f80c 	bl	800749c <__malloc_unlock>
 8007484:	e794      	b.n	80073b0 <_malloc_r+0x20>
 8007486:	6005      	str	r5, [r0, #0]
 8007488:	e7d6      	b.n	8007438 <_malloc_r+0xa8>
 800748a:	bf00      	nop
 800748c:	2000073c 	.word	0x2000073c

08007490 <__malloc_lock>:
 8007490:	4801      	ldr	r0, [pc, #4]	@ (8007498 <__malloc_lock+0x8>)
 8007492:	f7ff bf10 	b.w	80072b6 <__retarget_lock_acquire_recursive>
 8007496:	bf00      	nop
 8007498:	20000734 	.word	0x20000734

0800749c <__malloc_unlock>:
 800749c:	4801      	ldr	r0, [pc, #4]	@ (80074a4 <__malloc_unlock+0x8>)
 800749e:	f7ff bf0b 	b.w	80072b8 <__retarget_lock_release_recursive>
 80074a2:	bf00      	nop
 80074a4:	20000734 	.word	0x20000734

080074a8 <__sfputc_r>:
 80074a8:	6893      	ldr	r3, [r2, #8]
 80074aa:	b410      	push	{r4}
 80074ac:	3b01      	subs	r3, #1
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	6093      	str	r3, [r2, #8]
 80074b2:	da07      	bge.n	80074c4 <__sfputc_r+0x1c>
 80074b4:	6994      	ldr	r4, [r2, #24]
 80074b6:	42a3      	cmp	r3, r4
 80074b8:	db01      	blt.n	80074be <__sfputc_r+0x16>
 80074ba:	290a      	cmp	r1, #10
 80074bc:	d102      	bne.n	80074c4 <__sfputc_r+0x1c>
 80074be:	bc10      	pop	{r4}
 80074c0:	f7ff bdeb 	b.w	800709a <__swbuf_r>
 80074c4:	6813      	ldr	r3, [r2, #0]
 80074c6:	1c58      	adds	r0, r3, #1
 80074c8:	6010      	str	r0, [r2, #0]
 80074ca:	7019      	strb	r1, [r3, #0]
 80074cc:	4608      	mov	r0, r1
 80074ce:	bc10      	pop	{r4}
 80074d0:	4770      	bx	lr

080074d2 <__sfputs_r>:
 80074d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074d4:	4606      	mov	r6, r0
 80074d6:	460f      	mov	r7, r1
 80074d8:	4614      	mov	r4, r2
 80074da:	18d5      	adds	r5, r2, r3
 80074dc:	42ac      	cmp	r4, r5
 80074de:	d101      	bne.n	80074e4 <__sfputs_r+0x12>
 80074e0:	2000      	movs	r0, #0
 80074e2:	e007      	b.n	80074f4 <__sfputs_r+0x22>
 80074e4:	463a      	mov	r2, r7
 80074e6:	4630      	mov	r0, r6
 80074e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074ec:	f7ff ffdc 	bl	80074a8 <__sfputc_r>
 80074f0:	1c43      	adds	r3, r0, #1
 80074f2:	d1f3      	bne.n	80074dc <__sfputs_r+0xa>
 80074f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080074f8 <_vfiprintf_r>:
 80074f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074fc:	460d      	mov	r5, r1
 80074fe:	4614      	mov	r4, r2
 8007500:	4698      	mov	r8, r3
 8007502:	4606      	mov	r6, r0
 8007504:	b09d      	sub	sp, #116	@ 0x74
 8007506:	b118      	cbz	r0, 8007510 <_vfiprintf_r+0x18>
 8007508:	6a03      	ldr	r3, [r0, #32]
 800750a:	b90b      	cbnz	r3, 8007510 <_vfiprintf_r+0x18>
 800750c:	f7ff fcd4 	bl	8006eb8 <__sinit>
 8007510:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007512:	07d9      	lsls	r1, r3, #31
 8007514:	d405      	bmi.n	8007522 <_vfiprintf_r+0x2a>
 8007516:	89ab      	ldrh	r3, [r5, #12]
 8007518:	059a      	lsls	r2, r3, #22
 800751a:	d402      	bmi.n	8007522 <_vfiprintf_r+0x2a>
 800751c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800751e:	f7ff feca 	bl	80072b6 <__retarget_lock_acquire_recursive>
 8007522:	89ab      	ldrh	r3, [r5, #12]
 8007524:	071b      	lsls	r3, r3, #28
 8007526:	d501      	bpl.n	800752c <_vfiprintf_r+0x34>
 8007528:	692b      	ldr	r3, [r5, #16]
 800752a:	b99b      	cbnz	r3, 8007554 <_vfiprintf_r+0x5c>
 800752c:	4629      	mov	r1, r5
 800752e:	4630      	mov	r0, r6
 8007530:	f7ff fdf2 	bl	8007118 <__swsetup_r>
 8007534:	b170      	cbz	r0, 8007554 <_vfiprintf_r+0x5c>
 8007536:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007538:	07dc      	lsls	r4, r3, #31
 800753a:	d504      	bpl.n	8007546 <_vfiprintf_r+0x4e>
 800753c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007540:	b01d      	add	sp, #116	@ 0x74
 8007542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007546:	89ab      	ldrh	r3, [r5, #12]
 8007548:	0598      	lsls	r0, r3, #22
 800754a:	d4f7      	bmi.n	800753c <_vfiprintf_r+0x44>
 800754c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800754e:	f7ff feb3 	bl	80072b8 <__retarget_lock_release_recursive>
 8007552:	e7f3      	b.n	800753c <_vfiprintf_r+0x44>
 8007554:	2300      	movs	r3, #0
 8007556:	9309      	str	r3, [sp, #36]	@ 0x24
 8007558:	2320      	movs	r3, #32
 800755a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800755e:	2330      	movs	r3, #48	@ 0x30
 8007560:	f04f 0901 	mov.w	r9, #1
 8007564:	f8cd 800c 	str.w	r8, [sp, #12]
 8007568:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007714 <_vfiprintf_r+0x21c>
 800756c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007570:	4623      	mov	r3, r4
 8007572:	469a      	mov	sl, r3
 8007574:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007578:	b10a      	cbz	r2, 800757e <_vfiprintf_r+0x86>
 800757a:	2a25      	cmp	r2, #37	@ 0x25
 800757c:	d1f9      	bne.n	8007572 <_vfiprintf_r+0x7a>
 800757e:	ebba 0b04 	subs.w	fp, sl, r4
 8007582:	d00b      	beq.n	800759c <_vfiprintf_r+0xa4>
 8007584:	465b      	mov	r3, fp
 8007586:	4622      	mov	r2, r4
 8007588:	4629      	mov	r1, r5
 800758a:	4630      	mov	r0, r6
 800758c:	f7ff ffa1 	bl	80074d2 <__sfputs_r>
 8007590:	3001      	adds	r0, #1
 8007592:	f000 80a7 	beq.w	80076e4 <_vfiprintf_r+0x1ec>
 8007596:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007598:	445a      	add	r2, fp
 800759a:	9209      	str	r2, [sp, #36]	@ 0x24
 800759c:	f89a 3000 	ldrb.w	r3, [sl]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	f000 809f 	beq.w	80076e4 <_vfiprintf_r+0x1ec>
 80075a6:	2300      	movs	r3, #0
 80075a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80075ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075b0:	f10a 0a01 	add.w	sl, sl, #1
 80075b4:	9304      	str	r3, [sp, #16]
 80075b6:	9307      	str	r3, [sp, #28]
 80075b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80075bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80075be:	4654      	mov	r4, sl
 80075c0:	2205      	movs	r2, #5
 80075c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075c6:	4853      	ldr	r0, [pc, #332]	@ (8007714 <_vfiprintf_r+0x21c>)
 80075c8:	f000 fbae 	bl	8007d28 <memchr>
 80075cc:	9a04      	ldr	r2, [sp, #16]
 80075ce:	b9d8      	cbnz	r0, 8007608 <_vfiprintf_r+0x110>
 80075d0:	06d1      	lsls	r1, r2, #27
 80075d2:	bf44      	itt	mi
 80075d4:	2320      	movmi	r3, #32
 80075d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80075da:	0713      	lsls	r3, r2, #28
 80075dc:	bf44      	itt	mi
 80075de:	232b      	movmi	r3, #43	@ 0x2b
 80075e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80075e4:	f89a 3000 	ldrb.w	r3, [sl]
 80075e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80075ea:	d015      	beq.n	8007618 <_vfiprintf_r+0x120>
 80075ec:	4654      	mov	r4, sl
 80075ee:	2000      	movs	r0, #0
 80075f0:	f04f 0c0a 	mov.w	ip, #10
 80075f4:	9a07      	ldr	r2, [sp, #28]
 80075f6:	4621      	mov	r1, r4
 80075f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075fc:	3b30      	subs	r3, #48	@ 0x30
 80075fe:	2b09      	cmp	r3, #9
 8007600:	d94b      	bls.n	800769a <_vfiprintf_r+0x1a2>
 8007602:	b1b0      	cbz	r0, 8007632 <_vfiprintf_r+0x13a>
 8007604:	9207      	str	r2, [sp, #28]
 8007606:	e014      	b.n	8007632 <_vfiprintf_r+0x13a>
 8007608:	eba0 0308 	sub.w	r3, r0, r8
 800760c:	fa09 f303 	lsl.w	r3, r9, r3
 8007610:	4313      	orrs	r3, r2
 8007612:	46a2      	mov	sl, r4
 8007614:	9304      	str	r3, [sp, #16]
 8007616:	e7d2      	b.n	80075be <_vfiprintf_r+0xc6>
 8007618:	9b03      	ldr	r3, [sp, #12]
 800761a:	1d19      	adds	r1, r3, #4
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	9103      	str	r1, [sp, #12]
 8007620:	2b00      	cmp	r3, #0
 8007622:	bfbb      	ittet	lt
 8007624:	425b      	neglt	r3, r3
 8007626:	f042 0202 	orrlt.w	r2, r2, #2
 800762a:	9307      	strge	r3, [sp, #28]
 800762c:	9307      	strlt	r3, [sp, #28]
 800762e:	bfb8      	it	lt
 8007630:	9204      	strlt	r2, [sp, #16]
 8007632:	7823      	ldrb	r3, [r4, #0]
 8007634:	2b2e      	cmp	r3, #46	@ 0x2e
 8007636:	d10a      	bne.n	800764e <_vfiprintf_r+0x156>
 8007638:	7863      	ldrb	r3, [r4, #1]
 800763a:	2b2a      	cmp	r3, #42	@ 0x2a
 800763c:	d132      	bne.n	80076a4 <_vfiprintf_r+0x1ac>
 800763e:	9b03      	ldr	r3, [sp, #12]
 8007640:	3402      	adds	r4, #2
 8007642:	1d1a      	adds	r2, r3, #4
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	9203      	str	r2, [sp, #12]
 8007648:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800764c:	9305      	str	r3, [sp, #20]
 800764e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007718 <_vfiprintf_r+0x220>
 8007652:	2203      	movs	r2, #3
 8007654:	4650      	mov	r0, sl
 8007656:	7821      	ldrb	r1, [r4, #0]
 8007658:	f000 fb66 	bl	8007d28 <memchr>
 800765c:	b138      	cbz	r0, 800766e <_vfiprintf_r+0x176>
 800765e:	2240      	movs	r2, #64	@ 0x40
 8007660:	9b04      	ldr	r3, [sp, #16]
 8007662:	eba0 000a 	sub.w	r0, r0, sl
 8007666:	4082      	lsls	r2, r0
 8007668:	4313      	orrs	r3, r2
 800766a:	3401      	adds	r4, #1
 800766c:	9304      	str	r3, [sp, #16]
 800766e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007672:	2206      	movs	r2, #6
 8007674:	4829      	ldr	r0, [pc, #164]	@ (800771c <_vfiprintf_r+0x224>)
 8007676:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800767a:	f000 fb55 	bl	8007d28 <memchr>
 800767e:	2800      	cmp	r0, #0
 8007680:	d03f      	beq.n	8007702 <_vfiprintf_r+0x20a>
 8007682:	4b27      	ldr	r3, [pc, #156]	@ (8007720 <_vfiprintf_r+0x228>)
 8007684:	bb1b      	cbnz	r3, 80076ce <_vfiprintf_r+0x1d6>
 8007686:	9b03      	ldr	r3, [sp, #12]
 8007688:	3307      	adds	r3, #7
 800768a:	f023 0307 	bic.w	r3, r3, #7
 800768e:	3308      	adds	r3, #8
 8007690:	9303      	str	r3, [sp, #12]
 8007692:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007694:	443b      	add	r3, r7
 8007696:	9309      	str	r3, [sp, #36]	@ 0x24
 8007698:	e76a      	b.n	8007570 <_vfiprintf_r+0x78>
 800769a:	460c      	mov	r4, r1
 800769c:	2001      	movs	r0, #1
 800769e:	fb0c 3202 	mla	r2, ip, r2, r3
 80076a2:	e7a8      	b.n	80075f6 <_vfiprintf_r+0xfe>
 80076a4:	2300      	movs	r3, #0
 80076a6:	f04f 0c0a 	mov.w	ip, #10
 80076aa:	4619      	mov	r1, r3
 80076ac:	3401      	adds	r4, #1
 80076ae:	9305      	str	r3, [sp, #20]
 80076b0:	4620      	mov	r0, r4
 80076b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076b6:	3a30      	subs	r2, #48	@ 0x30
 80076b8:	2a09      	cmp	r2, #9
 80076ba:	d903      	bls.n	80076c4 <_vfiprintf_r+0x1cc>
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d0c6      	beq.n	800764e <_vfiprintf_r+0x156>
 80076c0:	9105      	str	r1, [sp, #20]
 80076c2:	e7c4      	b.n	800764e <_vfiprintf_r+0x156>
 80076c4:	4604      	mov	r4, r0
 80076c6:	2301      	movs	r3, #1
 80076c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80076cc:	e7f0      	b.n	80076b0 <_vfiprintf_r+0x1b8>
 80076ce:	ab03      	add	r3, sp, #12
 80076d0:	9300      	str	r3, [sp, #0]
 80076d2:	462a      	mov	r2, r5
 80076d4:	4630      	mov	r0, r6
 80076d6:	4b13      	ldr	r3, [pc, #76]	@ (8007724 <_vfiprintf_r+0x22c>)
 80076d8:	a904      	add	r1, sp, #16
 80076da:	f3af 8000 	nop.w
 80076de:	4607      	mov	r7, r0
 80076e0:	1c78      	adds	r0, r7, #1
 80076e2:	d1d6      	bne.n	8007692 <_vfiprintf_r+0x19a>
 80076e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80076e6:	07d9      	lsls	r1, r3, #31
 80076e8:	d405      	bmi.n	80076f6 <_vfiprintf_r+0x1fe>
 80076ea:	89ab      	ldrh	r3, [r5, #12]
 80076ec:	059a      	lsls	r2, r3, #22
 80076ee:	d402      	bmi.n	80076f6 <_vfiprintf_r+0x1fe>
 80076f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80076f2:	f7ff fde1 	bl	80072b8 <__retarget_lock_release_recursive>
 80076f6:	89ab      	ldrh	r3, [r5, #12]
 80076f8:	065b      	lsls	r3, r3, #25
 80076fa:	f53f af1f 	bmi.w	800753c <_vfiprintf_r+0x44>
 80076fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007700:	e71e      	b.n	8007540 <_vfiprintf_r+0x48>
 8007702:	ab03      	add	r3, sp, #12
 8007704:	9300      	str	r3, [sp, #0]
 8007706:	462a      	mov	r2, r5
 8007708:	4630      	mov	r0, r6
 800770a:	4b06      	ldr	r3, [pc, #24]	@ (8007724 <_vfiprintf_r+0x22c>)
 800770c:	a904      	add	r1, sp, #16
 800770e:	f000 f87d 	bl	800780c <_printf_i>
 8007712:	e7e4      	b.n	80076de <_vfiprintf_r+0x1e6>
 8007714:	08007ea2 	.word	0x08007ea2
 8007718:	08007ea8 	.word	0x08007ea8
 800771c:	08007eac 	.word	0x08007eac
 8007720:	00000000 	.word	0x00000000
 8007724:	080074d3 	.word	0x080074d3

08007728 <_printf_common>:
 8007728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800772c:	4616      	mov	r6, r2
 800772e:	4698      	mov	r8, r3
 8007730:	688a      	ldr	r2, [r1, #8]
 8007732:	690b      	ldr	r3, [r1, #16]
 8007734:	4607      	mov	r7, r0
 8007736:	4293      	cmp	r3, r2
 8007738:	bfb8      	it	lt
 800773a:	4613      	movlt	r3, r2
 800773c:	6033      	str	r3, [r6, #0]
 800773e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007742:	460c      	mov	r4, r1
 8007744:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007748:	b10a      	cbz	r2, 800774e <_printf_common+0x26>
 800774a:	3301      	adds	r3, #1
 800774c:	6033      	str	r3, [r6, #0]
 800774e:	6823      	ldr	r3, [r4, #0]
 8007750:	0699      	lsls	r1, r3, #26
 8007752:	bf42      	ittt	mi
 8007754:	6833      	ldrmi	r3, [r6, #0]
 8007756:	3302      	addmi	r3, #2
 8007758:	6033      	strmi	r3, [r6, #0]
 800775a:	6825      	ldr	r5, [r4, #0]
 800775c:	f015 0506 	ands.w	r5, r5, #6
 8007760:	d106      	bne.n	8007770 <_printf_common+0x48>
 8007762:	f104 0a19 	add.w	sl, r4, #25
 8007766:	68e3      	ldr	r3, [r4, #12]
 8007768:	6832      	ldr	r2, [r6, #0]
 800776a:	1a9b      	subs	r3, r3, r2
 800776c:	42ab      	cmp	r3, r5
 800776e:	dc2b      	bgt.n	80077c8 <_printf_common+0xa0>
 8007770:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007774:	6822      	ldr	r2, [r4, #0]
 8007776:	3b00      	subs	r3, #0
 8007778:	bf18      	it	ne
 800777a:	2301      	movne	r3, #1
 800777c:	0692      	lsls	r2, r2, #26
 800777e:	d430      	bmi.n	80077e2 <_printf_common+0xba>
 8007780:	4641      	mov	r1, r8
 8007782:	4638      	mov	r0, r7
 8007784:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007788:	47c8      	blx	r9
 800778a:	3001      	adds	r0, #1
 800778c:	d023      	beq.n	80077d6 <_printf_common+0xae>
 800778e:	6823      	ldr	r3, [r4, #0]
 8007790:	6922      	ldr	r2, [r4, #16]
 8007792:	f003 0306 	and.w	r3, r3, #6
 8007796:	2b04      	cmp	r3, #4
 8007798:	bf14      	ite	ne
 800779a:	2500      	movne	r5, #0
 800779c:	6833      	ldreq	r3, [r6, #0]
 800779e:	f04f 0600 	mov.w	r6, #0
 80077a2:	bf08      	it	eq
 80077a4:	68e5      	ldreq	r5, [r4, #12]
 80077a6:	f104 041a 	add.w	r4, r4, #26
 80077aa:	bf08      	it	eq
 80077ac:	1aed      	subeq	r5, r5, r3
 80077ae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80077b2:	bf08      	it	eq
 80077b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077b8:	4293      	cmp	r3, r2
 80077ba:	bfc4      	itt	gt
 80077bc:	1a9b      	subgt	r3, r3, r2
 80077be:	18ed      	addgt	r5, r5, r3
 80077c0:	42b5      	cmp	r5, r6
 80077c2:	d11a      	bne.n	80077fa <_printf_common+0xd2>
 80077c4:	2000      	movs	r0, #0
 80077c6:	e008      	b.n	80077da <_printf_common+0xb2>
 80077c8:	2301      	movs	r3, #1
 80077ca:	4652      	mov	r2, sl
 80077cc:	4641      	mov	r1, r8
 80077ce:	4638      	mov	r0, r7
 80077d0:	47c8      	blx	r9
 80077d2:	3001      	adds	r0, #1
 80077d4:	d103      	bne.n	80077de <_printf_common+0xb6>
 80077d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80077da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077de:	3501      	adds	r5, #1
 80077e0:	e7c1      	b.n	8007766 <_printf_common+0x3e>
 80077e2:	2030      	movs	r0, #48	@ 0x30
 80077e4:	18e1      	adds	r1, r4, r3
 80077e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80077ea:	1c5a      	adds	r2, r3, #1
 80077ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80077f0:	4422      	add	r2, r4
 80077f2:	3302      	adds	r3, #2
 80077f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80077f8:	e7c2      	b.n	8007780 <_printf_common+0x58>
 80077fa:	2301      	movs	r3, #1
 80077fc:	4622      	mov	r2, r4
 80077fe:	4641      	mov	r1, r8
 8007800:	4638      	mov	r0, r7
 8007802:	47c8      	blx	r9
 8007804:	3001      	adds	r0, #1
 8007806:	d0e6      	beq.n	80077d6 <_printf_common+0xae>
 8007808:	3601      	adds	r6, #1
 800780a:	e7d9      	b.n	80077c0 <_printf_common+0x98>

0800780c <_printf_i>:
 800780c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007810:	7e0f      	ldrb	r7, [r1, #24]
 8007812:	4691      	mov	r9, r2
 8007814:	2f78      	cmp	r7, #120	@ 0x78
 8007816:	4680      	mov	r8, r0
 8007818:	460c      	mov	r4, r1
 800781a:	469a      	mov	sl, r3
 800781c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800781e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007822:	d807      	bhi.n	8007834 <_printf_i+0x28>
 8007824:	2f62      	cmp	r7, #98	@ 0x62
 8007826:	d80a      	bhi.n	800783e <_printf_i+0x32>
 8007828:	2f00      	cmp	r7, #0
 800782a:	f000 80d1 	beq.w	80079d0 <_printf_i+0x1c4>
 800782e:	2f58      	cmp	r7, #88	@ 0x58
 8007830:	f000 80b8 	beq.w	80079a4 <_printf_i+0x198>
 8007834:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007838:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800783c:	e03a      	b.n	80078b4 <_printf_i+0xa8>
 800783e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007842:	2b15      	cmp	r3, #21
 8007844:	d8f6      	bhi.n	8007834 <_printf_i+0x28>
 8007846:	a101      	add	r1, pc, #4	@ (adr r1, 800784c <_printf_i+0x40>)
 8007848:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800784c:	080078a5 	.word	0x080078a5
 8007850:	080078b9 	.word	0x080078b9
 8007854:	08007835 	.word	0x08007835
 8007858:	08007835 	.word	0x08007835
 800785c:	08007835 	.word	0x08007835
 8007860:	08007835 	.word	0x08007835
 8007864:	080078b9 	.word	0x080078b9
 8007868:	08007835 	.word	0x08007835
 800786c:	08007835 	.word	0x08007835
 8007870:	08007835 	.word	0x08007835
 8007874:	08007835 	.word	0x08007835
 8007878:	080079b7 	.word	0x080079b7
 800787c:	080078e3 	.word	0x080078e3
 8007880:	08007971 	.word	0x08007971
 8007884:	08007835 	.word	0x08007835
 8007888:	08007835 	.word	0x08007835
 800788c:	080079d9 	.word	0x080079d9
 8007890:	08007835 	.word	0x08007835
 8007894:	080078e3 	.word	0x080078e3
 8007898:	08007835 	.word	0x08007835
 800789c:	08007835 	.word	0x08007835
 80078a0:	08007979 	.word	0x08007979
 80078a4:	6833      	ldr	r3, [r6, #0]
 80078a6:	1d1a      	adds	r2, r3, #4
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	6032      	str	r2, [r6, #0]
 80078ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80078b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80078b4:	2301      	movs	r3, #1
 80078b6:	e09c      	b.n	80079f2 <_printf_i+0x1e6>
 80078b8:	6833      	ldr	r3, [r6, #0]
 80078ba:	6820      	ldr	r0, [r4, #0]
 80078bc:	1d19      	adds	r1, r3, #4
 80078be:	6031      	str	r1, [r6, #0]
 80078c0:	0606      	lsls	r6, r0, #24
 80078c2:	d501      	bpl.n	80078c8 <_printf_i+0xbc>
 80078c4:	681d      	ldr	r5, [r3, #0]
 80078c6:	e003      	b.n	80078d0 <_printf_i+0xc4>
 80078c8:	0645      	lsls	r5, r0, #25
 80078ca:	d5fb      	bpl.n	80078c4 <_printf_i+0xb8>
 80078cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80078d0:	2d00      	cmp	r5, #0
 80078d2:	da03      	bge.n	80078dc <_printf_i+0xd0>
 80078d4:	232d      	movs	r3, #45	@ 0x2d
 80078d6:	426d      	negs	r5, r5
 80078d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078dc:	230a      	movs	r3, #10
 80078de:	4858      	ldr	r0, [pc, #352]	@ (8007a40 <_printf_i+0x234>)
 80078e0:	e011      	b.n	8007906 <_printf_i+0xfa>
 80078e2:	6821      	ldr	r1, [r4, #0]
 80078e4:	6833      	ldr	r3, [r6, #0]
 80078e6:	0608      	lsls	r0, r1, #24
 80078e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80078ec:	d402      	bmi.n	80078f4 <_printf_i+0xe8>
 80078ee:	0649      	lsls	r1, r1, #25
 80078f0:	bf48      	it	mi
 80078f2:	b2ad      	uxthmi	r5, r5
 80078f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80078f6:	6033      	str	r3, [r6, #0]
 80078f8:	bf14      	ite	ne
 80078fa:	230a      	movne	r3, #10
 80078fc:	2308      	moveq	r3, #8
 80078fe:	4850      	ldr	r0, [pc, #320]	@ (8007a40 <_printf_i+0x234>)
 8007900:	2100      	movs	r1, #0
 8007902:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007906:	6866      	ldr	r6, [r4, #4]
 8007908:	2e00      	cmp	r6, #0
 800790a:	60a6      	str	r6, [r4, #8]
 800790c:	db05      	blt.n	800791a <_printf_i+0x10e>
 800790e:	6821      	ldr	r1, [r4, #0]
 8007910:	432e      	orrs	r6, r5
 8007912:	f021 0104 	bic.w	r1, r1, #4
 8007916:	6021      	str	r1, [r4, #0]
 8007918:	d04b      	beq.n	80079b2 <_printf_i+0x1a6>
 800791a:	4616      	mov	r6, r2
 800791c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007920:	fb03 5711 	mls	r7, r3, r1, r5
 8007924:	5dc7      	ldrb	r7, [r0, r7]
 8007926:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800792a:	462f      	mov	r7, r5
 800792c:	42bb      	cmp	r3, r7
 800792e:	460d      	mov	r5, r1
 8007930:	d9f4      	bls.n	800791c <_printf_i+0x110>
 8007932:	2b08      	cmp	r3, #8
 8007934:	d10b      	bne.n	800794e <_printf_i+0x142>
 8007936:	6823      	ldr	r3, [r4, #0]
 8007938:	07df      	lsls	r7, r3, #31
 800793a:	d508      	bpl.n	800794e <_printf_i+0x142>
 800793c:	6923      	ldr	r3, [r4, #16]
 800793e:	6861      	ldr	r1, [r4, #4]
 8007940:	4299      	cmp	r1, r3
 8007942:	bfde      	ittt	le
 8007944:	2330      	movle	r3, #48	@ 0x30
 8007946:	f806 3c01 	strble.w	r3, [r6, #-1]
 800794a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800794e:	1b92      	subs	r2, r2, r6
 8007950:	6122      	str	r2, [r4, #16]
 8007952:	464b      	mov	r3, r9
 8007954:	4621      	mov	r1, r4
 8007956:	4640      	mov	r0, r8
 8007958:	f8cd a000 	str.w	sl, [sp]
 800795c:	aa03      	add	r2, sp, #12
 800795e:	f7ff fee3 	bl	8007728 <_printf_common>
 8007962:	3001      	adds	r0, #1
 8007964:	d14a      	bne.n	80079fc <_printf_i+0x1f0>
 8007966:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800796a:	b004      	add	sp, #16
 800796c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007970:	6823      	ldr	r3, [r4, #0]
 8007972:	f043 0320 	orr.w	r3, r3, #32
 8007976:	6023      	str	r3, [r4, #0]
 8007978:	2778      	movs	r7, #120	@ 0x78
 800797a:	4832      	ldr	r0, [pc, #200]	@ (8007a44 <_printf_i+0x238>)
 800797c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007980:	6823      	ldr	r3, [r4, #0]
 8007982:	6831      	ldr	r1, [r6, #0]
 8007984:	061f      	lsls	r7, r3, #24
 8007986:	f851 5b04 	ldr.w	r5, [r1], #4
 800798a:	d402      	bmi.n	8007992 <_printf_i+0x186>
 800798c:	065f      	lsls	r7, r3, #25
 800798e:	bf48      	it	mi
 8007990:	b2ad      	uxthmi	r5, r5
 8007992:	6031      	str	r1, [r6, #0]
 8007994:	07d9      	lsls	r1, r3, #31
 8007996:	bf44      	itt	mi
 8007998:	f043 0320 	orrmi.w	r3, r3, #32
 800799c:	6023      	strmi	r3, [r4, #0]
 800799e:	b11d      	cbz	r5, 80079a8 <_printf_i+0x19c>
 80079a0:	2310      	movs	r3, #16
 80079a2:	e7ad      	b.n	8007900 <_printf_i+0xf4>
 80079a4:	4826      	ldr	r0, [pc, #152]	@ (8007a40 <_printf_i+0x234>)
 80079a6:	e7e9      	b.n	800797c <_printf_i+0x170>
 80079a8:	6823      	ldr	r3, [r4, #0]
 80079aa:	f023 0320 	bic.w	r3, r3, #32
 80079ae:	6023      	str	r3, [r4, #0]
 80079b0:	e7f6      	b.n	80079a0 <_printf_i+0x194>
 80079b2:	4616      	mov	r6, r2
 80079b4:	e7bd      	b.n	8007932 <_printf_i+0x126>
 80079b6:	6833      	ldr	r3, [r6, #0]
 80079b8:	6825      	ldr	r5, [r4, #0]
 80079ba:	1d18      	adds	r0, r3, #4
 80079bc:	6961      	ldr	r1, [r4, #20]
 80079be:	6030      	str	r0, [r6, #0]
 80079c0:	062e      	lsls	r6, r5, #24
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	d501      	bpl.n	80079ca <_printf_i+0x1be>
 80079c6:	6019      	str	r1, [r3, #0]
 80079c8:	e002      	b.n	80079d0 <_printf_i+0x1c4>
 80079ca:	0668      	lsls	r0, r5, #25
 80079cc:	d5fb      	bpl.n	80079c6 <_printf_i+0x1ba>
 80079ce:	8019      	strh	r1, [r3, #0]
 80079d0:	2300      	movs	r3, #0
 80079d2:	4616      	mov	r6, r2
 80079d4:	6123      	str	r3, [r4, #16]
 80079d6:	e7bc      	b.n	8007952 <_printf_i+0x146>
 80079d8:	6833      	ldr	r3, [r6, #0]
 80079da:	2100      	movs	r1, #0
 80079dc:	1d1a      	adds	r2, r3, #4
 80079de:	6032      	str	r2, [r6, #0]
 80079e0:	681e      	ldr	r6, [r3, #0]
 80079e2:	6862      	ldr	r2, [r4, #4]
 80079e4:	4630      	mov	r0, r6
 80079e6:	f000 f99f 	bl	8007d28 <memchr>
 80079ea:	b108      	cbz	r0, 80079f0 <_printf_i+0x1e4>
 80079ec:	1b80      	subs	r0, r0, r6
 80079ee:	6060      	str	r0, [r4, #4]
 80079f0:	6863      	ldr	r3, [r4, #4]
 80079f2:	6123      	str	r3, [r4, #16]
 80079f4:	2300      	movs	r3, #0
 80079f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079fa:	e7aa      	b.n	8007952 <_printf_i+0x146>
 80079fc:	4632      	mov	r2, r6
 80079fe:	4649      	mov	r1, r9
 8007a00:	4640      	mov	r0, r8
 8007a02:	6923      	ldr	r3, [r4, #16]
 8007a04:	47d0      	blx	sl
 8007a06:	3001      	adds	r0, #1
 8007a08:	d0ad      	beq.n	8007966 <_printf_i+0x15a>
 8007a0a:	6823      	ldr	r3, [r4, #0]
 8007a0c:	079b      	lsls	r3, r3, #30
 8007a0e:	d413      	bmi.n	8007a38 <_printf_i+0x22c>
 8007a10:	68e0      	ldr	r0, [r4, #12]
 8007a12:	9b03      	ldr	r3, [sp, #12]
 8007a14:	4298      	cmp	r0, r3
 8007a16:	bfb8      	it	lt
 8007a18:	4618      	movlt	r0, r3
 8007a1a:	e7a6      	b.n	800796a <_printf_i+0x15e>
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	4632      	mov	r2, r6
 8007a20:	4649      	mov	r1, r9
 8007a22:	4640      	mov	r0, r8
 8007a24:	47d0      	blx	sl
 8007a26:	3001      	adds	r0, #1
 8007a28:	d09d      	beq.n	8007966 <_printf_i+0x15a>
 8007a2a:	3501      	adds	r5, #1
 8007a2c:	68e3      	ldr	r3, [r4, #12]
 8007a2e:	9903      	ldr	r1, [sp, #12]
 8007a30:	1a5b      	subs	r3, r3, r1
 8007a32:	42ab      	cmp	r3, r5
 8007a34:	dcf2      	bgt.n	8007a1c <_printf_i+0x210>
 8007a36:	e7eb      	b.n	8007a10 <_printf_i+0x204>
 8007a38:	2500      	movs	r5, #0
 8007a3a:	f104 0619 	add.w	r6, r4, #25
 8007a3e:	e7f5      	b.n	8007a2c <_printf_i+0x220>
 8007a40:	08007eb3 	.word	0x08007eb3
 8007a44:	08007ec4 	.word	0x08007ec4

08007a48 <__sflush_r>:
 8007a48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a4e:	0716      	lsls	r6, r2, #28
 8007a50:	4605      	mov	r5, r0
 8007a52:	460c      	mov	r4, r1
 8007a54:	d454      	bmi.n	8007b00 <__sflush_r+0xb8>
 8007a56:	684b      	ldr	r3, [r1, #4]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	dc02      	bgt.n	8007a62 <__sflush_r+0x1a>
 8007a5c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	dd48      	ble.n	8007af4 <__sflush_r+0xac>
 8007a62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007a64:	2e00      	cmp	r6, #0
 8007a66:	d045      	beq.n	8007af4 <__sflush_r+0xac>
 8007a68:	2300      	movs	r3, #0
 8007a6a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007a6e:	682f      	ldr	r7, [r5, #0]
 8007a70:	6a21      	ldr	r1, [r4, #32]
 8007a72:	602b      	str	r3, [r5, #0]
 8007a74:	d030      	beq.n	8007ad8 <__sflush_r+0x90>
 8007a76:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007a78:	89a3      	ldrh	r3, [r4, #12]
 8007a7a:	0759      	lsls	r1, r3, #29
 8007a7c:	d505      	bpl.n	8007a8a <__sflush_r+0x42>
 8007a7e:	6863      	ldr	r3, [r4, #4]
 8007a80:	1ad2      	subs	r2, r2, r3
 8007a82:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007a84:	b10b      	cbz	r3, 8007a8a <__sflush_r+0x42>
 8007a86:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007a88:	1ad2      	subs	r2, r2, r3
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	4628      	mov	r0, r5
 8007a8e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007a90:	6a21      	ldr	r1, [r4, #32]
 8007a92:	47b0      	blx	r6
 8007a94:	1c43      	adds	r3, r0, #1
 8007a96:	89a3      	ldrh	r3, [r4, #12]
 8007a98:	d106      	bne.n	8007aa8 <__sflush_r+0x60>
 8007a9a:	6829      	ldr	r1, [r5, #0]
 8007a9c:	291d      	cmp	r1, #29
 8007a9e:	d82b      	bhi.n	8007af8 <__sflush_r+0xb0>
 8007aa0:	4a28      	ldr	r2, [pc, #160]	@ (8007b44 <__sflush_r+0xfc>)
 8007aa2:	40ca      	lsrs	r2, r1
 8007aa4:	07d6      	lsls	r6, r2, #31
 8007aa6:	d527      	bpl.n	8007af8 <__sflush_r+0xb0>
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	6062      	str	r2, [r4, #4]
 8007aac:	6922      	ldr	r2, [r4, #16]
 8007aae:	04d9      	lsls	r1, r3, #19
 8007ab0:	6022      	str	r2, [r4, #0]
 8007ab2:	d504      	bpl.n	8007abe <__sflush_r+0x76>
 8007ab4:	1c42      	adds	r2, r0, #1
 8007ab6:	d101      	bne.n	8007abc <__sflush_r+0x74>
 8007ab8:	682b      	ldr	r3, [r5, #0]
 8007aba:	b903      	cbnz	r3, 8007abe <__sflush_r+0x76>
 8007abc:	6560      	str	r0, [r4, #84]	@ 0x54
 8007abe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ac0:	602f      	str	r7, [r5, #0]
 8007ac2:	b1b9      	cbz	r1, 8007af4 <__sflush_r+0xac>
 8007ac4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ac8:	4299      	cmp	r1, r3
 8007aca:	d002      	beq.n	8007ad2 <__sflush_r+0x8a>
 8007acc:	4628      	mov	r0, r5
 8007ace:	f7ff fbf5 	bl	80072bc <_free_r>
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ad6:	e00d      	b.n	8007af4 <__sflush_r+0xac>
 8007ad8:	2301      	movs	r3, #1
 8007ada:	4628      	mov	r0, r5
 8007adc:	47b0      	blx	r6
 8007ade:	4602      	mov	r2, r0
 8007ae0:	1c50      	adds	r0, r2, #1
 8007ae2:	d1c9      	bne.n	8007a78 <__sflush_r+0x30>
 8007ae4:	682b      	ldr	r3, [r5, #0]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d0c6      	beq.n	8007a78 <__sflush_r+0x30>
 8007aea:	2b1d      	cmp	r3, #29
 8007aec:	d001      	beq.n	8007af2 <__sflush_r+0xaa>
 8007aee:	2b16      	cmp	r3, #22
 8007af0:	d11d      	bne.n	8007b2e <__sflush_r+0xe6>
 8007af2:	602f      	str	r7, [r5, #0]
 8007af4:	2000      	movs	r0, #0
 8007af6:	e021      	b.n	8007b3c <__sflush_r+0xf4>
 8007af8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007afc:	b21b      	sxth	r3, r3
 8007afe:	e01a      	b.n	8007b36 <__sflush_r+0xee>
 8007b00:	690f      	ldr	r7, [r1, #16]
 8007b02:	2f00      	cmp	r7, #0
 8007b04:	d0f6      	beq.n	8007af4 <__sflush_r+0xac>
 8007b06:	0793      	lsls	r3, r2, #30
 8007b08:	bf18      	it	ne
 8007b0a:	2300      	movne	r3, #0
 8007b0c:	680e      	ldr	r6, [r1, #0]
 8007b0e:	bf08      	it	eq
 8007b10:	694b      	ldreq	r3, [r1, #20]
 8007b12:	1bf6      	subs	r6, r6, r7
 8007b14:	600f      	str	r7, [r1, #0]
 8007b16:	608b      	str	r3, [r1, #8]
 8007b18:	2e00      	cmp	r6, #0
 8007b1a:	ddeb      	ble.n	8007af4 <__sflush_r+0xac>
 8007b1c:	4633      	mov	r3, r6
 8007b1e:	463a      	mov	r2, r7
 8007b20:	4628      	mov	r0, r5
 8007b22:	6a21      	ldr	r1, [r4, #32]
 8007b24:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007b28:	47e0      	blx	ip
 8007b2a:	2800      	cmp	r0, #0
 8007b2c:	dc07      	bgt.n	8007b3e <__sflush_r+0xf6>
 8007b2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b36:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b3a:	81a3      	strh	r3, [r4, #12]
 8007b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b3e:	4407      	add	r7, r0
 8007b40:	1a36      	subs	r6, r6, r0
 8007b42:	e7e9      	b.n	8007b18 <__sflush_r+0xd0>
 8007b44:	20400001 	.word	0x20400001

08007b48 <_fflush_r>:
 8007b48:	b538      	push	{r3, r4, r5, lr}
 8007b4a:	690b      	ldr	r3, [r1, #16]
 8007b4c:	4605      	mov	r5, r0
 8007b4e:	460c      	mov	r4, r1
 8007b50:	b913      	cbnz	r3, 8007b58 <_fflush_r+0x10>
 8007b52:	2500      	movs	r5, #0
 8007b54:	4628      	mov	r0, r5
 8007b56:	bd38      	pop	{r3, r4, r5, pc}
 8007b58:	b118      	cbz	r0, 8007b62 <_fflush_r+0x1a>
 8007b5a:	6a03      	ldr	r3, [r0, #32]
 8007b5c:	b90b      	cbnz	r3, 8007b62 <_fflush_r+0x1a>
 8007b5e:	f7ff f9ab 	bl	8006eb8 <__sinit>
 8007b62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d0f3      	beq.n	8007b52 <_fflush_r+0xa>
 8007b6a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007b6c:	07d0      	lsls	r0, r2, #31
 8007b6e:	d404      	bmi.n	8007b7a <_fflush_r+0x32>
 8007b70:	0599      	lsls	r1, r3, #22
 8007b72:	d402      	bmi.n	8007b7a <_fflush_r+0x32>
 8007b74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b76:	f7ff fb9e 	bl	80072b6 <__retarget_lock_acquire_recursive>
 8007b7a:	4628      	mov	r0, r5
 8007b7c:	4621      	mov	r1, r4
 8007b7e:	f7ff ff63 	bl	8007a48 <__sflush_r>
 8007b82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b84:	4605      	mov	r5, r0
 8007b86:	07da      	lsls	r2, r3, #31
 8007b88:	d4e4      	bmi.n	8007b54 <_fflush_r+0xc>
 8007b8a:	89a3      	ldrh	r3, [r4, #12]
 8007b8c:	059b      	lsls	r3, r3, #22
 8007b8e:	d4e1      	bmi.n	8007b54 <_fflush_r+0xc>
 8007b90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b92:	f7ff fb91 	bl	80072b8 <__retarget_lock_release_recursive>
 8007b96:	e7dd      	b.n	8007b54 <_fflush_r+0xc>

08007b98 <__swhatbuf_r>:
 8007b98:	b570      	push	{r4, r5, r6, lr}
 8007b9a:	460c      	mov	r4, r1
 8007b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ba0:	4615      	mov	r5, r2
 8007ba2:	2900      	cmp	r1, #0
 8007ba4:	461e      	mov	r6, r3
 8007ba6:	b096      	sub	sp, #88	@ 0x58
 8007ba8:	da0c      	bge.n	8007bc4 <__swhatbuf_r+0x2c>
 8007baa:	89a3      	ldrh	r3, [r4, #12]
 8007bac:	2100      	movs	r1, #0
 8007bae:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007bb2:	bf14      	ite	ne
 8007bb4:	2340      	movne	r3, #64	@ 0x40
 8007bb6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007bba:	2000      	movs	r0, #0
 8007bbc:	6031      	str	r1, [r6, #0]
 8007bbe:	602b      	str	r3, [r5, #0]
 8007bc0:	b016      	add	sp, #88	@ 0x58
 8007bc2:	bd70      	pop	{r4, r5, r6, pc}
 8007bc4:	466a      	mov	r2, sp
 8007bc6:	f000 f87d 	bl	8007cc4 <_fstat_r>
 8007bca:	2800      	cmp	r0, #0
 8007bcc:	dbed      	blt.n	8007baa <__swhatbuf_r+0x12>
 8007bce:	9901      	ldr	r1, [sp, #4]
 8007bd0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007bd4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007bd8:	4259      	negs	r1, r3
 8007bda:	4159      	adcs	r1, r3
 8007bdc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007be0:	e7eb      	b.n	8007bba <__swhatbuf_r+0x22>

08007be2 <__smakebuf_r>:
 8007be2:	898b      	ldrh	r3, [r1, #12]
 8007be4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007be6:	079d      	lsls	r5, r3, #30
 8007be8:	4606      	mov	r6, r0
 8007bea:	460c      	mov	r4, r1
 8007bec:	d507      	bpl.n	8007bfe <__smakebuf_r+0x1c>
 8007bee:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007bf2:	6023      	str	r3, [r4, #0]
 8007bf4:	6123      	str	r3, [r4, #16]
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	6163      	str	r3, [r4, #20]
 8007bfa:	b003      	add	sp, #12
 8007bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bfe:	466a      	mov	r2, sp
 8007c00:	ab01      	add	r3, sp, #4
 8007c02:	f7ff ffc9 	bl	8007b98 <__swhatbuf_r>
 8007c06:	9f00      	ldr	r7, [sp, #0]
 8007c08:	4605      	mov	r5, r0
 8007c0a:	4639      	mov	r1, r7
 8007c0c:	4630      	mov	r0, r6
 8007c0e:	f7ff fbbf 	bl	8007390 <_malloc_r>
 8007c12:	b948      	cbnz	r0, 8007c28 <__smakebuf_r+0x46>
 8007c14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c18:	059a      	lsls	r2, r3, #22
 8007c1a:	d4ee      	bmi.n	8007bfa <__smakebuf_r+0x18>
 8007c1c:	f023 0303 	bic.w	r3, r3, #3
 8007c20:	f043 0302 	orr.w	r3, r3, #2
 8007c24:	81a3      	strh	r3, [r4, #12]
 8007c26:	e7e2      	b.n	8007bee <__smakebuf_r+0xc>
 8007c28:	89a3      	ldrh	r3, [r4, #12]
 8007c2a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007c2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c32:	81a3      	strh	r3, [r4, #12]
 8007c34:	9b01      	ldr	r3, [sp, #4]
 8007c36:	6020      	str	r0, [r4, #0]
 8007c38:	b15b      	cbz	r3, 8007c52 <__smakebuf_r+0x70>
 8007c3a:	4630      	mov	r0, r6
 8007c3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c40:	f000 f852 	bl	8007ce8 <_isatty_r>
 8007c44:	b128      	cbz	r0, 8007c52 <__smakebuf_r+0x70>
 8007c46:	89a3      	ldrh	r3, [r4, #12]
 8007c48:	f023 0303 	bic.w	r3, r3, #3
 8007c4c:	f043 0301 	orr.w	r3, r3, #1
 8007c50:	81a3      	strh	r3, [r4, #12]
 8007c52:	89a3      	ldrh	r3, [r4, #12]
 8007c54:	431d      	orrs	r5, r3
 8007c56:	81a5      	strh	r5, [r4, #12]
 8007c58:	e7cf      	b.n	8007bfa <__smakebuf_r+0x18>

08007c5a <_putc_r>:
 8007c5a:	b570      	push	{r4, r5, r6, lr}
 8007c5c:	460d      	mov	r5, r1
 8007c5e:	4614      	mov	r4, r2
 8007c60:	4606      	mov	r6, r0
 8007c62:	b118      	cbz	r0, 8007c6c <_putc_r+0x12>
 8007c64:	6a03      	ldr	r3, [r0, #32]
 8007c66:	b90b      	cbnz	r3, 8007c6c <_putc_r+0x12>
 8007c68:	f7ff f926 	bl	8006eb8 <__sinit>
 8007c6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007c6e:	07d8      	lsls	r0, r3, #31
 8007c70:	d405      	bmi.n	8007c7e <_putc_r+0x24>
 8007c72:	89a3      	ldrh	r3, [r4, #12]
 8007c74:	0599      	lsls	r1, r3, #22
 8007c76:	d402      	bmi.n	8007c7e <_putc_r+0x24>
 8007c78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c7a:	f7ff fb1c 	bl	80072b6 <__retarget_lock_acquire_recursive>
 8007c7e:	68a3      	ldr	r3, [r4, #8]
 8007c80:	3b01      	subs	r3, #1
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	60a3      	str	r3, [r4, #8]
 8007c86:	da05      	bge.n	8007c94 <_putc_r+0x3a>
 8007c88:	69a2      	ldr	r2, [r4, #24]
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	db12      	blt.n	8007cb4 <_putc_r+0x5a>
 8007c8e:	b2eb      	uxtb	r3, r5
 8007c90:	2b0a      	cmp	r3, #10
 8007c92:	d00f      	beq.n	8007cb4 <_putc_r+0x5a>
 8007c94:	6823      	ldr	r3, [r4, #0]
 8007c96:	1c5a      	adds	r2, r3, #1
 8007c98:	6022      	str	r2, [r4, #0]
 8007c9a:	701d      	strb	r5, [r3, #0]
 8007c9c:	b2ed      	uxtb	r5, r5
 8007c9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ca0:	07da      	lsls	r2, r3, #31
 8007ca2:	d405      	bmi.n	8007cb0 <_putc_r+0x56>
 8007ca4:	89a3      	ldrh	r3, [r4, #12]
 8007ca6:	059b      	lsls	r3, r3, #22
 8007ca8:	d402      	bmi.n	8007cb0 <_putc_r+0x56>
 8007caa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007cac:	f7ff fb04 	bl	80072b8 <__retarget_lock_release_recursive>
 8007cb0:	4628      	mov	r0, r5
 8007cb2:	bd70      	pop	{r4, r5, r6, pc}
 8007cb4:	4629      	mov	r1, r5
 8007cb6:	4622      	mov	r2, r4
 8007cb8:	4630      	mov	r0, r6
 8007cba:	f7ff f9ee 	bl	800709a <__swbuf_r>
 8007cbe:	4605      	mov	r5, r0
 8007cc0:	e7ed      	b.n	8007c9e <_putc_r+0x44>
	...

08007cc4 <_fstat_r>:
 8007cc4:	b538      	push	{r3, r4, r5, lr}
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	4d06      	ldr	r5, [pc, #24]	@ (8007ce4 <_fstat_r+0x20>)
 8007cca:	4604      	mov	r4, r0
 8007ccc:	4608      	mov	r0, r1
 8007cce:	4611      	mov	r1, r2
 8007cd0:	602b      	str	r3, [r5, #0]
 8007cd2:	f7f9 facb 	bl	800126c <_fstat>
 8007cd6:	1c43      	adds	r3, r0, #1
 8007cd8:	d102      	bne.n	8007ce0 <_fstat_r+0x1c>
 8007cda:	682b      	ldr	r3, [r5, #0]
 8007cdc:	b103      	cbz	r3, 8007ce0 <_fstat_r+0x1c>
 8007cde:	6023      	str	r3, [r4, #0]
 8007ce0:	bd38      	pop	{r3, r4, r5, pc}
 8007ce2:	bf00      	nop
 8007ce4:	20000730 	.word	0x20000730

08007ce8 <_isatty_r>:
 8007ce8:	b538      	push	{r3, r4, r5, lr}
 8007cea:	2300      	movs	r3, #0
 8007cec:	4d05      	ldr	r5, [pc, #20]	@ (8007d04 <_isatty_r+0x1c>)
 8007cee:	4604      	mov	r4, r0
 8007cf0:	4608      	mov	r0, r1
 8007cf2:	602b      	str	r3, [r5, #0]
 8007cf4:	f7f9 fac9 	bl	800128a <_isatty>
 8007cf8:	1c43      	adds	r3, r0, #1
 8007cfa:	d102      	bne.n	8007d02 <_isatty_r+0x1a>
 8007cfc:	682b      	ldr	r3, [r5, #0]
 8007cfe:	b103      	cbz	r3, 8007d02 <_isatty_r+0x1a>
 8007d00:	6023      	str	r3, [r4, #0]
 8007d02:	bd38      	pop	{r3, r4, r5, pc}
 8007d04:	20000730 	.word	0x20000730

08007d08 <_sbrk_r>:
 8007d08:	b538      	push	{r3, r4, r5, lr}
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	4d05      	ldr	r5, [pc, #20]	@ (8007d24 <_sbrk_r+0x1c>)
 8007d0e:	4604      	mov	r4, r0
 8007d10:	4608      	mov	r0, r1
 8007d12:	602b      	str	r3, [r5, #0]
 8007d14:	f7f9 fad0 	bl	80012b8 <_sbrk>
 8007d18:	1c43      	adds	r3, r0, #1
 8007d1a:	d102      	bne.n	8007d22 <_sbrk_r+0x1a>
 8007d1c:	682b      	ldr	r3, [r5, #0]
 8007d1e:	b103      	cbz	r3, 8007d22 <_sbrk_r+0x1a>
 8007d20:	6023      	str	r3, [r4, #0]
 8007d22:	bd38      	pop	{r3, r4, r5, pc}
 8007d24:	20000730 	.word	0x20000730

08007d28 <memchr>:
 8007d28:	4603      	mov	r3, r0
 8007d2a:	b510      	push	{r4, lr}
 8007d2c:	b2c9      	uxtb	r1, r1
 8007d2e:	4402      	add	r2, r0
 8007d30:	4293      	cmp	r3, r2
 8007d32:	4618      	mov	r0, r3
 8007d34:	d101      	bne.n	8007d3a <memchr+0x12>
 8007d36:	2000      	movs	r0, #0
 8007d38:	e003      	b.n	8007d42 <memchr+0x1a>
 8007d3a:	7804      	ldrb	r4, [r0, #0]
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	428c      	cmp	r4, r1
 8007d40:	d1f6      	bne.n	8007d30 <memchr+0x8>
 8007d42:	bd10      	pop	{r4, pc}

08007d44 <_init>:
 8007d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d46:	bf00      	nop
 8007d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d4a:	bc08      	pop	{r3}
 8007d4c:	469e      	mov	lr, r3
 8007d4e:	4770      	bx	lr

08007d50 <_fini>:
 8007d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d52:	bf00      	nop
 8007d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d56:	bc08      	pop	{r3}
 8007d58:	469e      	mov	lr, r3
 8007d5a:	4770      	bx	lr
